<?xml version="1.0" encoding="UTF-8"?>
<rulemap>
    <category description="Joint Strike Fighter" id="JSF"/>

    <clone newId="JSF-001"     id="METRICS-25"        severity="3"  header="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" /> 
    <clone newId="JSF-003"     id="METRICS-28"        severity="2"  header="All functions shall have a cyclomatic complexity number of 20 or less" /> 
    <clone newId="JSF-003_b"   id="METRICS-42"        severity="2"  header="Follow the Essential Complexity limit of 1" /> 
    <clone newId="JSF-009"     id="MISRA-005"         severity="3"  header="Only those characters specified in the C++ basic source character set will be used" /> 
    <clone newId="JSF-010"     id="MISRA-006"         severity="3"  header="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" /> 
    <clone newId="JSF-011"     id="MISRA2004-4_2"     severity="3"  header="Trigraphs will not be used" /> 
    <clone newId="JSF-012"     id="CODSTA-48"         severity="3"  header="The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:" /> 
    <clone newId="JSF-013"     id="MISRA-008"         severity="3"  header="Wide string literals (for example L&quot;abc&quot;) will not be used" /> 
    <clone newId="JSF-014"     id="PORT-01"           severity="2"  header="Capital 'L' shall be used instead of lowercase 'l' to indicate long" /> 
    <clone newId="JSF-015"     id="MISRA-004_a"       severity="2"  header="Ensure that array indices are within the bounds of the array" /> 
    <clone newId="JSF-017"     id="MISRA2004-20_5"    severity="2"  header="The error indicator 'errno' shall not be used" /> 
    <clone newId="JSF-018"     id="MISRA2004-20_6"    severity="2"  header="The macro 'offsetof', in library &lt;stddef.h&gt;, shall not be used" /> 
    <clone newId="JSF-019"     id="MISRA-121_a"       severity="2"  header="'setlocale' function shall not be used" /> 
    <clone newId="JSF-019_b"   id="MISRA-121_b"       severity="2"  header="&lt;locale.h&gt; shall not be used" /> 
    <clone newId="JSF-020"     id="MISRA2004-20_7"    severity="2"  header="The 'setjmp' macro and the 'longjmp' function shall not be used" /> 
    <clone newId="JSF-020_b"   id="MISRA2004-20_7_b"  severity="2"  header="The standard header file &lt;setjmp.h&gt; shall not be used" /> 
    <clone newId="JSF-021"     id="MISRA2004-20_8"    severity="2"  header="The standard header file &lt;signal.h&gt; shall not be used" />
    <clone newId="JSF-021_b"   id="MISRA2004-20_8_b"  severity="2"  header="The signal handling facilities of &lt;signal.h&gt; shall not be used" /> 
    <clone newId="JSF-022"     id="PREPROC-18"        severity="2"  header="The input/output library &lt;stdio.h&gt; shall not be used" /> 
    <clone newId="JSF-023"     id="MISRA2004-20_10"   severity="2"  header="The library functions atof, atoi and atol from library &lt;stdlib.h&gt; shall not be used" /> 
    <clone newId="JSF-024"     id="PB-75"             severity="2"  header="The library function 'abort' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="JSF-024_b"   id="PB-75_b"           severity="2"  header="The library function 'exit' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="JSF-024_c"   id="SECURITY-52"       severity="2"  header="The library function 'getenv' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="JSF-024_d"   id="SECURITY-48_b"     severity="2"  header="The library function 'system' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="JSF-025"     id="MISRA2004-20_12"   severity="2"  header="The time handling functions of library &lt;time.h&gt; shall not be used" /> 
    <clone newId="JSF-026"     id="PREPROC-11"        severity="2"  />
    <clone newId="JSF-026_b"   id="PREPROC-11_b"      severity="2"  />
    <clone newId="JSF-026_c"   id="PREPROC-22"        severity="2"  />
    <clone newId="JSF-026_d"   id="PREPROC-23"        severity="2"  /> 
    <clone newId="JSF-026_e"   id="PREPROC-25"        severity="2"  /> 
    <clone newId="JSF-027"     id="PFO-02"            severity="3"  header="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" /> 
    <clone newId="JSF-028"     id="PREPROC-10"        severity="3"  /> 
    <clone newId="JSF-028_b"   id="PREPROC-10_b"      severity="3"  /> 
    <clone newId="JSF-029"     id="MISRA2004-19_7"    severity="2"  header="The #define pre-processor directive shall not be used to create inline macros" /> 
    <clone newId="JSF-030"     id="CODSTA-03"         severity="2"  header="The #define pre-processor directive shall not be used to define constant values" /> 
    <clone newId="JSF-031"     id="PREPROC-01"        severity="3"  header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" /> 
    <clone newId="JSF-032"     id="PREPROC-08"        severity="3"  header="The #include pre-processor directive will only be used to include header (*.h) files" /> 
    <clone newId="JSF-033"     id="PREPROC-09"        severity="2"  header="The #include directive shall use the &lt;filename.h&gt; notation to include header files" /> 
    <clone newId="JSF-035"     id="PFO-02"            severity="3"  header="A header file will contain a mechanism that prevents multiple inclusions of itself"/> 
    <clone newId="JSF-037"     id="OPT-41"            severity="4"  header="A file should directly include only headers containing declarations and definitions needed to a compilation"/> 
    <clone newId="JSF-039_a"   id="PFO-01"            severity="3"  header="Header files (*.h) will not contain non-const variable definitions or function definitions"/> 
    <clone newId="JSF-039_b"   id="PFO-01_b"          severity="3"  header="Functions and non-const objects with internal linkage should not be declared in header files"/> 
    <clone newId="JSF-041"     id="METRICS-26"        severity="3"  header="Source lines will be kept to a length of 120 characters or less" /> 
    <clone newId="JSF-042"     id="FORMAT-06"         severity="3"  header="Each expression-statement will be on a separate line" /> 
    <clone newId="JSF-043"     id="FORMAT-01"         severity="4"  header="Tabs should be avoided" /> 
    <clone newId="JSF-044"     id="FORMAT-36"         severity="3"  header="All indentations will be consistent" /> 
    <clone newId="JSF-046_a"   id="PORT-34_a"         severity="2"  /> 
    <clone newId="JSF-046_b"   id="PORT-34_b"         severity="2"  /> 
    <clone newId="JSF-046_c"   id="PORT-34_c"         severity="2"  /> 
    <clone newId="JSF-047"     id="NAMING-33"         severity="3"  header="Identifiers will not begin with the underscore character &quot;_&quot;"/> 
    <clone newId="JSF-048"     id="NAMING-45"         severity="3"  header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers"/> 
    <clone newId="JSF-050"     id="NAMING-09"         severity="3"  header="Begin class, struct, union, enum, and typedef names with an uppercase letter" /> 
    <clone newId="JSF-051"     id="NAMING-44"         severity="3"  /> 
    <clone newId="JSF-052"     id="NAMING-42"         severity="2"  header="Identifiers for constant and enumerator values shall be lowercase" /> 
    <clone newId="JSF-053"     id="NAMING-41"         severity="3"  header="Header files will always have a file name extension of &quot;.h&quot;"/> 
    <clone newId="JSF-053.1"   id="PB-28"             severity="2"  header="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; "/> 
    <clone newId="JSF-054"     id="NAMING-49"         severity="3"  header="Implementation files will always have a file name extension of &quot;.cpp&quot;"/> 
    <clone newId="JSF-057_a"   id="CODSTA-CPP-46"     severity="3"  header="The public section of a class will be declared before the protected section and before the private section" /> 
    <clone newId="JSF-057_b"   id="CODSTA-CPP-47"     severity="3"  header="The protected section of a class will be declared before the private section"/> 
    <clone newId="JSF-058"     id="FORMAT-38"         severity="3"  header="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line"/> 
    <clone newId="JSF-059_a"   id="MISRA2004-14_8"    severity="2"  header="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces"/> 
    <clone newId="JSF-059_b"   id="MISRA2004-14_9"    severity="2"  header="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces"/> 
    <clone newId="JSF-060_a"   id="FORMAT-42"         severity="3"  header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" /> 
    <clone newId="JSF-060_b"   id="FORMAT-43"         severity="3"  header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column"/> 
    <clone newId="JSF-060_c"   id="FORMAT-44"         severity="3"  header="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;"/> 
    <clone newId="JSF-061"     id="FORMAT-42"         severity="3"  header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments"/> 
    <clone newId="JSF-062"     id="FORMAT-32"         severity="3"  header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier"/> 
    <clone newId="JSF-063_a"   id="FORMAT-17"         severity="3"  header="There will be no white space following '.' or '->' operator" /> 
    <clone newId="JSF-063_b"   id="FORMAT-18"         severity="3"  header="There will be no white space preceding '.' or '->' operator"/> 
    <clone newId="JSF-063_c"   id="FORMAT-21"         severity="3"  header="There will be no space between a unary operator '!' or '~' and its operand" /> 
    <clone newId="JSF-063_d"   id="FORMAT-22"         severity="3"  header="There will be no space between a increment/decrement operator (++/--) and its operand" /> 
    <clone newId="JSF-063_e"   id="FORMAT-45"         severity="3"  header="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" /> 
    <clone newId="JSF-063_f"   id="FORMAT-46"         severity="3"  header="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" /> 
    <clone newId="JSF-067_a"   id="OOP-18"            severity="4"  header="Public data should only be used in structs, not in classes" /> 
    <clone newId="JSF-067_b"   id="OOP-19"            severity="4"  header="Protected data should only be used in structs, not in classes"/> 
    <clone newId="JSF-068"     id="MRM-50"            severity="2"  header="Declare both private copy constructor and copy assignment operator at the same time" /> 
    <clone newId="JSF-069"     id="CODSTA-CPP-54"     severity="3"  header="A member function that does not affect the state of an object will be declared const"/> 
    <clone newId="JSF-070"     id="OOP-11"            severity="4"  header="Avoid using the friend mechanism" /> 
    <clone newId="JSF-070.1"   id="MRM-31"            severity="2"  header="Freed memory shall not be accessed under any circumstances" />
    <clone newId="JSF-070.1_b" id="MRM-31_b"          severity="2"  header="Destructor shall not be called manually" />  
    <clone newId="JSF-071"     id="PB-26"             severity="2"  header="Public and protected methods shall not be invoked by class constructor" /> 
    <clone newId="JSF-071_b"   id="INIT-06"           severity="2"  header="All member variables shall be initialized in constructor" /> 
    <clone newId="JSF-071_c"   id="OOP-16"            severity="2"  header="A class's virtual functions shall not be invoked from any of its constructors" /> 
    <clone newId="JSF-071_d"   id="INIT-13_a"         severity="2"  header="Uninitialized nonstatic member variables shall not be used in base class constructors" /> 
    <clone newId="JSF-071_e"   id="INIT-13_b"         severity="2"  header="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" /> 
    <clone newId="JSF-071_f"   id="INIT-13_c"         severity="2"  header="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" /> 
    <clone newId="JSF-071.1"   id="OOP-16"            severity="2"  header="A class's virtual functions shall not be invoked from any of its constructors" /> 
    <clone newId="JSF-071.1_b" id="OOP-16_b"          severity="2"  header="A class's virtual functions shall not be invoked from its destructor" /> 
    <clone newId="JSF-074"     id="INIT-14"           severity="3"  header="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor"/>
    <clone newId="JSF-075"     id="INIT-10"           severity="2"  header="Members of the initialization list shall be listed in the order in which they are declared in the class"/> 
    <clone newId="JSF-076"     id="MRM-49"            severity="2"  header="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" /> 
    <clone newId="JSF-077"     id="MRM-41"            severity="2"  header="A copy constructor shall copy all data members and bases"/> 
    <clone newId="JSF-077.1"   id="PB-24"             severity="2"  header="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" /> 
    <clone newId="JSF-078"     id="OOP-22"            severity="2"  header="All base classes with a virtual function shall define a virtual destructor" /> 
    <clone newId="JSF-079"     id="MRM-42"            severity="2"  header="Call fclose() on pointer member in destructor if the pointer was used to open a file" /> 
    <clone newId="JSF-079_b"   id="MRM-33"            severity="2"  header="Call delete on pointer members in destructors" /> 
    <clone newId="JSF-081"     id="OOP-34"            severity="2"  header="The assignment operator shall handle self-assignment correctly" /> 
    <clone newId="JSF-082"     id="CODSTA-CPP-02"     severity="2"  header="An assignment operator shall return a reference to *this" /> 
    <clone newId="JSF-083_a"   id="INIT-11"           severity="2"  header="An assignment operator shall assign all data members" /> 
    <clone newId="JSF-083_b"   id="MRM-43"            severity="2"  header="An assignment operator shall assign all data bases" /> 
    <clone newId="JSF-085"     id="CODSTA-CPP-16"     severity="3"  header="When two operators are opposites (such as == and !=), both will be defined"/> 
    <clone newId="JSF-085_a"   id="CODSTA-CPP-86"     severity="3"  header="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other"/> 
    <clone newId="JSF-087"     id="OOP-40"            severity="4"  header="Hierarchies should be based on abstract classes" /> 
    <clone newId="JSF-088"     id="OOP-07_a"          severity="2"  header="Multiple inheritance shall be limited to at most 1 protected implementation"/> 
    <clone newId="JSF-088_b"   id="OOP-07_b"          severity="2"  header="Multiple inheritance shall not use any public implementations"/> 
    <clone newId="JSF-088.1"   id="OOP-39_b"          severity="2"  header="A stateful virtual base shall be explicitly declared in each derived class that accesses it"/> 
    <clone newId="JSF-089"     id="OOP-41"            severity="2"  header="A base class shall not be both virtual and non-virtual in the same hierarchy"/> 
    <clone newId="JSF-094"     id="OOP-32"            severity="2"  header="An inherited nonvirtual function shall not be redefined in a derived class"/> 
    <clone newId="JSF-094_b"   id="OOP-53"            severity="2"  header="Member functions declared in derived class shall not hide functions declared in base classes"/> 
    <clone newId="JSF-095"     id="OOP-13"            severity="2"  header="An inherited default parameter shall never be redefined"/> 
    <clone newId="JSF-096"     id="PB-57"             severity="2"  header="Arrays shall not be treated polymorphically" /> 
    <clone newId="JSF-097"     id="CODSTA-CPP-55"     severity="2"  header="Arrays shall not be used in interfaces"/> 
    <clone newId="JSF-097_b"   id="CODSTA-CPP-55_b"   severity="2"  header="Arrays shall not be used in private or protected methods"/>
    <clone newId="JSF-097_c"   id="CODSTA-142"        severity="2"  header="Arrays shall not be used in global functions"/>
    <clone newId="JSF-097_d"   id="PB-41_b"           severity="2"  header="Arrays shall not be passed to functions as array/pointer parameters"/>
    <clone newId="JSF-097_e"   id="CODSTA-142_b"      severity="2"  header="Functions which are called with array argument shall not be declared with pointer parameter"/>
    <clone newId="JSF-097.1"   id="CODSTA-CPP-79"     severity="2"  header="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function"/> 
    <clone newId="JSF-098"     id="CODSTA-CPP-36"     severity="4"  header="Every nonlocal name, except main(), should be placed in some namespace"/> 
    <clone newId="JSF-099"     id="CODSTA-CPP-57"     severity="3"  header="Namespaces will not be nested more than two levels deep"/> 
    <clone newId="JSF-100"     id="CODSTA-CPP-39"     severity="4"  header="Don't write namespace usings in a header file or before an #include"/>
    <clone newId="JSF-104"     id="TEMPL-10"          severity="3"  header="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template"/>
    <clone newId="JSF-105"     id="TEMPL-12"          severity="4"  header="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier"/>
    <clone newId="JSF-107"     id="MISRA2004-8_6"     severity="2"  header="Functions shall always be declared at file scope"/> 
    <clone newId="JSF-108"     id="MISRA-069"         severity="2"  header="Functions with variable numbers of arguments shall not be used"/> 
    <clone newId="JSF-109"     id="CODSTA-CPP-32"     severity="4"  header="A function definition should not be placed in a class specification"/> 
    <clone newId="JSF-110"     id="METRICS-27"        severity="3"  header="Functions with more than 7 arguments will not be used"/> 
    <clone newId="JSF-111"     id="MISRA2004-17_6_a"  severity="2"  header="A function shall not return a pointer or reference to a non-static local object"/> 
    <clone newId="JSF-111_a"   id="PB-39_b"           severity="2"  />
    <clone newId="JSF-112"     id="MRM-23"            severity="4"  header="Dereferenced local pointer initialized by new in function scope should not be returned" /> 
    <clone newId="JSF-113"     id="MISRA2004-14_7"    severity="3"  header="Functions will have a single exit point"/> 
    <clone newId="JSF-114"     id="MISRA2004-16_8"    severity="2"  header="All exit points of value-returning functions shall be through return statements"/> 
    <clone newId="JSF-115"     id="MISRA2004-16_10"   severity="3"  header="If a function returns error information, then that error information will be tested"/> 
    <clone newId="JSF-115_a"   id="CODSTA-CPP-58"     severity="4"  header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used"/>
    <clone newId="JSF-116"     id="CODSTA-36"         severity="4"  header="Built-in-types should be passed by value unless you are modifying them" />
    <clone newId="JSF-117"     id="OPT-14"            severity="4"  header="Arguments should be passed by reference" />
    <clone newId="JSF-117_b"   id="PB-23"             severity="4"  header="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor"/>
    <clone newId="JSF-117.1"   id="CODSTA-CPP-43"     severity="4"  header="An object should be passed as const reference if the function should not change the value of the object" />
    <clone newId="JSF-118"     id="MISRA2004-16_7"    severity="4"  header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" />
    <clone newId="JSF-118_b"   id="MISRA2004-16_7_b"  severity="4"  header="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" />
    <clone newId="JSF-119"     id="MISRA2004-16_2"    severity="2"  header="Functions shall not call themselves, either directly or indirectly" />
    <clone newId="JSF-121"     id="OPT-25"            severity="4"  header="Only functions with 1 or 2 statements should be considered candidates for inline functions" />
    <clone newId="JSF-122"     id="OPT-23"            severity="4"  header="Trivial accessor and mutator functions should be inlined"/> 
    <clone newId="JSF-123"     id="CODSTA-CPP-81"     severity="4"  header="Classes which have only getters/setters (accessors/mutators) are not allowed" /> 
    <clone newId="JSF-124"     id="OPT-24"            severity="4"  header="Trivial forwarding functions should be inlined" /> 
    <clone newId="JSF-125_a"   id="OPT-14"            severity="4"  header="Pass and return by reference when possible" /> 
    <clone newId="JSF-125_b"   id="OPT-19"            severity="5"  header="Consider using op= instead of stand-alone op" /> 
    <clone newId="JSF-126"     id="COMMENT-01"        severity="2"  header="Only valid C++ style comments (//) shall be used"/> 
    <clone newId="JSF-127"     id="MISRA2004-2_4"     severity="2"  header="Code that is not used (commented out) shall be deleted"/> 
    <clone newId="JSF-127_b"   id="MISRA2004-2_4_b"   severity="2"  />
    <clone newId="JSF-132_a"   id="COMMENT-05"        severity="3"  header="Each variable declaration will be commented" /> 
    <clone newId="JSF-132_b"   id="COMMENT-06"        severity="3"  header="Each typedef will be commented" /> 
    <clone newId="JSF-132_c"   id="COMMENT-07"        severity="3"  header="Each enumeration value will be commented" /> 
    <clone newId="JSF-132_d"   id="COMMENT-08"        severity="3"  header="Each structure member variable will be commented" /> 
    <clone newId="JSF-133_a"   id="COMMENT-03"        severity="3"  header="Every source file will be documented with an introductory comment that provides information on the file" /> 
    <clone newId="JSF-133_b"   id="COMMENT-02"        severity="3"  header="Every source file will contain copyright information"/> 
    <clone newId="JSF-134"     id="COMMENT-04"        severity="4"  header="Document functions in comments that precede function definitions"/>
    <clone newId="JSF-134_b"   id="COMMENT-04_b"      severity="4"  header="Document functions in comments that precede function declarations"/> 
    <clone newId="JSF-135_a"   id="MISRA2004-5_2_a"   severity="2"  header="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" /> 
    <clone newId="JSF-135_b"   id="MISRA2004-5_2_b"   severity="2"  header="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" /> 
    <clone newId="JSF-135_c"   id="CODSTA-CPP-83"     severity="2"  header="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" /> 
    <clone newId="JSF-135_d"   id="CODSTA-CPP-84"     severity="2"  header="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" /> 
    <clone newId="JSF-135_e"   id="CODSTA-CPP-85"     severity="2"  header="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" /> 
    <clone newId="JSF-136_a"   id="MISRA2004-8_7"     severity="4"  header="Objects should be defined at block scope if they are only accessed from within a single function" /> 
    <clone newId="JSF-136_b"   id="OPT-01"            severity="4"  header="Declarations of local variables should be at the smallest feasible scope" /> 
    <clone newId="JSF-137"     id="MISRA-023"         severity="4"  header="All declarations at file scope should be static where possible"/> 
    <clone newId="JSF-138_a"   id="MISRA-024"         severity="2"  header="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit"/> 
    <clone newId="JSF-138_b"   id="MISRA2004-8_11"    severity="2"  header="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" /> 
    <clone newId="JSF-139"     id="MISRA-027"         severity="3"  header="External objects will not be declared in more than one file" /> 
    <clone newId="JSF-139_b"   id="MISRA-027_b"       severity="3"  header="External objects will not be declared in implementation files" />
    <clone newId="JSF-140"     id="MISRA-028"         severity="2"  header="The register storage class specifier shall not be used"/> 
    <clone newId="JSF-141"     id="CODSTA-CPP-56"     severity="3"  header="A class, structure, or enumeration will not be declared in the definition of its type"/> 
    <clone newId="JSF-142_a"   id="MISRA-030"         severity="2"  header="All automatic variables shall have been assigned a value before being used" /> 
    <clone newId="JSF-142_b"   id="INIT-03"           severity="2"  header="All variables shall be initialized before use"/> 
    <clone newId="JSF-143"     id="OPT-26"            severity="3"  header="Variables will not be introduced until they can be initialized with meaningful values"/> 
    <clone newId="JSF-143_a"   id="OPT-02"            severity="3"  header="Avoid unused local variables" /> 
    <clone newId="JSF-144"     id="INIT-16"           severity="2"  header="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures"/> 
    <clone newId="JSF-145"     id="MISRA2004-9_3"     severity="2"  header="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized"/> 
    <clone newId="JSF-147"     id="MISRA-016"         severity="2"  header="The underlying bit representations of floating point numbers shall not be used in any way by the programmer"/> 
    <clone newId="JSF-148"     id="CODSTA-55"         severity="2"  header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices"/> 
    <clone newId="JSF-149"     id="MISRA2004-7_1_a"   severity="2"  header="Octal constants (other than zero) shall not be used"/> 
    <clone newId="JSF-150"     id="CODSTA-50"         severity="3"  header="Hexadecimal constants will be represented using all uppercase letters"/> 
    <clone newId="JSF-151"     id="CODSTA-26"         severity="3"  header="Numeric values in code will not be used; symbolic values will be used instead"/> 
    <clone newId="JSF-151.1"   id="PB-27"             severity="2"  header="A string literal shall not be modified"/> 
    <clone newId="JSF-152"     id="FORMAT-29"         severity="2"  header="Multiple variable declarations shall not be allowed on the same line" /> 
    <clone newId="JSF-153"     id="MISRA2004-18_4"    severity="2"  header="Unions shall not be used"/> 
    <clone newId="JSF-154"     id="CODSTA-96"         severity="2"  header="Bit-fields shall have explicitly unsigned integral or enumeration types only"/> 
    <clone newId="JSF-156"     id="MISRA-113"         severity="2"  header="All the members of a structure (or class) shall be named"/> 
    <clone newId="JSF-157"     id="MISRA2004-12_4_a"  severity="2"  header="The right hand operand of a &amp;&amp; or || operator shall not contain side effects"/> 
    <clone newId="JSF-158"     id="CODSTA-104"        severity="2"  header="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators"/> 
    <clone newId="JSF-159"     id="CODSTA-CPP-08"     severity="2"  header="Operators ||, &amp;&amp; shall not be overloaded"/> 
    <clone newId="JSF-159_b"   id="CODSTA-CPP-68"     severity="2"  header="Operator unary &amp; shall not be overloaded"/> 
    <clone newId="JSF-160"     id="MISRA2004-13_1"    severity="2"  header="An assignment expression shall be used only as the expression in an expression statement"/> 
    <clone newId="JSF-162_a"   id="CODSTA-99"         severity="2"  header="Signed and unsigned values shall not be mixed in comparison operations" /> 
    <clone newId="JSF-162_b"   id="CODSTA-101"        severity="2"  header="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" /> 
    <clone newId="JSF-162_c"   id="CODSTA-100"        severity="2"  header="Signed and unsigned values shall not be mixed in arithmetic operations" /> 
    <clone newId="JSF-163"     id="PB-25"             severity="2"  header="Unsigned arithmetic shall not be used" /> 
    <clone newId="JSF-164"     id="BD-PB-BADSHIFT"    severity="2"  header="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand">
      <defParameters>
        <![CDATA[
          JSF-164-violateOnNegativeShift=true
          JSF-164-violateOnNegativeShifted=false
          JSF-164-violateOnOverflow=false
          JSF-164-violateOnTooBigShift=true
          JSF-164-violateOnUnsignedOverflow=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="JSF-164.1"   id="PB-29"             severity="2"  header="The left-hand operand of a right-shift operator shall not have a negative value" />
    <clone newId="JSF-165"     id="MISRA2004-12_9"    severity="2"  header="The unary minus operator shall not be applied to an unsigned expression"/>
    <clone newId="JSF-166"     id="MISRA2004-12_3"    severity="3"  header="The sizeof operator will not be used on expressions that contain side effects"/> 
    <clone newId="JSF-166_b"   id="MISRA2004-12_3_b"  severity="3"  header="The sizeof operator will not be used on expressions that contain side effects"/> 
    <clone newId="JSF-166_c"   id="MISRA2004-12_3_c"  severity="3"  header="The sizeof operator will not be used on expressions that contain side effects"/> 
    <clone newId="JSF-167"     id="MISRA-041"         severity="3"  header="The implementation of integer division shall be documented"/> 
    <clone newId="JSF-167_a"   id="PB-15"             severity="2"  header="Don't assign the dividend of two integers to a floating-point type"/> 
    <clone newId="JSF-168_b"   id="MISRA2004-12_10"   severity="2"  header="The comma operator shall not be used"/> 
    <clone newId="JSF-169"     id="CODSTA-05"         severity="4"  header="Pointers to pointers should be avoided"/> 
    <clone newId="JSF-170"     id="MISRA-102"         severity="2"  header="More than 2 levels of pointer indirection shall not be used"/> 
    <clone newId="JSF-171"     id="BD-PB-PTRCMP"      severity="2"  header="Relational operators shall not be applied to pointer types except where they point to the same array">
      <defParameters>
        <![CDATA[
          JSF-171-aggressiveMode=true
          JSF-171-reportOnComparisonFunctions=false
          JSF-171-reportOnRelationalOperators=true
          JSF-171-treatPointersToFieldsOfTheSameStructRelated=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="JSF-173"     id="MISRA2004-17_6_b"  severity="2"  header="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist"/> 
    <clone newId="JSF-174_a"   id="MISRA-107_a"       severity="2"  header="The null pointer shall not be de-referenced"/> 
    <clone newId="JSF-174_b"   id="MISRA-107_b"       severity="2"  header="The null pointer shall not be de-referenced"/> 
    <clone newId="JSF-175"     id="CODSTA-17"         severity="2"  header="NULL identifier shall not be used; use plain 0 instead"/> 
    <clone newId="JSF-176"     id="CODSTA-34"         severity="3"  header="A typedef will be used to simplify program syntax when declaring function pointers"/> 
    <clone newId="JSF-177"     id="CODSTA-CPP-05"     severity="4"  header="User-defined conversion functions should be avoided"/> 
    <clone newId="JSF-177_b"   id="CODSTA-CPP-04"     severity="4"  header="Constructors allowing for conversion should be made explicit"/> 
    <clone newId="JSF-178"     id="OOP-35"            severity="2"  header="Down casting (casting from base to derived class) shall not be allowed"/> 
    <clone newId="JSF-179"     id="OOP-50"            severity="2"  header="A pointer to a virtual base class shall not be converted to a pointer to a derived class"/> 
    <clone newId="JSF-180_a"   id="MISRA-043"         severity="2"  header="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" /> 
    <clone newId="JSF-180_b"   id="MISRA2004-10_2_a"  severity="2"  header="Avoid implicit conversions from floating to integral type" /> 
    <clone newId="JSF-180_c"   id="MISRA2004-10_2_b"  severity="2"  header="Avoid implicit conversions from wider to narrower floating type" /> 
    <clone newId="JSF-180_d"   id="PORT-28"           severity="2"  header="Avoid conversions of constant values to a narrower type" /> 
    <clone newId="JSF-180_e"   id="PB-56"             severity="2"  header="Avoid implicit conversions from signed to unsigned type" /> 
    <clone newId="JSF-180_f"   id="MISRA-043_c"       severity="2"  header="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" /> 
    <clone newId="JSF-180_g"   id="MISRA-043_d"       severity="2"  header="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" /> 
    <clone newId="JSF-181_a"   id="OPT-29"            severity="3"  header="Redundant explicit casts will not be used" /> 
    <clone newId="JSF-181_b"   id="OOP-20"            severity="3"  header="Avoid explicit cast from derived to a base class" /> 
    <clone newId="JSF-182"     id="CODSTA-135"        severity="2"  header="Type casting from any type to or from pointers shall not be used" /> 
    <clone newId="JSF-183"     id="CODSTA-31"         severity="4"  header="Every possible measure should be taken to avoid type casting"/> 
    <clone newId="JSF-183_a"   id="CODSTA-CPP-34"     severity="4"  header="Avoid using static_cast on pointers"/>
    <clone newId="JSF-183_b"   id="CODSTA-CPP-09"     severity="4"  header="Avoid using reinterpret_cast"/>
    <clone newId="JSF-184_a"   id="MISRA2004-10_2_a"  severity="2"  header="Floating point numbers shall not implicitly be converted to integers"/> 
    <clone newId="JSF-185"     id="CODSTA-CPP-66"     severity="2"  header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used"/>
    <clone newId="JSF-186_a"   id="MISRA2004-14_1_a"  severity="2"  header="There shall be no unreachable code in 'else' block" /> 
    <clone newId="JSF-186_b"   id="MISRA2004-14_1_b"  severity="2"  header="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" /> 
    <clone newId="JSF-186_c"   id="MISRA2004-14_1_c"  severity="2"  header="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" /> 
    <clone newId="JSF-186_d"   id="MISRA2004-14_1_d"  severity="2"  header="There shall be no unreachable code in 'switch' statement" /> 
    <clone newId="JSF-186_e"   id="MISRA2004-14_1_e"  severity="2"  header="There shall be no unreachable code in 'for' loop" /> 
    <clone newId="JSF-186_f"   id="MISRA2004-14_1_f"  severity="2"  header="There shall be no unreachable code after 'if' or 'switch' statement" /> 
    <clone newId="JSF-186_g"   id="MISRA2004-14_1_g"  severity="2"  header="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" /> 
    <clone newId="JSF-186_h"   id="OPT-30"            severity="2"  header="Every defined function with internal linkage shall be used" /> 
    <clone newId="JSF-187"     id="MISRA2004-14_2"    severity="2"  header="All non-null statements shall potentially have a side-effect"/> 
    <clone newId="JSF-188"     id="MISRA-055"         severity="3"  header="Labels will not be used, except in switch statements"/> 
    <clone newId="JSF-189"     id="MISRA2004-14_4"    severity="2"  header="The goto statement shall not be used"/> 
    <clone newId="JSF-190"     id="MISRA2004-14_5"    severity="2"  header="The continue statement shall not be used"/> 
    <clone newId="JSF-191"     id="MISRA-058"         severity="2"  header="The break statement shall not be used (except to terminate the cases of a switch statement)"/> 
    <clone newId="JSF-191_a"   id="CODSTA-79"         severity="2"  header="For any iteration statement there shall be no more than one break or goto statement used for loop termination"/>
    <clone newId="JSF-192"     id="CODSTA-98"         severity="3"  header="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" /> 
    <clone newId="JSF-193"     id="MISRA2004-15_2"    severity="2"  header="Every non-empty case clause in a switch statement shall be terminated with a break statement"/> 
    <clone newId="JSF-194"     id="CODSTA-61"         severity="2"  header="All switch statements that do not intend to test for every enumeration value shall contain a final default clause"/> 
    <clone newId="JSF-195"     id="MISRA2004-15_4"    severity="3"  header="A switch expression will not represent a Boolean value"/> 
    <clone newId="JSF-196"     id="CODSTA-54"         severity="3"  header="Every switch statement will have at least two cases and a potential default"/> 
    <clone newId="JSF-197"     id="MISRA-065"         severity="2"  header="Floating point variables shall not be used as loop counters"/> 
    <clone newId="JSF-198"     id="CODSTA-52"         severity="3"  header="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter"/> 
    <clone newId="JSF-199"     id="CODSTA-53"         severity="3"  header="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop"/> 
    <clone newId="JSF-200"     id="CODSTA-49"         severity="3"  header="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead"/> 
    <clone newId="JSF-201"     id="MISRA2004-13_6"    severity="2"  header="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop"/> 
    <clone newId="JSF-202"     id="MISRA2004-13_3"    severity="2"  header="Floating point variables shall not be tested for exact equality or inequality"/> 
    <clone newId="JSF-203"     id="PB-73"             severity="2"  header="Evaluation of expressions shall not lead to overflow/underflow"/> 
    <clone newId="JSF-203_b"   id="PB-73_b"           severity="2"  header="Evaluation of expressions shall not lead to overflow/underflow"/> 
    <clone newId="JSF-204_a"   id="CODSTA-102"        severity="2"  header="A single operation with side-effect shall only be used in the proper context" /> 
    <clone newId="JSF-204_b"   id="CODSTA-103"        severity="2"  header="A call of function with side-effect shall only be used in the proper context" /> 
    <clone newId="JSF-204_d"   id="CODSTA-105"        severity="2"  header="The second or third operand of a ternary operator '?:' shall not contain side effects"/>
    <clone newId="JSF-204.1_a" id="MISRA2004-12_2_a"  severity="2"  header="The value of an expression shall be the same under any order of evaluation that the standard permits" /> 
    <clone newId="JSF-204.1_b" id="MISRA2004-12_2_b"  severity="2"  header="Don't write code that depends on the order of evaluation of function arguments" /> 
    <clone newId="JSF-204.1_c" id="MISRA2004-12_2_c"  severity="2"  header="Don't write code that depends on the order of evaluation of function designator and function arguments" /> 
    <clone newId="JSF-204.1_d" id="MISRA2004-12_2_d"  severity="2"  header="Don't write code that depends on the order of evaluation of expression that involves a function call" /> 
    <clone newId="JSF-204.1_e" id="MISRA2004-12_2_e"  severity="2"  header="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" /> 
    <clone newId="JSF-204.1_f" id="MISRA2004-12_2_f"  severity="2"  header="Do not use more than one volatile in one expression" /> 
    <clone newId="JSF-204.1_g" id="MISRA2004-12_2_g"  severity="2"  header="Don't write code that depends on the order of evaluation of function calls" /> 
    <clone newId="JSF-205"     id="MISRA-046_a"       severity="2"  header="The volatile keyword shall not be used"/> 
    <clone newId="JSF-206"     id="MISRA2004-20_4"    severity="2"  header="Dynamic heap memory allocation shall not be used" /> 
    <clone newId="JSF-207"     id="CODSTA-CPP-82"     severity="3"  header="Unencapsulated global data will be avoided"/> 
    <clone newId="JSF-208"     id="EXCEPT-05"         severity="2"  header="C++ exceptions shall not be used"/> 
    <clone newId="JSF-209"     id="MISRA2004-6_3"     severity="2"  header="Typedefs that indicate size and signedness shall be used in place of the basic types" /> 
    <clone newId="JSF-209_b"   id="MISRA2004-6_3_b"   severity="2"  header="Typedefs that indicate size and signedness shall be used in place of the basic types" /> 
    <clone newId="JSF-210.1"   id="PORT-26"           severity="2"  header="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" /> 
    <clone newId="JSF-211"     id="MISRA2004-11_4"    severity="2"  header="Algorithms shall not assume particular memory alignment"/>
    <clone newId="JSF-213_e"   id="CODSTA-97"         severity="2"  header="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" /> 
    <clone newId="JSF-214"     id="INIT-12"           severity="2"  header="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done"/> 
    <clone newId="JSF-215"     id="MISRA-101"         severity="4"  header="Pointer arithmetic will not be used"/> 

    <category description="MISRA C++ 2008" id="MISRA2008"/>
    <clone newId="MISRA2008-0_1_1_a"  id="MISRA2004-14_1_a"  severity="2" header="A project shall not contain unreachable code in 'else' block" />
    <clone newId="MISRA2008-0_1_1_b"  id="MISRA2004-14_1_b"  severity="2" header="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" />
    <clone newId="MISRA2008-0_1_1_c"  id="MISRA2004-14_1_c"  severity="2" header="A project shall not contain unreachable code in 'if/else/while/for' block" />
    <clone newId="MISRA2008-0_1_1_d"  id="MISRA2004-14_1_d"  severity="2" header="A project shall not contain unreachable code in switch statement" />
    <clone newId="MISRA2008-0_1_1_e"  id="MISRA2004-14_1_e"  severity="2" header="A project shall not contain unreachable code in 'for' loop" />
    <clone newId="MISRA2008-0_1_1_f"  id="MISRA2004-14_1_f"  severity="2" header="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" />
    <clone newId="MISRA2008-0_1_1_g"  id="MISRA2004-14_1_g"  severity="2" header="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" />
    <clone newId="MISRA2008-0_1_2_a"  id="MISRA2004-13_7_a"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_b"  id="MISRA2004-13_7_aa" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_c"  id="MISRA2004-13_7_ab" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_d"  id="MISRA2004-13_7_ac" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_e"  id="MISRA2004-13_7_ad" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_f"  id="MISRA2004-13_7_ae" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_g"  id="MISRA2004-13_7_af" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_h"  id="MISRA2004-13_7_ag" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_i"  id="MISRA2004-13_7_ah" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_j"  id="MISRA2004-13_7_ai" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_k"  id="MISRA2004-13_7_aj" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_l"  id="MISRA2004-13_7_ak" severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_m"  id="MISRA2004-13_7_b"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_n"  id="MISRA2004-13_7_c"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_o"  id="MISRA2004-13_7_d"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_p"  id="MISRA2004-13_7_j"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_q"  id="MISRA2004-13_7_k"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_r"  id="MISRA2004-13_7_l"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_rz" id="MISRA2004-13_7_z"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_s"  id="MISRA2004-13_7_m"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_sz" id="MISRA2004-13_7_v"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_t"  id="MISRA2004-13_7_n"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_u"  id="MISRA2004-13_7_s"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_v"  id="MISRA2004-13_7_t"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_w"  id="MISRA2004-13_7_u"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_x"  id="MISRA2004-13_7_w"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_y"  id="MISRA2004-13_7_x"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_z"  id="MISRA2004-13_7_y"  severity="2" header="A project shall not contain infeasible paths" />
    <clone newId="MISRA2008-0_1_2_aa" id="BD-PB-CC"          severity="2" header="A project shall not contain infeasible paths">
      <defParameters>
        <![CDATA[
          MISRA2008-0_1_2_aa-violateOnNoIf=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-0_1_3_c"  id="OPT-05"            severity="2" header="Eliminate unused private member variables" />
    <clone newId="MISRA2008-0_1_3_d"  id="GLOBAL-UNUSEDEXTVAR" severity="2" />
    <clone newId="MISRA2008-0_1_3_f"  id="OPT-02_b"          severity="2" header="A project shall not contain unused uninitialized local variables" />
    <clone newId="MISRA2008-0_1_3_g"  id="OPT-43_b"          severity="2" />
    <clone newId="MISRA2008-0_1_4"    id="GLOBAL-ONEUSEVAR"  severity="2" header="A project shall not contain non-volatile POD variables having only one use" />
    <clone newId="MISRA2008-0_1_5"    id="GLOBAL-UNUSEDTYPE" severity="2" header="A project shall not contain unused type declarations" />
    <clone newId="MISRA2008-0_1_6"    id="BD-PB-VOVR"        severity="2" header="Avoid unused values">
      <defParameters>
        <![CDATA[
        MISRA2008-0_1_6-reportVariableNotUsedOnAllPaths=true
        MISRA2008-0_1_6-reportOnVariableDefaultDeclarations=false
        ]]>
      </defParameters>
    </clone>

    <clone newId="MISRA2008-0_1_7"    id="CODSTA-CPP-58"     severity="2" header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" />
    <clone newId="MISRA2008-0_1_8"    id="OPT-32"            severity="2" header="All functions with void return type shall have external side effect(s)" />
    <clone newId="MISRA2008-0_1_8_b"  id="OPT-32_b"          severity="2" header="All functions with void return type shall have external side effect(s)" />
    <clone newId="MISRA2008-0_1_9"    id="MISRA2004-14_2"    severity="2" header="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" />
    <clone newId="MISRA2008-0_1_10"   id="OPT-30"            severity="2" header="Every defined function with internal linkage shall be used" />
    <clone newId="MISRA2008-0_1_10_b" id="GLOBAL-UNUSEDFUNC" severity="2" header="Every defined function with external linkage shall be used" />
    <clone newId="MISRA2008-0_1_11"   id="OPT-31"            severity="2" header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" />
    <clone newId="MISRA2008-0_1_12"   id="GLOBAL-UNUSEDVIRTPARAM" severity="2" header="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" />
    <clone newId="MISRA2008-0_2_1_a"  id="MISRA2004-18_2_b"  severity="2" header="An object shall not be assigned to an overlapping object" />
    <clone newId="MISRA2008-0_2_1_b"  id="PB-42"             severity="2" header="An object shall not be assigned to an overlapping object" />
    <clone newId="MISRA2008-0_3_1_a"  id="BD-PB-ARRAY"       severity="5" header="Avoid accessing arrays out of bounds"  />
    <clone newId="MISRA2008-0_3_1_b"  id="BD-PB-NP"          severity="5" header="Avoid null pointer dereferencing"  />
    <clone newId="MISRA2008-0_3_1_c"  id="BD-PB-ZERO"        severity="5" header="Avoid division by zero"  />
    <clone newId="MISRA2008-0_3_1_d"  id="BD-PB-OVERFFMT"    severity="5" header="Avoid buffer overflow due to defining incorrect format limits"  />
    <clone newId="MISRA2008-0_3_1_e"  id="BD-PB-OVERFNZT"    severity="5" header="Avoid overflow due to reading a not zero terminated string"  />
    <clone newId="MISRA2008-0_3_1_g"  id="BD-PB-OVERFRD"     severity="5" header="Avoid overflow when reading from a buffer"  />
    <clone newId="MISRA2008-0_3_1_h"  id="BD-PB-OVERFWR"     severity="5" header="Avoid overflow when writing to a buffer"  />
    <clone newId="MISRA2008-0_3_1_i"  id="BD-PB-PTRSUB"      severity="5">
      <defParameters>
        <![CDATA[
        MISRA2008-0_3_1_i-aggressiveMode=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-0_3_1_j"  id="BD-PB-PTRCMP"      severity="5">
      <defParameters>
        <![CDATA[
        MISRA2008-0_3_1_j-aggressiveMode=true
        MISRA2008-0_3_1_j-reportOnComparisonFunctions=false
        MISRA2008-0_3_1_j-reportOnRelationalOperators=true
        MISRA2008-0_3_1_j-treatPointersToFieldsOfTheSameStructRelated=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-0_3_2"    id="MISRA2004-16_10"   severity="2" header="If a function generates error information, then that error information shall be tested" />
    <clone newId="MISRA2008-0_4_2"    id="COMMENT-10"        severity="5" header="Use of floating-point arithmetic shall be documented" />
    <clone newId="MISRA2008-2_3_1"    id="MISRA2004-4_2"     severity="2" header="Trigraphs shall not be used" />
    <clone newId="MISRA2008-2_5_1"    id="CODSTA-48"         severity="4" header="Digraphs should not be used" />
    <clone newId="MISRA2008-2_7_1"    id="MISRA2004-2_3"     severity="2" header="The character sequence /* shall not be used within a C-style comment" />
    <clone newId="MISRA2008-2_7_2"    id="MISRA2004-2_4"     severity="2" header="Sections of code shall not be &quot;commented out&quot; using C-style comments" />
    <clone newId="MISRA2008-2_7_2_b"  id="MISRA2004-2_4_b"   severity="2" header="Sections of code shall not be &quot;commented out&quot; using C-style comments" />
    <clone newId="MISRA2008-2_7_3"    id="MISRA2004-2_4"     severity="4" header="Sections of code should not be &quot;commented out&quot; using C++ comments" />
    <clone newId="MISRA2008-2_7_3_b"  id="MISRA2004-2_4_b"   severity="4" header="Sections of code should not be &quot;commented out&quot; using C++ comments" />
    <clone newId="MISRA2008-2_10_1"   id="NAMING-47"         severity="2" header="Different identifiers shall be typographically unambiguous" />
    <clone newId="MISRA2008-2_10_2_a" id="MISRA2004-5_2_a"   severity="2" header="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" />
    <clone newId="MISRA2008-2_10_2_b" id="MISRA2004-5_2_b"   severity="2" header="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" />
    <clone newId="MISRA2008-2_10_3"   id="GLOBAL-UNIQUETYPEDEF" severity="2" header="A typedef name (including qualification, if any) shall be a unique identifier" />
    <clone newId="MISRA2008-2_10_4"   id="GLOBAL-UNIQUETYPE" severity="2" header="A class, union or enum name (including qualification, if any) shall be a unique identifier" />
    <clone newId="MISRA2008-2_10_5_a" id="GLOBAL-REUSEDEXTVAR"  severity="4" header="The identifier name of a non-member object or function with static storage duration should not be reused" />
    <clone newId="MISRA2008-2_10_5_b" id="GLOBAL-REUSEDEXTFUN"  severity="4" header="The identifier name of a non-member object or function with static storage duration should not be reused" />
    <clone newId="MISRA2008-2_10_5_c" id="GLOBAL-REUSEDSTATVAR" severity="4" header="The identifier name of a non-member object or function with static storage duration should not be reused" />
    <clone newId="MISRA2008-2_10_5_d" id="GLOBAL-REUSEDSTATFUN" severity="4" header="The identifier name of a non-member object or function with static storage duration should not be reused" />
    <clone newId="MISRA2008-2_10_6_a" id="CODSTA-CPP-87_a"   severity="2" header="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" />
    <clone newId="MISRA2008-2_10_6_b" id="CODSTA-CPP-87_b"   severity="2" header="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" />
    <clone newId="MISRA2008-2_10_6_c" id="CODSTA-CPP-87_c"   severity="2" header="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" />
    <clone newId="MISRA2008-2_13_1"   id="CODSTA-CPP-60"     severity="2" header="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" />
    <clone newId="MISRA2008-2_13_2_a" id="MISRA2004-7_1_a"   severity="2" header="Octal constants (other than zero) shall not be used" />
    <clone newId="MISRA2008-2_13_2_b" id="MISRA2004-7_1_b"   severity="2" header="Octal escape sequences (other than &quot;\0&quot;) shall not be used" />
    <clone newId="MISRA2008-2_13_3"   id="CODSTA-68"         severity="2" header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" />
    <clone newId="MISRA2008-2_13_4"   id="CODSTA-51"         severity="2" header="Literal suffixes shall be upper case" />
    <clone newId="MISRA2008-2_13_5"   id="PB-38"             severity="2" header="Narrow and wide string literals shall not be concatenated" />
    <clone newId="MISRA2008-3_1_1"    id="PFO-01"            severity="2" header="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" />
    <clone newId="MISRA2008-3_1_1_b"  id="PFO-01_b"          severity="2" header="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" />
    <clone newId="MISRA2008-3_1_2"    id="MISRA2004-8_6"     severity="2" header="Functions shall not be declared at block scope" />
    <clone newId="MISRA2008-3_1_3"    id="MISRA2004-8_12"    severity="2" header="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" />
    <clone newId="MISRA2008-3_2_1"    id="GLOBAL-COMPATDECLS" severity="2" header="All declarations of an object or function shall have compatible types"  />
    <clone newId="MISRA2008-3_2_2"    id="GLOBAL-ONEDEFRULE" severity="2" header="The One Definition Rule shall not be violated"  />
    <clone newId="MISRA2008-3_2_3"    id="GLOBAL-ONEFILEDECL" severity="2" header="A type, object or function that is used in multiple translation units shall be declared in one and only one file"  />
    <clone newId="MISRA2008-3_2_4"    id="GLOBAL-ONEEXTERNDEF" severity="2" header="An identifier with external linkage shall have exactly one external definition"  />
    <clone newId="MISRA2008-3_2_4_b"  id="GLOBAL-NOEXTERNDEF" severity="2"  header="An identifier with external linkage shall have exactly one external definition"  />
    <clone newId="MISRA2008-3_3_1"    id="MISRA-023"         severity="2" header="Objects or functions with external linkage shall be declared in a header file" />
    <clone newId="MISRA2008-3_3_2"    id="CODSTA-81"         severity="2" header="If a function has internal linkage then all re-declarations shall include the static storage class specifier" />
    <clone newId="MISRA2008-3_4_1_a"  id="OPT-01"            severity="2" header="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" />
    <clone newId="MISRA2008-3_4_1_b"  id="OPT-45"            severity="2" header="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" />
    <clone newId="MISRA2008-3_9_1"    id="CODSTA-67"         severity="2" header="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" />
    <clone newId="MISRA2008-3_9_2"    id="MISRA-013"         severity="4" header="typedefs that indicate size and signedness should be used in place of the basic numerical types" />
    <clone newId="MISRA2008-3_9_3"    id="MISRA2004-12_12"   severity="2" header="The underlying bit representations of floating-point values shall not be used" />
    <clone newId="MISRA2008-4_5_1"    id="MISRA2004-12_6_b"  severity="2" header="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" />
    <clone newId="MISRA2008-4_5_2"    id="CODSTA-70"         severity="2" header="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator" />
    <clone newId="MISRA2008-4_5_3"    id="CODSTA-69"         severity="2" header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" />
    <clone newId="MISRA2008-4_10_1"   id="CODSTA-CPP-62"     severity="2" header="NULL shall not be used as an integer value" />
    <clone newId="MISRA2008-4_10_2"   id="CODSTA-CPP-63"     severity="2" header="Literal zero (0) shall not be used as the null-pointer-constant" />
    <clone newId="MISRA2008-5_0_1_a"  id="MISRA2004-12_2_a"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_b"  id="MISRA2004-12_2_b"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_c"  id="MISRA2004-12_2_c"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_d"  id="MISRA2004-12_2_d"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_e"  id="MISRA2004-12_2_e"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_f"  id="MISRA2004-12_2_f"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_1_g"  id="MISRA2004-12_2_g"  severity="2" header="The value of an expression shall be the same under any order of evaluation that the standard permits" />
    <clone newId="MISRA2008-5_0_2_a"  id="MISRA2004-12_1_a"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_2_b"  id="MISRA2004-12_1_b"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_2_c"  id="MISRA2004-12_1_c"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_2_d"  id="MISRA2004-12_1_d"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_2_e"  id="MISRA2004-12_1_e"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_2_f"  id="MISRA2004-12_1_f"  severity="4" header="Limited dependence should be placed on C++ operator precedence rules in expressions" />
    <clone newId="MISRA2008-5_0_3_a"  id="MISRA2004-10_1_c"  severity="2" header="A cvalue expression shall not be implicitly converted to a different underlying type" />
    <clone newId="MISRA2008-5_0_3_b"  id="MISRA2004-10_1_f"  severity="2" header="A cvalue expression shall not be implicitly converted to a different underlying type" />
    <clone newId="MISRA2008-5_0_3_c"  id="MISRA2004-10_1_i"  severity="2" header="A cvalue expression shall not be implicitly converted to a different underlying type" />
    <clone newId="MISRA2008-5_0_4_a"  id="MISRA2004-10_1_a"  severity="2" header="An implicit integral conversion shall not change the signedness of the underlying type" />
    <clone newId="MISRA2008-5_0_5_a"  id="MISRA2004-10_2_a"  severity="2" header="There shall be no implicit floating-integral conversions" />
    <clone newId="MISRA2008-5_0_5_b"  id="MISRA2004-10_1_b"  severity="2" header="There shall be no implicit floating-integral conversions" />
    <clone newId="MISRA2008-5_0_6_a"  id="CODSTA-222"        severity="2" header="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" />
    <clone newId="MISRA2008-5_0_6_b"  id="MISRA2004-10_2_b"  severity="2" header="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" />
    <clone newId="MISRA2008-5_0_6_c"  id="MISRA2004-10_2_d"  severity="2" header="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" />    
    <clone newId="MISRA2008-5_0_7_a"  id="MISRA2004-10_3"    severity="2" header="There shall be no explicit floating-integral conversions of a cvalue expression" />
    <clone newId="MISRA2008-5_0_7_b"  id="CODSTA-198_b"      severity="2" header="There shall be no explicit floating-integral conversions of a cvalue expression" />
    <clone newId="MISRA2008-5_0_8"    id="MISRA2004-10_3"    severity="2" header="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" />
    <clone newId="MISRA2008-5_0_8_b"  id="CODSTA-198"        severity="2" header="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" />
    <clone newId="MISRA2008-5_0_9"    id="MISRA2004-10_3"    severity="2" header="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" />
    <clone newId="MISRA2008-5_0_10"   id="MISRA2004-10_5"    severity="2" header="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" />
    <clone newId="MISRA2008-5_0_11"   id="MISRA2004-6_1"     severity="2" header="The plain char type shall only be used for the storage and use of character values" />
    <clone newId="MISRA2008-5_0_12"   id="MISRA2004-6_2"     severity="2" header="signed char and unsigned char type shall only be used for the storage and use of numeric values" />
    <clone newId="MISRA2008-5_0_13"   id="CODSTA-CPP-64"     severity="2" header="The condition of an if-statement and the condition of an iteration-statement shall have type bool" />
    <clone newId="MISRA2008-5_0_14"   id="CODSTA-CPP-65"     severity="2" header="The first operand of a conditional-operator shall have type bool" />
    <clone newId="MISRA2008-5_0_15"   id="MISRA2004-17_4"    severity="2" header="Array indexing shall be the only form of pointer arithmetic" />
    <clone newId="MISRA2008-5_0_16_a" id="BD-PB-ARRAY"       severity="2" header="Avoid accessing arrays out of bounds"  />
    <clone newId="MISRA2008-5_0_16_b" id="BD-PB-PTRARR"      severity="2" header="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" />
    <clone newId="MISRA2008-5_0_17"   id="BD-PB-PTRSUB"       severity="2" header="Subtraction between pointers shall only be applied to pointers that address elements of the same array">
      <defParameters>
        <![CDATA[
        MISRA2008-5_0_17-aggressiveMode=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-5_0_18"   id="BD-PB-PTRCMP"      severity="2" header="&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array">
      <defParameters>
        <![CDATA[
        MISRA2008-5_0_18-aggressiveMode=true
        MISRA2008-5_0_18-reportOnComparisonFunctions=false
        MISRA2008-5_0_18-reportOnRelationalOperators=true
        MISRA2008-5_0_18-treatPointersToFieldsOfTheSameStructRelated=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-5_0_19"   id="MISRA2004-17_5"    severity="2" header="The declaration of objects shall contain no more than two levels of pointer indirection" />
    <clone newId="MISRA2008-5_0_20"   id="CODSTA-66"         severity="2" header="Non-constant operands to a binary bitwise operator shall have the same underlying type" />
    <clone newId="MISRA2008-5_0_21"   id="CODSTA-63"         severity="2" header="Bitwise operators shall only be applied to operands of unsigned underlying type" />
    <clone newId="MISRA2008-5_0_21_b" id="CODSTA-63_a"       />
    <clone newId="MISRA2008-5_2_1"    id="CODSTA-90"         severity="2" header="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" />
    <clone newId="MISRA2008-5_2_2"    id="OOP-50"            severity="2" header="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" />
    <clone newId="MISRA2008-5_2_3"    id="OOP-49"            severity="4" header="Casts from a base class to a derived class should not be performed on polymorphic types" />
    <clone newId="MISRA2008-5_2_4"    id="CODSTA-CPP-66"     severity="2" header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" />
    <clone newId="MISRA2008-5_2_5"    id="MISRA2004-11_5"    severity="2" header="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" />
    <clone newId="MISRA2008-5_2_6"    id="CODSTA-62"         severity="2" header="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" />
    <clone newId="MISRA2008-5_2_7"    id="MISRA2004-11_4"    severity="2" header="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" />
    <clone newId="MISRA2008-5_2_8"    id="CODSTA-65"         severity="2" header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" />
    <clone newId="MISRA2008-5_2_9"    id="MISRA2004-11_3_a"  severity="4" header="A cast should not convert a pointer type to an integral type" />
    <clone newId="MISRA2008-5_2_10"   id="CODSTA-232"        severity="4" />
    <clone newId="MISRA2008-5_2_11"   id="CODSTA-CPP-08"     severity="2" header="The &amp;&amp; operator and the || operator shall not be overloaded" />
    <clone newId="MISRA2008-5_2_11_b" id="CODSTA-CPP-80"     severity="2" header="The comma &quot;,&quot; operator shall not be overloaded" />
    <clone newId="MISRA2008-5_2_12"   id="PB-41"             severity="2" header="An identifier with array type passed as a function argument shall not decay to a pointer" />
    <clone newId="MISRA2008-5_3_1"    id="CODSTA-CPP-67"     severity="2" header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" />
    <clone newId="MISRA2008-5_3_2"    id="MISRA2004-12_9"    severity="2" header="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" />
    <clone newId="MISRA2008-5_3_3"    id="CODSTA-CPP-68"     severity="2" header="The unary &amp; operator shall not be overloaded" />
    <clone newId="MISRA2008-5_3_4"    id="MISRA2004-12_3"    severity="2" header="Evaluation of the operand to the sizeof operator shall not contain side effects" />
    <clone newId="MISRA2008-5_3_4_b"  id="MISRA2004-12_3_b"  severity="2" header="Evaluation of the operand to the sizeof operator shall not contain side effects" />
    <clone newId="MISRA2008-5_3_4_c"  id="MISRA2004-12_3_c"  severity="2" header="Evaluation of the operand to the sizeof operator shall not contain side effects" />
    <clone newId="MISRA2008-5_8_1"    id="BD-PB-BADSHIFT"    severity="2" header="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand">
      <defParameters>
        <![CDATA[
          MISRA2008-5_8_1-violateOnNegativeShifted=false
          MISRA2008-5_8_1-violateOnNegativeShift=true
          MISRA2008-5_8_1-violateOnTooBigShift=true
          MISRA2008-5_8_1-lhsBitSizeStrategy=MCPP
          MISRA2008-5_8_1-violateOnOverflow=false
          MISRA2008-5_8_1-violateOnUnsignedOverflow=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2008-5_8_1_b"  id="CODSTA-302"        severity="2" header="The right-hand operand of a constant expression shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" />
    <clone newId="MISRA2008-5_14_1"   id="MISRA2004-12_4_a"  severity="2" header="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" />
    <clone newId="MISRA2008-5_17_1"   id="CODSTA-CPP-91"     severity="2" header="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" />
    <clone newId="MISRA2008-5_18_1"   id="MISRA2004-12_10"   severity="2" header="The comma operator shall not be used" />
    <clone newId="MISRA2008-5_19_1_a" id="PB-66_a"           severity="4" header="Integer overflow or underflow in constant expression in '+', '-', '*' operator" />
    <clone newId="MISRA2008-5_19_1_b" id="PB-66_b"           severity="4" header="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" />
    <clone newId="MISRA2008-6_2_1"    id="MISRA2004-13_1"    severity="2" header="Assignment operators shall not be used in sub-expressions" />
    <clone newId="MISRA2008-6_2_2"    id="MISRA2004-13_3"    severity="2" header="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" />
    <clone newId="MISRA2008-6_2_3"    id="MISRA2004-14_3"    severity="2" header="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" />
    <clone newId="MISRA2008-6_3_1"    id="MISRA2004-14_8"    severity="2" header="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" />
    <clone newId="MISRA2008-6_4_1"    id="MISRA2004-14_9"    severity="2" header="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" />
    <clone newId="MISRA2008-6_4_2"    id="MISRA2004-14_10"   severity="2" header="All if ... else if constructs shall be terminated with an else clause" />
    <clone newId="MISRA2008-6_4_3_a"  id="MISRA2004-15_1"    severity="2" header="A switch statement shall be a well-formed switch statement" />
    <clone newId="MISRA2008-6_4_3_b"  id="CODSTA-64"         severity="2" header="A switch statement shall be a well-formed switch statement" />
    <clone newId="MISRA2008-6_4_3_c"  id="CODSTA-61"         severity="2" header="A switch statement shall be a well-formed switch statement" />
    <clone newId="MISRA2008-6_4_3_d"  id="MISRA2004-15_4"    severity="2" header="A switch statement shall be a well-formed switch statement" />
    <clone newId="MISRA2008-6_4_3_e"  id="MISRA2004-15_5"    severity="2" header="A switch statement shall be a well-formed switch statement" />
    <clone newId="MISRA2008-6_4_4"    id="MISRA2004-15_1"    severity="2" header="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" />
    <clone newId="MISRA2008-6_4_5"    id="CODSTA-64"         severity="2" header="An unconditional throw or break statement shall terminate every non-empty switch-clause" />
    <clone newId="MISRA2008-6_4_6"    id="CODSTA-61"         severity="2" header="The final clause of a switch statement shall be the default-clause" />
    <clone newId="MISRA2008-6_4_7"    id="MISRA2004-15_4"    severity="2" header="The condition of a switch statement shall not have bool type" />
    <clone newId="MISRA2008-6_4_8"    id="MISRA2004-15_5"    severity="2" header="Every switch statement shall have at least one case-clause" />
    <clone newId="MISRA2008-6_5_1"    id="CODSTA-CPP-69"     severity="2" header="A for loop shall contain a single loop-counter which shall not have floating type" />
    <clone newId="MISRA2008-6_5_2"    id="CODSTA-CPP-70"     severity="2" header="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=" />
    <clone newId="MISRA2008-6_5_3"    id="MISRA2004-13_6"    severity="2" header="The loop-counter shall not be modified within condition or statement" />
    <clone newId="MISRA2008-6_5_4"    id="CODSTA-CPP-71"     severity="2" header="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" />
    <clone newId="MISRA2008-6_5_5"    id="CODSTA-CPP-72"     severity="2" header="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" />
    <clone newId="MISRA2008-6_5_6"    id="CODSTA-CPP-73"     severity="2" header="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" />
    <clone newId="MISRA2008-6_6_1"    id="CODSTA-78"         severity="2" header="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" />
    <clone newId="MISRA2008-6_6_2"    id="CODSTA-77"         severity="2" header="The goto statement shall jump to a label declared later in the same function body" />
    <clone newId="MISRA2008-6_6_3"    id="CODSTA-80"         severity="2" header="The continue statement shall only be used within a well-formed for loop" />
    <clone newId="MISRA2008-6_6_4"    id="CODSTA-79"         severity="2" header="For any iteration statement there shall be no more than one break or goto statement used for loop termination" />
    <clone newId="MISRA2008-6_6_5"    id="MISRA2004-14_7"    severity="2" header="A function shall have a single point of exit at the end of the function" />
    <clone newId="MISRA2008-7_1_1"    id="CODSTA-CPP-53"     severity="2" />
    <clone newId="MISRA2008-7_1_1_b"  id="CODSTA-CPP-53_b"   severity="2" />
    <clone newId="MISRA2008-7_1_2_a"  id="MISRA2004-16_7"    severity="2" header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" />
    <clone newId="MISRA2008-7_1_2_b"  id="CODSTA-CPP-43"     severity="2" header="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" />
    <clone newId="MISRA2008-7_1_2_c"  id="MISRA2004-16_7_b"  severity="2" header="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" />
    <clone newId="MISRA2008-7_2_1"    id="PB-70"             severity="2" header="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" />
    <clone newId="MISRA2008-7_3_1"    id="CODSTA-CPP-36"     severity="2" header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" />
    <clone newId="MISRA2008-7_3_2"    id="CODSTA-76"         severity="2" header="The identifier main shall not be used for a function other than the global function main" />
    <clone newId="MISRA2008-7_3_3"    id="CODSTA-CPP-74"     severity="2" header="There shall be no unnamed namespaces in header files" />
    <clone newId="MISRA2008-7_3_4"    id="CODSTA-CPP-75"     severity="2" header="using-directives shall not be used" />
    <clone newId="MISRA2008-7_3_5"    id="CODSTA-CPP-76"     severity="2" header="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" />
    <clone newId="MISRA2008-7_3_6"    id="CODSTA-CPP-90"     severity="2" header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" />
    <clone newId="MISRA2008-7_4_1"    id="COMMENT-09"        severity="5" header="All usage of assembler shall be documented" />
    <clone newId="MISRA2008-7_4_2"    id="CODSTA-73"         severity="2" header="Assembler instructions shall only be introduced using the asm declaration" />
    <clone newId="MISRA2008-7_4_3"    id="CODSTA-114"        severity="2" header="Assembly language shall be encapsulated and isolated" />
    <clone newId="MISRA2008-7_5_1"    id="MISRA2004-17_6_a"  severity="2" header="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" />
    <clone newId="MISRA2008-7_5_2_a"  id="MISRA2004-17_6_a"  severity="2" header="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" />
    <clone newId="MISRA2008-7_5_2_b"  id="MISRA2004-17_6_b"  severity="2" header="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" />
    <clone newId="MISRA2008-7_5_3"    id="PB-39"             severity="2" header="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" />
    <clone newId="MISRA2008-7_5_4"    id="BD-PB-RECFUN"      severity="4" header="Functions should not call themselves, either directly or indirectly" />
    <clone newId="MISRA2008-8_0_1"    id="FORMAT-33"         severity="2" header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" />
    <clone newId="MISRA2008-8_3_1"    id="OOP-13"            severity="2" header="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" />
    <clone newId="MISRA2008-8_4_1"    id="MISRA-069"         severity="2" header="Functions shall not be defined using the ellipsis notation" />
    <clone newId="MISRA2008-8_4_2"    id="MISRA2004-16_4"    severity="2" header="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" />
    <clone newId="MISRA2008-8_4_3"    id="MISRA2004-16_8"    severity="2" header="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" />
    <clone newId="MISRA2008-8_4_4"    id="MISRA2004-16_9"    severity="2" header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" />
    <clone newId="MISRA2008-8_5_1"    id="MISRA-030"         severity="2" header="All variables shall have a defined value before they are used" />
    <clone newId="MISRA2008-8_5_2"    id="INIT-16"           severity="2" header="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" />
    <clone newId="MISRA2008-8_5_2_b"  id="MISRA2004-9_2_b"   severity="2" header="Arrays shall not be partially initialized" />
    <clone newId="MISRA2008-8_5_2_c"  id="MISRA2004-9_2_c"   severity="2" header="Structures shall not be partially initialized" />
    <clone newId="MISRA2008-8_5_3"    id="MISRA2004-9_3"     severity="2" header="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" />
    <clone newId="MISRA2008-9_3_1"    id="CODSTA-CPP-77"     severity="2" header="const member functions shall not return non-const pointers or references to class-data" />
    <clone newId="MISRA2008-9_3_2_a"  id="OOP-12"            severity="2" header="Protected member functions shall not return non-const handles to class-data" />
    <clone newId="MISRA2008-9_3_2_b"  id="OOP-36"            severity="2" header="Public member functions shall not return non-const handles to class-data" />
    <clone newId="MISRA2008-9_3_3"    id="CODSTA-CPP-78"     severity="2" header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" />
    <clone newId="MISRA2008-9_5_1"    id="MISRA2004-18_4"    severity="2" header="Unions shall not be used" />
    <clone newId="MISRA2008-9_6_2"    id="CODSTA-75"         severity="2" header="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" />
    <clone newId="MISRA2008-9_6_3"    id="CODSTA-74"         severity="2" header="Bit-fields shall not have enum type" />
    <clone newId="MISRA2008-9_6_4"    id="CODSTA-71"         severity="2" header="Named bit-fields with signed integer type shall have a length of more than one bit" />
    <clone newId="MISRA2008-10_1_1"   id="OOP-47"            severity="4" header="Classes should not be derived from virtual bases" />
    <clone newId="MISRA2008-10_1_2"   id="GLOBAL-VIRTBASECLASS" severity="2" header="A base class shall only be declared virtual if it is used in a diamond hierarchy" />
    <clone newId="MISRA2008-10_1_3"   id="OOP-41"            severity="2" header="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" />
    <clone newId="MISRA2008-10_2_1"   id="CODSTA-CPP-92"     severity="4" header="All accessible entity names within a multiple inheritance hierarchy should be unique" />
    <clone newId="MISRA2008-10_3_1"   id="OOP-44"            severity="2" header="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" />
    <clone newId="MISRA2008-10_3_2"   id="OOP-21"            severity="2" header="Each overriding virtual function shall be declared with the virtual keyword" />
    <clone newId="MISRA2008-10_3_3"   id="OOP-43"            severity="2" header="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" />
    <clone newId="MISRA2008-11_0_1"   id="OOP-48"            severity="2" header="Member data in non-POD class types shall be private" />
    <clone newId="MISRA2008-12_1_1"   id="BD-PB-VCTOR"       severity="2" header="Do not use dynamic type of an object under construction" />
    <clone newId="MISRA2008-12_1_1_b" id="BD-PB-VDTOR"       severity="2" header="Do not use dynamic type of an object under destruction" />
    <clone newId="MISRA2008-12_1_2"   id="PB-43"             severity="4" header="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" />
    <clone newId="MISRA2008-12_1_3"   id="OOP-45"            severity="2" header="All constructors that are callable with a single argument of fundamental type shall be declared explicit" />
    <clone newId="MISRA2008-12_8_1"   id="OOP-46"            severity="2" header="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" />
    <clone newId="MISRA2008-12_8_2"   id="OOP-42"            severity="2" header="The copy assignment operator shall be declared protected or private in an abstract class" />
    <clone newId="MISRA2008-14_5_1"   id="TEMPL-13"          severity="2" header="Do not declare non-member generic functions in associated namespaces" />
    <clone newId="MISRA2008-14_5_2"   id="TEMPL-07"          severity="2" header="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" />
    <clone newId="MISRA2008-14_5_3"   id="TEMPL-11"          severity="2" header="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" />
    <clone newId="MISRA2008-14_6_1"   id="TEMPL-12"          severity="2" header="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" />
    <clone newId="MISRA2008-14_6_2"   id="TEMPL-14"          severity="2" header="The function shall resolve to a function declared previously in the translation unit" />
    <clone newId="MISRA2008-14_7_1"   id="GLOBAL-TEMPLNOINST" severity="2" header="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." />
    <clone newId="MISRA2008-14_7_3"   id="TEMPL-10"          severity="2" header="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" />
    <clone newId="MISRA2008-14_8_1"   id="TEMPL-09"          severity="2" header="Overloaded function templates shall not be explicitly specialized" />
    <clone newId="MISRA2008-14_8_2"   id="TEMPL-08"          severity="4" header="The viable function set for a function call should either contain no function specializations, or only contain function specializations" />
    <clone newId="MISRA2008-15_0_2"   id="EXCEPT-09"         severity="4" header="An exception object should not have pointer type" />
    <clone newId="MISRA2008-15_0_3"   id="EXCEPT-10"         severity="2" header="Control shall not be transferred into a try or catch block using a goto or a switch statement" />
    <clone newId="MISRA2008-15_1_1"   id="EXCEPT-11"         severity="2" header="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" />
    <clone newId="MISRA2008-15_1_2"   id="EXCEPT-12"         severity="2" header="NULL shall not be thrown explicitly" />
    <clone newId="MISRA2008-15_1_3"   id="EXCEPT-07"         severity="2" header="An empty throw (throw;) shall only be used in the compound statement of a catch handler" />
    <clone newId="MISRA2008-15_3_1"   id="EXCEPT-08"         severity="2" header="Exceptions shall be raised only after start-up and before termination of the program" />
    <clone newId="MISRA2008-15_3_2"   id="EXCEPT-06"         severity="4" header="There should be at least one exception handler to catch all otherwise unhandled exceptions" />
    <clone newId="MISRA2008-15_3_3"   id="EXCEPT-16"         severity="2" header="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" />
    <clone newId="MISRA2008-15_3_4_a" id="EXCEPT-13"         severity="2" header="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" />
    <clone newId="MISRA2008-15_3_4_b" id="EXCEPT-18"         severity="2" header="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" />
    <clone newId="MISRA2008-15_3_5"   id="EXCEPT-15"         severity="2" header="A class type exception shall always be caught by reference" />
    <clone newId="MISRA2008-15_3_6"   id="EXCEPT-17"         severity="2" header="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" />
    <clone newId="MISRA2008-15_3_7"   id="EXCEPT-24"         severity="2" header="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" />
    <clone newId="MISRA2008-15_4_1"   id="GLOBAL-EXCSPECDECL" severity="2" header="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids"  />
    <clone newId="MISRA2008-15_5_1"   id="EXCEPT-03"         severity="2" header="A class destructor shall not exit with an exception" />
    <clone newId="MISRA2008-15_5_2"   id="EXCEPT-14"         severity="2" header="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" />
    <clone newId="MISRA2008-15_5_2_b" id="BD-PB-NOEXCEPT"    severity="2" header="Avoid throwing exceptions from functions that are declared not to throw" />
    <clone newId="MISRA2008-15_5_3"   id="PB-44"             severity="2" header="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" />
    <clone newId="MISRA2008-15_5_3_b" id="EXCEPT-01"         severity="2" header="Never allow an exception to be thrown from a destructor, deallocation, and swap" />
    <clone newId="MISRA2008-15_5_3_c" id="EXCEPT-03"         severity="2" header="Do not throw from within destructor" />
    <clone newId="MISRA2008-15_5_3_d" id="EXCEPT-06"         severity="2" header="There should be at least one exception handler to catch all otherwise unhandled exceptions" />
    <clone newId="MISRA2008-15_5_3_e" id="EXCEPT-07"         severity="2" header="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" />
    <clone newId="MISRA2008-15_5_3_f" id="EXCEPT-08"         severity="2" header="Exceptions shall be raised only after start-up and before termination of the program" />
    <clone newId="MISRA2008-15_5_3_g" id="EXCEPT-13"         severity="2" header="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" />
    <clone newId="MISRA2008-15_5_3_h" id="EXCEPT-14"         severity="2" header="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" />
    <clone newId="MISRA2008-15_5_3_i" id="EXCEPT-18"         severity="2" header="Function called in global or namespace scope shall not throw unhandled exceptions" />
    <clone newId="MISRA2008-15_5_3_j" id="BD-PB-EXCEPT"      severity="2" header="Always catch exceptions" />
    <clone newId="MISRA2008-15_5_3_k" id="BD-PB-EXITHAN"     severity="2" header="Properly define exit handlers" />
    <clone newId="MISRA2008-15_5_3_l" id="BD-PB-NOEXCEPT"    severity="2" header="Avoid throwing exceptions from functions that are declared not to throw" />
    <clone newId="MISRA2008-16_0_1"   id="MISRA2004-19_1"    severity="2" header="#include directives in a file shall only be preceded by other preprocessor directives or comments" />
    <clone newId="MISRA2008-16_0_2"   id="MISRA2004-19_5"    severity="2" header="Macros shall only be #define'd or #undef'd in the global namespace" />
    <clone newId="MISRA2008-16_0_3"   id="PREPROC-25"    severity="2" header="#undef shall not be used" />
    <clone newId="MISRA2008-16_0_4"   id="MISRA2004-19_7"    severity="2" header="Function-like macros shall not be defined" />
    <clone newId="MISRA2008-16_0_5"   id="MISRA2004-19_9"    severity="2" header="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" />
    <clone newId="MISRA2008-16_0_6"   id="MISRA2004-19_10"   severity="2" header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" />
    <clone newId="MISRA2008-16_0_7_b" id="MISRA2004-19_11_b" severity="2" header="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" />
    <clone newId="MISRA2008-16_0_8"   id="MISRA2004-19_16"   severity="2" header="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" />
    <clone newId="MISRA2008-16_1_1"   id="MISRA2004-19_14"   severity="2" header="The defined preprocessor operator shall only be used in one of the two standard forms" />
    <clone newId="MISRA2008-16_1_2"   id="MISRA2004-19_17"   severity="2" header="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" />
    <clone newId="MISRA2008-16_2_1_a" id="PREPROC-01"        severity="2" />
    <clone newId="MISRA2008-16_2_1_b" id="PREPROC-10"        severity="2" />
    <clone newId="MISRA2008-16_2_1_c" id="PREPROC-11"        severity="2" />
    <clone newId="MISRA2008-16_2_1_d" id="PREPROC-10_b"      severity="2" />
    <clone newId="MISRA2008-16_2_1_e" id="PREPROC-10_c"      severity="2" />
    <clone newId="MISRA2008-16_2_1_f" id="PREPROC-22"        severity="2" />
    <clone newId="MISRA2008-16_2_1_g" id="PREPROC-23"        severity="2" />
    <clone newId="MISRA2008-16_2_1_h" id="PREPROC-25"        severity="2" />
    <clone newId="MISRA2008-16_2_2"   id="PREPROC-12"        severity="2" header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" />
    <clone newId="MISRA2008-16_2_3"   id="PFO-02"            severity="2" header="Include guards shall be provided" />
    <clone newId="MISRA2008-16_2_4"   id="NAMING-46"         severity="2" header="The ', &quot;, /* or // characters shall not occur in a header file name" />
    <clone newId="MISRA2008-16_2_5"   id="NAMING-48"         severity="4" header="The \ character should not occur in a header file name" />
    <clone newId="MISRA2008-16_2_6"   id="MISRA-089"         severity="2" header="The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" />
    <clone newId="MISRA2008-16_3_1"   id="MISRA2004-19_12"   severity="2" header="There shall be at most one occurrence of the # or ## operators in a single macro definition" />
    <clone newId="MISRA2008-16_3_2"   id="MISRA2004-19_13"   severity="4" header="The # and ## operators should not be used" />
    <clone newId="MISRA2008-16_6_1"   id="MISRA2004-3_4"     severity="5" header="All uses of the #pragma directive shall be documented" />
    <clone newId="MISRA2008-17_0_1_a" id="MISRA2004-20_1_a"  severity="2" header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" />
    <clone newId="MISRA2008-17_0_1_b" id="MISRA2004-20_1_b"  severity="2" header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" />
    <clone newId="MISRA2008-17_0_1_c" id="CODSTA-92_a"       severity="2" header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" />
    <clone newId="MISRA2008-17_0_1_d" id="CODSTA-92_b"       severity="2" header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" />
    <clone newId="MISRA2008-17_0_1_e" id="MISRA2004-20_1_e"  severity="2" header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" />
    <clone newId="MISRA2008-17_0_2"   id="CODSTA-92"         severity="2" header="The names of standard library macros and objects shall not be reused" />
    <clone newId="MISRA2008-17_0_3"   id="CODSTA-93"         severity="2" header="The names of standard library functions shall not be overridden" />
    <clone newId="MISRA2008-17_0_5"   id="MISRA2004-20_7"    severity="2" header="The setjmp macro and the longjmp function shall not be used" />
    <clone newId="MISRA2008-17_0_5_b" id="MISRA2004-20_7_b"  severity="2" header="The standard header file &lt;setjmp.h&gt; shall not be used" />    
    <clone newId="MISRA2008-18_0_1"   id="CODSTA-CPP-59"     severity="2" header="The C library shall not be used" />
    <clone newId="MISRA2008-18_0_2"   id="MISRA2004-20_10"   severity="2" header="The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used" />
    <clone newId="MISRA2008-18_0_3"   id="PB-75"             severity="2" header="The library function 'abort' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2008-18_0_3_b" id="PB-75_b"           severity="2" header="The library function 'exit' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2008-18_0_3_c" id="SECURITY-52"       severity="2" header="The library function 'getenv' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2008-18_0_3_d" id="SECURITY-48_b"     severity="2" header="The library function 'system' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2008-18_0_4"   id="MISRA2004-20_12"   severity="2" header="The standard header file &lt;ctime&gt; shall not be used" />
    <clone newId="MISRA2008-18_0_4_b" id="MISRA2004-20_12_b" severity="2" header="The time handling functions and macros of library &lt;ctime&gt; shall not be used" />
    <clone newId="MISRA2008-18_0_4_c" id="MISRA2004-20_12_c" severity="2" header="The types defined in the library &lt;ctime&gt; shall not be used" />
    <clone newId="MISRA2008-18_0_5"   id="PB-37"             severity="2" header="The unbounded functions of library &lt;cstring&gt; shall not be used" />
    <clone newId="MISRA2008-18_2_1"   id="MISRA2004-20_6"    severity="2" header="The macro offsetof shall not be used" />
    <clone newId="MISRA2008-18_4_1"   id="MISRA2004-20_4"    severity="2" header="Dynamic heap memory allocation shall not be used" />
    <clone newId="MISRA2008-18_7_1"   id="MISRA2004-20_8"    severity="2" header="The standard header file &lt;csignal&gt; shall not be used" />
    <clone newId="MISRA2008-18_7_1_b" id="MISRA2004-20_8_b"  severity="2" header="The signal handling facilities of &lt;csignal&gt; shall not be used" />
    <clone newId="MISRA2008-19_3_1"   id="MISRA2004-20_5"    severity="2" header="The error indicator errno shall not be used" />
    <clone newId="MISRA2008-27_0_1"   id="MISRA2004-20_9"    severity="2" header="The stream input/output library &lt;cstdio&gt; shall not be used" />

    <!-- MISRA C 1998 -->
    <clone id="MISRA2004-12_8" newId="MISRA-038" severity="3"/>
    <clone id="OPT-29" newId="MISRA-044" severity="3"/>
    <clone id="PB-65" newId="MISRA-048_c" severity="3"/>
    <clone id="PB-15_b" newId="MISRA-048_d" severity="3"/>
    <clone id="PB-73" newId="MISRA-051" />
    <clone id="PB-73_b" newId="MISRA-051_b" />

    <!-- MISRA C 2004 -->
    <clone id="PORT-35_a" newId="MISRA2004-5_1_a"/>
    <clone id="PORT-35_b" newId="MISRA2004-5_1_b"/>
    <clone id="PORT-35_c" newId="MISRA2004-5_1_c"/>
    <clone id="CODSTA-71" newId="MISRA2004-6_5"/>
    <clone id="MISRA-071_a" newId="MISRA2004-8_1_a"/>
    <clone id="MISRA-071_b" newId="MISRA2004-8_1_b"/>
    <clone id="MISRA-023" newId="MISRA2004-8_10"/>
    <clone id="MISRA-030" newId="MISRA2004-9_1"/>
    <clone id="INIT-16" newId="MISRA2004-9_2" />
    <clone id="CODSTA-198" newId="MISRA2004-10_4" />
    <clone id="CODSTA-198_b" newId="MISRA2004-10_4_b" />
    <clone id="CODSTA-13_b" newId="MISRA2004-17_2" />
    <clone id="CODSTA-13" newId="MISRA2004-17_3" />
    <clone id="MISRA-089" newId="MISRA2004-19_3"/>
    <clone id="PREPROC-25" newId="MISRA2004-19_6"/>
    <clone id="CODSTA-92_a" newId="MISRA2004-20_1_c"/>
    <clone id="PB-75" newId="MISRA2004-20_11" />
    <clone id="PB-75_b" newId="MISRA2004-20_11_b" />
    <clone id="SECURITY-52" newId="MISRA2004-20_11_c" />
    <clone id="SECURITY-48_b" newId="MISRA2004-20_11_d" />

    <!-- MISRA C 2012 (Legacy) begin -->
    <category description="MISRA C 2012 (Legacy)"    id="MISRA2012"/>
    <category description="MISRA C 2012 Directives"  id="MISRA2012-DIR"/>
    <category description="MISRA C 2012 Rules"       id="MISRA2012-RULE"/>

    <clone newId="MISRA2012-DIR-4_1_a"    id="BD-PB-ARRAY"          severity="2"  header="Avoid accessing arrays out of bounds"  />
    <clone newId="MISRA2012-DIR-4_1_b"    id="BD-PB-NP"             severity="2"  header="Avoid null pointer dereferencing"  />
    <clone newId="MISRA2012-DIR-4_1_c"    id="BD-PB-ZERO"           severity="2"  header="Avoid division by zero"  />
    <clone newId="MISRA2012-DIR-4_1_d"    id="BD-PB-OVERFFMT"       severity="2"  header="Avoid buffer overflow due to defining incorrect format limits"  />
    <clone newId="MISRA2012-DIR-4_1_e"    id="BD-PB-OVERFNZT"       severity="2"  header="Avoid overflow due to reading a not zero terminated string"  />
    <clone newId="MISRA2012-DIR-4_1_g"    id="BD-PB-OVERFRD"        severity="2"  header="Avoid overflow when reading from a buffer"  />
    <clone newId="MISRA2012-DIR-4_1_h"    id="BD-PB-OVERFWR"        severity="2"  header="Avoid overflow when writing to a buffer"  />
    <clone newId="MISRA2012-DIR-4_1_i"    id="BD-PB-PTRSUB"         severity="2">
      <defParameters>
        <![CDATA[
          MISRA2012-DIR-4_1_i-aggressiveMode=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-DIR-4_1_j"    id="BD-PB-PTRCMP"         severity="2">
      <defParameters>
        <![CDATA[
          MISRA2012-DIR-4_1_j-aggressiveMode=true
          MISRA2012-DIR-4_1_j-reportOnComparisonFunctions=false
          MISRA2012-DIR-4_1_j-reportOnRelationalOperators=true
          MISRA2012-DIR-4_1_j-treatPointersToFieldsOfTheSameStructRelated=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-DIR-4_1_k"    id="BD-PB-INTWRAP"        severity="2"  />
    <clone newId="MISRA2012-DIR-4_1_l"    id="BD-PB-INTUB"          severity="2"  />
    <clone newId="MISRA2012-DIR-4_1_m"    id="BD-PB-INTDL"          severity="2"  />
    <clone newId="MISRA2012-DIR-4_2"      id="COMMENT-09"           severity="4"  header="All usage of assembly language should be documented"  />
    <clone newId="MISRA2012-DIR-4_3"      id="MISRA2004-2_1"        severity="2"  header="Assembly language shall be encapsulated and isolated"  />
    <clone newId="MISRA2012-DIR-4_4"      id="MISRA2004-2_4"        severity="4"  header="Sections of code should not be &quot;commented out&quot;"  />
    <clone newId="MISRA2012-DIR-4_4_b"    id="MISRA2004-2_4_b"      severity="4"  />
    <clone newId="MISRA2012-DIR-4_5"      id="NAMING-50"            severity="4"  header="Identifiers in the same name space with overlapping visibility should be typographically unambiguous"  />
    <clone newId="MISRA2012-DIR-4_6_a"    id="MISRA2004-6_3"        severity="4"  header="typedefs to basic types should contain some digits in their name"  />
    <clone newId="MISRA2012-DIR-4_6_b"    id="MISRA2004-6_3_b"      severity="4"  header="typedefs should be used in place of the basic types"  />
    <clone newId="MISRA2012-DIR-4_6_c"    id="CODSTA-155"           severity="4"  header="Use typedefs from stdint.h instead of declaring your own in C99 code"  />
    <clone newId="MISRA2012-DIR-4_7_a"    id="BD-PB-CHECKRET"       severity="2"  header="Consistently check the returned value of non-void functions"  />
    <clone newId="MISRA2012-DIR-4_7_b"    id="BD-PB-CHECKRETGEN"    severity="2"  header="Always check the returned value of non-void function"  />
    <clone newId="MISRA2012-DIR-4_8"      id="CODSTA-115"           severity="4"  header="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden"  />
    <clone newId="MISRA2012-DIR-4_9"      id="MISRA2004-19_7"       severity="4"  header="A function should be used in preference to a function-like macro where they are interchangeable"  />
    <clone newId="MISRA2012-DIR-4_10"     id="PFO-02"               severity="2"  header="Precautions shall be taken in order to prevent the contents of a header file being included more than once"  />
    <clone newId="MISRA2012-DIR-4_11"     id="BD-API-VALPARAM"      severity="2"  header="Validate values passed to library functions"  />
    <clone newId="MISRA2012-DIR-4_12"     id="MISRA2004-20_4"       severity="2"  header="Dynamic memory allocation shall not be used"  />
    <clone newId="MISRA2012-DIR-4_13_a"   id="BD-RES-LEAKS"         severity="4"  header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released"  />
    <clone newId="MISRA2012-DIR-4_13_b"   id="BD-RES-FREE"          severity="4"  header="Do not use resources that have been freed"  />
    <clone newId="MISRA2012-DIR-4_13_c"   id="BD-RES-INVFREE"       severity="4"  header="Do not free resources using invalid pointers"  />
    <clone newId="MISRA2012-DIR-4_13_d"   id="BD-TRS-LOCK"          severity="4"  header="Do not abandon unreleased locks"  />
    <clone newId="MISRA2012-DIR-4_13_e"   id="BD-TRS-DLOCK"         severity="4"  header="Avoid double locking"  />
    <clone newId="MISRA2012-DIR-4_13_f"   id="BD-TRS-REVLOCK"       severity="4"  header="Do not release a lock that has not been acquired"  />
    <clone newId="MISRA2012-DIR-4_14_a"   id="BD-SECURITY-ARRAY"    severity="2"  header="Avoid tainted data in array indexes"  />
    <clone newId="MISRA2012-DIR-4_14_b"   id="BD-SECURITY-TDINTOVERF" severity="2"  header="Protect against integer overflow/underflow from tainted data"  />
    <clone newId="MISRA2012-DIR-4_14_c"   id="BD-SECURITY-OVERFRD"  severity="2"  header="Avoid buffer read overflow from tainted data"  />
    <clone newId="MISRA2012-DIR-4_14_d"   id="BD-SECURITY-OVERFWR"  severity="2"  header="Avoid buffer write overflow from tainted data"  />
    <clone newId="MISRA2012-DIR-4_14_e"   id="BD-SECURITY-TDCMD"    severity="2"  header="Protect against command injection"  />
    <clone newId="MISRA2012-DIR-4_14_f"   id="BD-SECURITY-TDFNAMES" severity="2"  header="Protect against file name injection"  />
    <clone newId="MISRA2012-DIR-4_14_g"   id="BD-SECURITY-TDSQL"    severity="2"  header="Protect against SQL injection"  />
    <clone newId="MISRA2012-DIR-4_14_h"   id="BD-SECURITY-BUFWRITE" severity="2"  header="Prevent buffer overflows from tainted data"  />
    <clone newId="MISRA2012-DIR-4_14_i"   id="BD-SECURITY-OVERFFMT" severity="2"  header="Avoid buffer overflow from tainted data due to defining incorrect format limits"  />
    <clone newId="MISRA2012-DIR-4_14_j"   id="BD-SECURITY-TDENV"    severity="2"  header="Protect against environment injection"  />
    <clone newId="MISRA2012-DIR-4_14_k"   id="BD-SECURITY-TDCONSOLE" severity="2"  header="Avoid printing tainted data on the output console"  />
    <clone newId="MISRA2012-DIR-4_14_l"   id="BD-SECURITY-TDINPUT"  severity="2" />
    <clone newId="MISRA2012-DIR-4_15"     id="BD-PB-NANINF"         severity="2"  header="Do not use floating-point expressions which may result in NaN and infinity values"  />
    <clone newId="MISRA2012-DIR-5_1"      id="BD-TRS-MLOCK"         severity="2">
      <defParameters>
        <![CDATA[
          MISRA2012-DIR-5_1-allowedUsagesInCriticalSections=1.0
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-DIR-5_1_b"    id="BD-TRS-DIFCS"         severity="2" />
    <clone newId="MISRA2012-DIR-5_1_c"    id="BD-TRS-THRDR"         severity="2" />
    <clone newId="MISRA2012-DIR-5_2"      id="BD-TRS-ORDER"         severity="2" />
    <clone newId="MISRA2012-DIR-5_3"      id="BD-TRS-THRTHR"        severity="2" />
    <clone newId="MISRA2012-RULE-1_1_a_c90" id="CODSTA-174_a_c90"   severity="2"  header="A program should not exceed the translation limits imposed by The Standard (c90)"  />
    <clone newId="MISRA2012-RULE-1_1_a_c99" id="CODSTA-174_a_c99"   severity="2"  header="A program should not exceed the translation limits imposed by The Standard (c99)"  />
    <clone newId="MISRA2012-RULE-1_1_b_c90" id="CODSTA-174_b_c90"   severity="2"  header="A program should not exceed the translation limits imposed by The Standard (c90)"  />
    <clone newId="MISRA2012-RULE-1_1_b_c99" id="CODSTA-174_b_c99"   severity="2"  header="A program should not exceed the translation limits imposed by The Standard (c99)"  />
    <clone newId="MISRA2012-RULE-1_3_a"   id="BD-PB-ZERO"           severity="2"  header="Avoid division by zero"  />
    <clone newId="MISRA2012-RULE-1_3_b"   id="BD-PB-NOTINIT"        severity="2"  header="Avoid use before initialization"  />
    <clone newId="MISRA2012-RULE-1_3_c"   id="BD-RES-FREE"          severity="2"  header="Do not use resources that have been freed"  />
    <clone newId="MISRA2012-RULE-1_3_d"   id="BD-PB-OVERFRD"        severity="2"  header="Avoid overflow when reading from a buffer"  />
    <clone newId="MISRA2012-RULE-1_3_e"   id="BD-PB-OVERFWR"        severity="2"  header="Avoid overflow when writing to a buffer"  />
    <clone newId="MISRA2012-RULE-1_3_f"   id="MISRA2004-12_2_a"     severity="2"  header="The value of an expression shall be the same under any order of evaluation that the standard permits"  />
    <clone newId="MISRA2012-RULE-1_3_g"   id="MISRA2004-12_2_b"     severity="2"  header="Don't write code that depends on the order of evaluation of function arguments"  />
    <clone newId="MISRA2012-RULE-1_3_h"   id="MISRA2004-12_2_c"     severity="2"  header="Don't write code that depends on the order of evaluation of function designator and function arguments"  />
    <clone newId="MISRA2012-RULE-1_3_i"   id="MISRA2004-12_2_d"     severity="2"  header="Don't write code that depends on the order of evaluation of expression that involves a function call"  />
    <clone newId="MISRA2012-RULE-1_3_j"   id="MISRA2004-12_2_e"     severity="2"  header="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression"  />
    <clone newId="MISRA2012-RULE-1_3_k"   id="MISRA2004-12_2_f"     severity="2"  header="Do not use more than one volatile in one expression"  />
    <clone newId="MISRA2012-RULE-1_3_l"   id="MISRA2004-12_2_g"     severity="2"  header="Don't write code that depends on the order of evaluation of function calls"  />
    <clone newId="MISRA2012-RULE-1_3_m"   id="MISRA2004-17_6_a"     severity="2"  header="A function shall not return a pointer or reference to a non-static local object"/> 
    <clone newId="MISRA2012-RULE-1_3_n"   id="MISRA2004-17_6_b"     severity="2"  header="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist"/>
    <clone newId="MISRA2012-RULE-1_3_o"   id="PB-29"                severity="2"  header="The left-hand operand of a right-shift operator shall not have a negative value"/>
    <clone newId="MISRA2012-RULE-1_4_j"   id="CODSTA-215"           severity="2" />
    <clone newId="MISRA2012-RULE-1_4_k"   id="CODSTA-212"           severity="2" />
    <clone newId="MISRA2012-RULE-1_4_l"   id="CODSTA-217"           severity="2" />
    <clone newId="MISRA2012-RULE-1_4_m"   id="CODSTA-218"           severity="2" />
    <clone newId="MISRA2012-RULE-1_4_n"   id="CODSTA-219"           severity="2" />
    <clone newId="MISRA2012-RULE-1_5"     id="MISRA2004-8_11"       severity="2"  header="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage"  />
    <clone newId="MISRA2012-RULE-1_5_b"   id="CODSTA-10"            severity="2"  header="Storage type modifiers shall be associated with the type, not the variable or the function"  />
    <clone newId="MISRA2012-RULE-1_5_c"   id="CODSTA-159"           severity="2"  header="Function types shall be in prototype form"  />
    <clone newId="MISRA2012-RULE-1_5_d"   id="CODSTA-209_b"         severity="2"  header="Do not use macro ATOMIC_VAR_INIT"  />
    <clone newId="MISRA2012-RULE-1_5_e"   id="PREPROC-27"           severity="2"  header="Do not use 'bool', 'false' or 'true' identifiers in the #undef directive"  />
    <clone newId="MISRA2012-RULE-1_5_f"   id="BD-PB-UNGETC"         severity="2"  header="Do not use the ungetc function on a stream with the file position indicator 0"  />
    <clone newId="MISRA2012-RULE-1_5_g"   id="BD-API-REALLOC"       severity="2"  header="Do not pass 0 value as a size argument to the realloc function"  />
    <clone newId="MISRA2012-RULE-2_1_a"   id="MISRA2004-14_1_a"     severity="2"  header="There shall be no unreachable code in 'else' block"  />
    <clone newId="MISRA2012-RULE-2_1_b"   id="MISRA2004-14_1_b"     severity="2"  header="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements"  />
    <clone newId="MISRA2012-RULE-2_1_c"   id="MISRA2004-14_1_c"     severity="2"  header="There shall be no unreachable code in 'if', 'else', 'while', 'for' block"  />
    <clone newId="MISRA2012-RULE-2_1_d"   id="MISRA2004-14_1_d"     severity="2"  header="There shall be no unreachable code in 'switch' statement"  />
    <clone newId="MISRA2012-RULE-2_1_e"   id="MISRA2004-14_1_e"     severity="2"  header="There shall be no unreachable code in 'for' loop"  />
    <clone newId="MISRA2012-RULE-2_1_f"   id="MISRA2004-14_1_f"     severity="2"  header="There shall be no unreachable code after 'if' or 'switch' statement"  />
    <clone newId="MISRA2012-RULE-2_1_g"   id="MISRA2004-14_1_g"     severity="2"  header="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop"  />
    <clone newId="MISRA2012-RULE-2_1_h"   id="BD-PB-UCMETH"         severity="2"  header="Avoid unreachable methods">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-2_1_h-global=false
          MISRA2012-RULE-2_1_h-ignore_template=false
          MISRA2012-RULE-2_1_h-internal_linkage=true
          MISRA2012-RULE-2_1_h-isTransitive=false
          MISRA2012-RULE-2_1_h-public=false
          MISRA2012-RULE-2_1_h-protected=false
          MISRA2012-RULE-2_1_h-private=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-2_2_a"   id="MISRA2004-14_2"       severity="2"  header="All non-null statements shall either have at least one side-effect however executed or cause control flow to change"  />
    <clone newId="MISRA2012-RULE-2_2_b"   id="BD-PB-VOVR"           severity="2">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-2_2_b-reportOnVariableDeclarations=false
          MISRA2012-RULE-2_2_b-reportOnNullPointer=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-2_3_a"   id="CODSTA-175_a"         severity="4"  header="A function should not contain unused type declarations"  />
    <clone newId="MISRA2012-RULE-2_3_b"   id="CODSTA-175_b"         severity="4"  header="A source file should not contain unused type declarations"  />
    <clone newId="MISRA2012-RULE-2_4_a"   id="CODSTA-176_a"         severity="4"  header="A function should not contain unused local tag declarations"  />
    <clone newId="MISRA2012-RULE-2_4_b"   id="CODSTA-176_b"         severity="4"  header="A source file should not contain unused tag declarations"  />
    <clone newId="MISRA2012-RULE-2_5"     id="CODSTA-177"           severity="4"  header="A source file should not contain unused macro definitions"  />
    <clone newId="MISRA2012-RULE-2_6"     id="OPT-37"               severity="4"  header="A function should not contain unused label declarations"  />
    <clone newId="MISRA2012-RULE-2_7"     id="OPT-38"               severity="4"  header="There should be no unused parameters in functions"  />
    <clone newId="MISRA2012-RULE-2_8_a"   id="GLOBAL-UNUSEDEXTVAR"  severity="4"  />
    <clone newId="MISRA2012-RULE-2_8_b"   id="OPT-43"               severity="4"  />
    <clone newId="MISRA2012-RULE-2_8_c"   id="OPT-02"               severity="4"  />
    <clone newId="MISRA2012-RULE-3_1_a"   id="MISRA2004-2_3"        severity="2"  header="The character sequence /* shall not be used within a C-style comment"  />
    <clone newId="MISRA2012-RULE-3_1_b"   id="COMMENT-11"           severity="2"  header="The character sequence // shall not be used within a C-style comment"  />
    <clone newId="MISRA2012-RULE-3_1_c"   id="COMMENT-12"           severity="2"  header="The character sequence /* shall not be used within a C++-style comment"  />
    <clone newId="MISRA2012-RULE-3_2"     id="COMMENT-13"           severity="2"  header="Line-splicing shall not be used in // comments"  />
    <clone newId="MISRA2012-RULE-4_1"     id="CODSTA-117"           severity="2"  header="Octal and hexadecimal escape sequences shall be terminated"  />
    <clone newId="MISRA2012-RULE-4_2"     id="MISRA2004-4_2"        severity="4"  header="Trigraphs should not be used"  />
    <clone newId="MISRA2012-RULE-5_1"     id="CODSTA-178"           severity="2"  header="External identifiers shall be distinct"  />
    <clone newId="MISRA2012-RULE-5_2_a_c90" id="CODSTA-179_a_c90"   severity="2"  header="Identifiers declared in the file scope and in the same name space shall be distinct (c90)"  />
    <clone newId="MISRA2012-RULE-5_2_a_c99" id="CODSTA-179_a_c99"   severity="2"  header="Identifiers declared in the file scope and in the same name space shall be distinct (c99)"  />
    <clone newId="MISRA2012-RULE-5_2_b_c90" id="CODSTA-179_b_c90"   severity="2"  header="Identifiers declared in the same block scope and name space shall be distinct (c90)"  />
    <clone newId="MISRA2012-RULE-5_2_b_c99" id="CODSTA-179_b_c99"   severity="2"  header="Identifiers declared in the same block scope and name space shall be distinct (c99)"  />
    <clone newId="MISRA2012-RULE-5_3_a"   id="MISRA2004-5_2_a"      severity="2"  header="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope"  />
    <clone newId="MISRA2012-RULE-5_3_b"   id="MISRA2004-5_2_b"      severity="2"  header="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope"  />
    <clone newId="MISRA2012-RULE-5_4_a_c90" id="CODSTA-171_c90"     severity="2"  header="The name of a macro should be distinct from the names of its parameters(c90)"  />
    <clone newId="MISRA2012-RULE-5_4_a_c99" id="CODSTA-171_c99"     severity="2"  header="The name of a macro should be distinct from the names of its parameters(c99)"  />
    <clone newId="MISRA2012-RULE-5_4_b_c90" id="CODSTA-172_c90"     severity="2"  header="The name of a macro should be distinct from the names of other macros that are currently defined(c90)"  />
    <clone newId="MISRA2012-RULE-5_4_b_c99" id="CODSTA-172_c99"     severity="2"  header="The name of a macro should be distinct from the names of other macros that are currently defined(c99)"  />
    <clone newId="MISRA2012-RULE-5_5_c90" id="CODSTA-170_c90"       severity="2"  header="Identifiers shall be distinct from macro names (c90)"  />
    <clone newId="MISRA2012-RULE-5_5_c99" id="CODSTA-170_c99"       severity="2"  header="Identifiers shall be distinct from macro names (c99)"  />
    <clone newId="MISRA2012-RULE-5_6_a"   id="GLOBAL-UNIQUETYPEDEFC" severity="2"  header="A typedef name shall be a unique identifier"  />
    <clone newId="MISRA2012-RULE-5_7_a"   id="GLOBAL-UNIQUETYPEC"   severity="2"  header="A tag name shall be a unique identifier"  />
    <clone newId="MISRA2012-RULE-5_8"     id="GLOBAL-REUSEDEXTVAR"  severity="2"  header="Identifiers that define objects with external linkage shall be unique"  />
    <clone newId="MISRA2012-RULE-5_8_b"   id="GLOBAL-REUSEDEXTFUN"  severity="2"  header="Identifiers that define functions with external linkage shall be unique"  />
    <clone newId="MISRA2012-RULE-5_9_a"   id="GLOBAL-REUSEDSTATVAR" severity="4"  header="Identifiers that define objects with internal linkage should be unique"  />
    <clone newId="MISRA2012-RULE-5_9_b"   id="GLOBAL-REUSEDSTATFUN" severity="4"  header="Identifiers that define functions with internal linkage should be unique"  />
    <clone newId="MISRA2012-RULE-6_1"     id="MISRA2004-6_4"        severity="2"  header="Bit-fields shall only be declared with an appropriate type"  />
    <clone newId="MISRA2012-RULE-6_2"     id="CODSTA-71"            severity="2"  header="Single-bit named bit fields shall not be of a signed type"  />
    <clone newId="MISRA2012-RULE-6_3"     id="CODSTA-02_b"          severity="2"  header="A bit field shall not be declared as a member of a union"  />
    <clone newId="MISRA2012-RULE-7_1"     id="MISRA2004-7_1_a"      severity="2"  header="Octal constants shall not be used"  />
    <clone newId="MISRA2012-RULE-7_2"     id="MISRA2004-10_6"       severity="2"  header="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type"  />
    <clone newId="MISRA2012-RULE-7_3"     id="PORT-01"              severity="2"  header="The lowercase character 'l' shall not be used in a literal suffix"  />
    <clone newId="MISRA2012-RULE-7_4"     id="PB-27"                severity="2"  header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char"  />
    <clone newId="MISRA2012-RULE-7_5"     id="CODSTA-220"           severity="1"  header="The argument of an integer-constant macro shall have an appropriate form"  />
    <clone newId="MISRA2012-RULE-7_6"     id="CODSTA-220_b"         severity="4"  />
    <clone newId="MISRA2012-RULE-8_1_a"   id="MISRA2004-8_2_a"      severity="2"  header="Whenever a function is declared or defined, its type shall be explicitly stated"  />
    <clone newId="MISRA2012-RULE-8_1_b"   id="MISRA2004-8_2_b"      severity="2"  header="Whenever an object is declared or defined, its type shall be explicitly stated"  />
    <clone newId="MISRA2012-RULE-8_2_a"   id="MISRA2004-16_3"       severity="2"  header="Identifiers shall be given for all of the parameters in a function prototype declaration"  />
    <clone newId="MISRA2012-RULE-8_2_b"   id="CODSTA-158"           severity="2"  header="Function types shall have named parameters"  />
    <clone newId="MISRA2012-RULE-8_2_c"   id="CODSTA-159"           severity="2"  header="Function types shall be in prototype form"  />
    <clone newId="MISRA2012-RULE-8_3_a"   id="MISRA2004-8_4"        severity="2"  header="If objects or functions are declared more than once their types shall be compatible"  />
    <clone newId="MISRA2012-RULE-8_3_b"   id="MISRA2004-16_4"       severity="2"  header="The identifiers used in the declaration and definition of a function shall be identical"  />
    <clone newId="MISRA2012-RULE-8_3_c"   id="GLOBAL-COMPATDECLS"   severity="2"  header="All declarations of an object or function shall have compatible types"  />
    <clone newId="MISRA2012-RULE-8_4_a"   id="CODSTA-118"           severity="2"  header="A compatible declaration shall be visible when an object or function with external linkage is defined"  />
    <clone newId="MISRA2012-RULE-8_4_b"   id="MISRA2004-8_4"        severity="2"  header="A compatible declaration shall be visible when an object or function with external linkage is defined"  />
    <clone newId="MISRA2012-RULE-8_5"     id="CODSTA-154"           severity="2"  header="An external object or function shall not have more than one non-defining declaration in translation unit"  />
    <clone newId="MISRA2012-RULE-8_6"     id="GLOBAL-ONEEXTERNDEF"  severity="2"  header="An identifier with external linkage shall have exactly one external definition"  />
    <clone newId="MISRA2012-RULE-8_6_b"   id="GLOBAL-NOEXTERNDEF"   severity="2"  header="An identifier with external linkage shall have exactly one external definition"  />
    <clone newId="MISRA2012-RULE-8_7"     id="GLOBAL-AVOIDEXTERN"   severity="4"  header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit"  />    
    <clone newId="MISRA2012-RULE-8_8"     id="MISRA2004-8_11"       severity="2"  header="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage"  />
    <clone newId="MISRA2012-RULE-8_9"     id="MISRA2004-8_7"        severity="4"  header="An object should be defined at block scope if its identifier only appears in a single function"  />
    <clone newId="MISRA2012-RULE-8_10"    id="CODSTA-120"           severity="2"  header="An inline function shall be declared with the static storage class"  />
    <clone newId="MISRA2012-RULE-8_11"    id="MISRA2004-8_12"       severity="4"  header="When an array with external linkage is declared, its size should be explicitly specified"  />
    <clone newId="MISRA2012-RULE-8_12"    id="PB-58"                severity="2"  header="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique"  />
    <clone newId="MISRA2012-RULE-8_13_a"  id="MISRA2004-16_7"       severity="4"  header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object"  />
    <clone newId="MISRA2012-RULE-8_13_b"  id="MISRA2004-16_7_b"     severity="4"  header="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object"  />
    <clone newId="MISRA2012-RULE-8_14"    id="CODSTA-121"           severity="2"  header="The restrict type qualifier shall not be used"  />
    <clone newId="MISRA2012-RULE-8_15"    id="GLOBAL-ALIGNDECL"     severity="2"  header="All declarations of an object with external linkage and an explicit alignment specification shall specify the same alignment"  />
    <clone newId="MISRA2012-RULE-8_15_b"  id="CODSTA-MC-04"         severity="2"  header="All declarations of an object with internal linkage and an explicit alignment specification shall specify the same alignment"  />
    <clone newId="MISRA2012-RULE-8_16"    id="CODSTA-MC-03"         severity="4"  header="The alignment specification of zero should not appear in an object declaration"  />
    <clone newId="MISRA2012-RULE-8_17"    id="CODSTA-MC-02"         severity="4"  header="At most one explicit alignment specifier should appear in an object declaration"  />
    <clone newId="MISRA2012-RULE-9_1"     id="BD-PB-NOTINIT"        severity="1"  header="Avoid use before initialization"  />
    <clone newId="MISRA2012-RULE-9_2"     id="INIT-16"              severity="2"  header="The initializer for an aggregate or union shall be enclosed in braces"  />
    <clone newId="MISRA2012-RULE-9_3"     id="MISRA2004-9_2_b"      severity="2"  header="Arrays shall not be partially initialized"  />
    <clone newId="MISRA2012-RULE-9_4"     id="PB-69"                severity="2"  header="An element of an object shall not be initialized more than once"  />
    <clone newId="MISRA2012-RULE-9_5"     id="CODSTA-186"           severity="2"  header="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly"  />
    <clone newId="MISRA2012-RULE-9_6"     id="PB-80"                severity="2"  />
    <clone newId="MISRA2012-RULE-9_7"     id="BD-PB-NOTINITAT"      severity="1"  />
    <clone newId="MISRA2012-RULE-10_1_a"  id="CODSTA-161_a"         severity="2"  header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value"  />
    <clone newId="MISRA2012-RULE-10_1_b"  id="CODSTA-161_b"         severity="2"  header="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value"  />
    <clone newId="MISRA2012-RULE-10_1_c"  id="CODSTA-161_c"         severity="2"  header="An operand of essentially character type should not be used where an operand is interpreted as a numeric value"  />
    <clone newId="MISRA2012-RULE-10_1_d"  id="CODSTA-161_d"         severity="2"  header="An operand of essentially enum type should not be used in an arithmetic operation"  />
    <clone newId="MISRA2012-RULE-10_1_e"  id="CODSTA-161_e"         severity="2"  header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type"  />
    <clone newId="MISRA2012-RULE-10_1_f"  id="CODSTA-161_f"         severity="2"  header="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator"  />
    <clone newId="MISRA2012-RULE-10_1_g"  id="CODSTA-161_g"         severity="2"  header="An operand of essentially unsigned type should not be used as the operand to the unary minus operator"  />
    <clone newId="MISRA2012-RULE-10_1_h"  id="CODSTA-225"           severity="2"  header="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)"  />
    <clone newId="MISRA2012-RULE-10_2"    id="CODSTA-162"           severity="2"  header="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations"  />
    <clone newId="MISRA2012-RULE-10_3_a"  id="CODSTA-163_a"         severity="2"  header="The value of an expression shall not be assigned to an object with a narrower essential type"  />
    <clone newId="MISRA2012-RULE-10_3_b"  id="CODSTA-163_b"         severity="2"  header="The value of an expression shall not be assigned to an object of a different essential type category"  />
    <clone newId="MISRA2012-RULE-10_4_a"  id="CODSTA-164_a"         severity="2"  header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category"  />
    <clone newId="MISRA2012-RULE-10_4_b"  id="CODSTA-164_b"         severity="2"  header="The second and third operands of the ternary operator shall have the same essential type category"  />
    <clone newId="MISRA2012-RULE-10_5_a"  id="CODSTA-165_a"         severity="4"  header="The cast operation to essentially enumeration type is not allowed"  />
    <clone newId="MISRA2012-RULE-10_5_b"  id="CODSTA-165_b"         severity="4"  header="Do not cast from or to essentially Boolean type"  />
    <clone newId="MISRA2012-RULE-10_5_c"  id="CODSTA-165_c"         severity="4"  header="Do not use casts between essentially character types and essentially floating types"  />
    <clone newId="MISRA2012-RULE-10_6"    id="CODSTA-157"           severity="2"  header="The value of a composite expression shall not be assigned to an object with wider essential type"  />
    <clone newId="MISRA2012-RULE-10_7_a"  id="CODSTA-156_a"         severity="2"  header="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type"  />
    <clone newId="MISRA2012-RULE-10_7_b"  id="CODSTA-156_b"         severity="2"  header="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type"  />
    <clone newId="MISRA2012-RULE-10_8"    id="CODSTA-152"           severity="2"  header="The value of a composite expression shall not be cast to a different essential type category or a wider essential type"  />
    <clone newId="MISRA2012-RULE-11_1_a"  id="CODSTA-124_a"         severity="2"  header="Conversions shall not be performed between a pointer to a function and any other type"  />
    <clone newId="MISRA2012-RULE-11_1_b"  id="CODSTA-124_b"         severity="2"  header="Conversions shall not be performed between a pointer to a function and any other type"  />
    <clone newId="MISRA2012-RULE-11_2"    id="CODSTA-125"           severity="2"  header="Conversions shall not be performed between a pointer to an incomplete type and any other type"  />
    <clone newId="MISRA2012-RULE-11_3"    id="CODSTA-126"           severity="2"  header="A cast shall not be performed between a pointer to object type and a pointer to a different object type"  />
    <clone newId="MISRA2012-RULE-11_4"    id="CODSTA-127"           severity="4"  header="A conversion should not be performed between a pointer to object and an integer type"  />
    <clone newId="MISRA2012-RULE-11_5"    id="CODSTA-128"           severity="4"  header="A conversion should not be performed from pointer to void into pointer to object"  />
    <clone newId="MISRA2012-RULE-11_6"    id="CODSTA-129_a"         severity="2"  header="A cast shall not be performed between pointer to void and an arithmetic type"  />
    <clone newId="MISRA2012-RULE-11_7"    id="CODSTA-130"           severity="2"  header="A cast shall not be performed between pointer to object and a non-integer arithmetic type"  />
    <clone newId="MISRA2012-RULE-11_8"    id="CODSTA-301"           severity="2"  />
    <clone newId="MISRA2012-RULE-11_9_a"  id="CODSTA-CPP-63"        severity="2"  header="The macro NULL shall be the only permitted form of integer null pointer constant"  />
    <clone newId="MISRA2012-RULE-11_9_b"  id="CODSTA-131"           severity="2"  header="The macro NULL shall be the only permitted form of integer null pointer constant"  />
    <clone newId="MISRA2012-RULE-11_10"   id="CODSTA-MC-16"         severity="2"  header="The _Atomic qualifier shall not be applied to the incomplete type void"  />
    <clone newId="MISRA2012-RULE-12_1_a"  id="FORMAT-50"            severity="4"  />
    <clone newId="MISRA2012-RULE-12_1_c"  id="FORMAT-25"            severity="4"  header="Parenthesis shall be used with 'sizeof' statement"  />
    <clone newId="MISRA2012-RULE-12_2"    id="BD-PB-BADSHIFT"       severity="2"  >
    <defParameters>
      <![CDATA[
        MISRA2012-RULE-12_2-violateOnNegativeShifted=false
        MISRA2012-RULE-12_2-violateOnNegativeShift=true
        MISRA2012-RULE-12_2-violateOnTooBigShift=true
        MISRA2012-RULE-12_2-lhsBitSizeStrategy=MC
        MISRA2012-RULE-12_2-violateOnOverflow=false
        MISRA2012-RULE-12_2-violateOnUnsignedOverflow=false
      ]]>
    </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-12_2_b"  id="CODSTA-302"           severity="2"  />
    <clone newId="MISRA2012-RULE-12_3"    id="MISRA2004-12_10"      severity="4"  header="The comma operator should not be used"  />
    <clone newId="MISRA2012-RULE-12_4_a"  id="PB-66_a"              severity="4"  header="Integer overflow or underflow in constant expression in '+', '-', '*' operator"  />
    <clone newId="MISRA2012-RULE-12_4_b"  id="PB-66_b"              severity="4"  header="Integer overflow or underflow in constant expression in '&lt;&lt;' operator"  />
    <clone newId="MISRA2012-RULE-12_5"    id="CODSTA-182"           severity="1"  header="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;"  />
    <clone newId="MISRA2012-RULE-12_6"    id="CODSTA-MC-17"         severity="2"  header="Structure and union members of atomic objects shall not be directly accessed"  />
    <clone newId="MISRA2012-RULE-13_1_a"  id="CODSTA-141_a"         severity="2"  header="Initializer lists shall not contain persistent side effects"  />
    <clone newId="MISRA2012-RULE-13_2_a"  id="MISRA2004-12_2_a"     severity="2"  header="The value of an expression shall be the same under any order of evaluation that the standard permits"  />
    <clone newId="MISRA2012-RULE-13_2_b"  id="MISRA2004-12_2_b"     severity="2"  header="Don't write code that depends on the order of evaluation of function arguments"  />
    <clone newId="MISRA2012-RULE-13_2_c"  id="MISRA2004-12_2_c"     severity="2"  header="Don't write code that depends on the order of evaluation of function designator and function arguments"  />
    <clone newId="MISRA2012-RULE-13_2_d"  id="MISRA2004-12_2_d"     severity="2"  header="Don't write code that depends on the order of evaluation of expression that involves a function call"  />
    <clone newId="MISRA2012-RULE-13_2_e"  id="MISRA2004-12_2_e"     severity="2"  header="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression"  />
    <clone newId="MISRA2012-RULE-13_2_f"  id="MISRA2004-12_2_f"     severity="2"  header="Do not use more than one volatile in one expression"  />
    <clone newId="MISRA2012-RULE-13_2_g"  id="MISRA2004-12_2_g"     severity="2"  header="Don't write code that depends on the order of evaluation of function calls"  />
    <clone newId="MISRA2012-RULE-13_2_h"  id="CODSTA-MC-19"         severity="2"  />
    <clone newId="MISRA2012-RULE-13_3"    id="CODSTA-123"           severity="4"  header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator"  />
    <clone newId="MISRA2012-RULE-13_4"    id="CODSTA-138"           severity="4"  header="The result of an assignment operator should not be used"  />
    <clone newId="MISRA2012-RULE-13_5"    id="MISRA2004-12_4_a"     severity="2"  header="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects"  />
    <clone newId="MISRA2012-RULE-13_6_a"  id="MISRA2004-12_3"       severity="2"  header="The operand of the sizeof operator shall not contain any expression which has potential side effects"  />
    <clone newId="MISRA2012-RULE-13_6_b"  id="MISRA2004-12_3_b"     severity="2"  header="The operand of the sizeof operator shall not contain any expression which has potential side effects"  />
    <clone newId="MISRA2012-RULE-13_6_c"  id="CODSTA-137"           severity="2"  header="The operand of the sizeof operator shall not contain any expression which has potential side effects"  />
    <clone newId="MISRA2012-RULE-14_1_a"  id="CODSTA-167_a"         severity="2"  header="A loop counter in a 'for' loop shall not have essentially floating type"  />
    <clone newId="MISRA2012-RULE-14_1_b"  id="CODSTA-167_b"         severity="2"  header="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type"  />
    <clone newId="MISRA2012-RULE-14_2_a"  id="CODSTA-168"           severity="2"  header="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body"  />
    <clone newId="MISRA2012-RULE-14_2_b"  id="CODSTA-169_a"         severity="2"  header="The first clause of a 'for' loop shall be well-formed"  />
    <clone newId="MISRA2012-RULE-14_2_c"  id="CODSTA-169_b"         severity="2"  header="The second clause of a 'for' loop shall be well-formed"  />
    <clone newId="MISRA2012-RULE-14_2_d"  id="CODSTA-169_c"         severity="2"  header="The third clause of a 'for' statement shall be well-formed"  />
    <clone newId="MISRA2012-RULE-14_3_zc" id="BD-PB-CC"             severity="2"  header="Controlling expressions shall not be invariant">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-14_3_zc-exceptDoWhileFalseLoops=true
          MISRA2012-RULE-14_3_zc-exceptInfiniteLoops=true
          MISRA2012-RULE-14_3_zc-violateOnConstantCondition=true
          MISRA2012-RULE-14_3_zc-violateOnInnerConditions=false
          MISRA2012-RULE-14_3_zc-violateOnNoIf=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-14_4"    id="MISRA2004-13_2"       severity="2"  header="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type"  />
    <clone newId="MISRA2012-RULE-15_1"    id="MISRA2004-14_4"       severity="4"  header="The goto statement should not be used"  />
    <clone newId="MISRA2012-RULE-15_2"    id="CODSTA-77"            severity="2"  header="The goto statement shall jump to a label declared later in the same function"  />
    <clone newId="MISRA2012-RULE-15_3"    id="CODSTA-78"            severity="2"  header="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement"  />
    <clone newId="MISRA2012-RULE-15_4"    id="CODSTA-79"            severity="4"  header="There should be no more than one break or goto statement used to terminate any iteration statement"  />
    <clone newId="MISRA2012-RULE-15_5"    id="MISRA2004-14_7"       severity="4"  header="A function should have a single point of exit at the end"  />
    <clone newId="MISRA2012-RULE-15_6_a"  id="MISRA2004-14_8"       severity="2"  header="The body of an iteration-statement or a selection-statement shall be a compound-statement"  />
    <clone newId="MISRA2012-RULE-15_6_b"  id="MISRA2004-14_9"       severity="2"  header="The body of an iteration-statement or a selection-statement shall be a compound-statement"  />
    <clone newId="MISRA2012-RULE-15_7"    id="MISRA2004-14_10"      severity="2"  header="All 'if ... else if' constructs shall be terminated with an 'else' statement"  />
    <clone newId="MISRA2012-RULE-16_1_a"  id="MISRA2004-15_0_b"     severity="2"  header="A switch statement shall only contain switch labels and switch clauses, and no other code"  />
    <clone newId="MISRA2012-RULE-16_1_b"  id="MISRA2004-15_1"       severity="2"  header="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement"  />
    <clone newId="MISRA2012-RULE-16_1_c"  id="MISRA2004-15_2"       severity="2"  header="An unconditional break statement shall terminate every non-empty case clause"  />
    <clone newId="MISRA2012-RULE-16_1_d"  id="MISRA2004-15_2_b"     severity="2"  header="An unconditional break statement shall terminate every non-empty default clause"  />
    <clone newId="MISRA2012-RULE-16_1_e"  id="CODSTA-35"            severity="2"  header="Always provide a default branch for switch statements"  />
    <clone newId="MISRA2012-RULE-16_1_f"  id="CODSTA-119"           severity="2"  header="A 'default' label shall have a statement or a comment before terminating 'break'"  />
    <clone newId="MISRA2012-RULE-16_1_g"  id="CODSTA-116"           severity="2"  header="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement"  />
    <clone newId="MISRA2012-RULE-16_1_h"  id="OPT-39"               severity="2"  header="Every switch statement shall have at least two switch-clauses"  />
    <clone newId="MISRA2012-RULE-16_2"    id="MISRA2004-15_1"       severity="2"  header="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement"  />
    <clone newId="MISRA2012-RULE-16_3_a"  id="MISRA2004-15_2"       severity="2"  header="An unconditional break statement shall terminate every switch-clause"  />
    <clone newId="MISRA2012-RULE-16_3_b"  id="MISRA2004-15_2_b"     severity="2"  header="An unconditional break statement shall terminate every switch-clause"  />
    <clone newId="MISRA2012-RULE-16_4_a"  id="CODSTA-35"            severity="2"  header="Every 'switch' statement shall have a 'default' label" />
    <clone newId="MISRA2012-RULE-16_4_b"  id="CODSTA-119"           severity="2"  header="A 'default' label shall have a statement or a comment before terminating 'break'" />
    <clone newId="MISRA2012-RULE-16_5"    id="CODSTA-116"           severity="2"  header="A default label shall appear as either the first or the last switch label of a switch statement"  />
    <clone newId="MISRA2012-RULE-16_6"    id="OPT-39"               severity="2"  header="Every switch statement shall have at least two switch-clauses"  />
    <clone newId="MISRA2012-RULE-16_7_a"  id="MISRA2004-15_4"       severity="2"  header="A switch-expression shall not have essentially Boolean type"  />
    <clone newId="MISRA2012-RULE-16_7_b"  id="MISRA2004-15_4_b"     severity="2"  header="A switch-expression shall not have essentially Boolean type"  />
    <clone newId="MISRA2012-RULE-17_1_a"  id="CODSTA-136_a"         severity="2"  header="The features of &lt;stdarg.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-17_1_b"  id="CODSTA-136_b"         severity="2"  header="The features of &lt;stdarg.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-17_1_c"  id="CODSTA-136_c"         severity="2"  header="The standard header file &lt;stdarg.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-17_2"    id="MISRA2004-16_2"       severity="2"  header="Functions shall not call themselves, either directly or indirectly"  />
    <clone newId="MISRA2012-RULE-17_3"    id="MISRA-071_b"          severity="1"  header="A function shall not be declared implicitly"  />
    <clone newId="MISRA2012-RULE-17_4"    id="MISRA2004-16_8"       severity="1"  header="All exit paths from a function with non-void return type shall have an explicit return statement with an expression"  />
    <clone newId="MISRA2012-RULE-17_4_b"  id="MISRA2004-16_8_b"     severity="1"  header="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression"  />
    <clone newId="MISRA2012-RULE-17_5"    id="CODSTA-134"           severity="2"  header="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements"  />
    <clone newId="MISRA2012-RULE-17_6"    id="CODSTA-160"           severity="1"  header="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]"  />
    <clone newId="MISRA2012-RULE-17_7_a"  id="CODSTA-122_a"         severity="2"  header="The value returned by a function having non-void return type shall be used"  />
    <clone newId="MISRA2012-RULE-17_7_b"  id="CODSTA-122_b"         severity="2"  header="The value returned by a function having non-void return type shall be used"  />
    <clone newId="MISRA2012-RULE-17_8"    id="CODSTA-132"           severity="4"  header="A function parameter should not be modified"  />
    <clone newId="MISRA2012-RULE-17_9"    id="BD-PB-NORETURN"       severity="1"  header="A function declared with a _Noreturn function specifier shall not return to its caller"  />
    <clone newId="MISRA2012-RULE-17_10"   id="CODSTA-204"           severity="2"  header="A function declared with a _Noreturn function specifier shall have void return type"  />
    <clone newId="MISRA2012-RULE-17_11"   id="BD-PB-NORETDECL"      severity="4"  header="A function that never returns should be declared with a _Noreturn function specifier"  />
    <clone newId="MISRA2012-RULE-17_12"   id="MISRA2004-16_9"       severity="4"  header="A function identifier shall only be used with either a preceding &amp;, or with a parenthesised parameter list"  />
    <clone newId="MISRA2012-RULE-17_13"   id="CODSTA-221"           severity="2"  header="A function type shall not be type qualified"  />
    <clone newId="MISRA2012-RULE-18_1_a"  id="BD-PB-ARRAY"          severity="2"  header="Avoid accessing arrays out of bounds"  />
    <clone newId="MISRA2012-RULE-18_1_b"  id="BD-PB-OVERFARRAY"     severity="2"  header="Avoid accessing arrays and pointers out of bounds"  />
    <clone newId="MISRA2012-RULE-18_1_c"  id="BD-PB-PTRARR"         severity="2"  header="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" />
    <clone newId="MISRA2012-RULE-18_2"    id="BD-PB-PTRSUB"         severity="2"  header="Subtraction between pointers shall only be applied to pointers that address elements of the same array">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-18_2-aggressiveMode=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-18_3"    id="BD-PB-PTRCMP"         severity="2"  header="&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-18_3-aggressiveMode=true
          MISRA2012-RULE-18_3-reportOnComparisonFunctions=false
          MISRA2012-RULE-18_3-reportOnRelationalOperators=true
          MISRA2012-RULE-18_3-treatPointersToFieldsOfTheSameStructRelated=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-18_4"    id="CODSTA-181"           severity="4"  header="The +, -, += and -= operators should not be applied to an expression of pointer type"  />
    <clone newId="MISRA2012-RULE-18_5"    id="MISRA2004-17_5"       severity="4"  header="Declarations should contain no more than two levels of pointer nesting"  />
    <clone newId="MISRA2012-RULE-18_6_a"  id="MISRA2004-17_6_a"     severity="2"  header="The address of an object with automatic storage shall not be returned from a function"  />
    <clone newId="MISRA2012-RULE-18_6_b"  id="MISRA2004-17_6_b"     severity="2"  header="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist"  />
    <clone newId="MISRA2012-RULE-18_6_c"  id="CODSTA-231"           severity="2"  />
    <clone newId="MISRA2012-RULE-18_7"    id="CODSTA-113"           severity="2"  header="Flexible array members shall not be declared"  />
    <clone newId="MISRA2012-RULE-18_8"    id="CODSTA-112"           severity="2"   />
    <clone newId="MISRA2012-RULE-18_10"   id="CODSTA-112_b"         severity="1"   />
    <clone newId="MISRA2012-RULE-18_9"    id="CODSTA-196"           severity="2"  header="An object shall not be used outside its lifetime"  />
    <clone newId="MISRA2012-RULE-19_1_a"  id="MISRA2004-18_2"       severity="1"  header="An object shall not be assigned or copied to an overlapping object"  />
    <clone newId="MISRA2012-RULE-19_1_b"  id="MISRA2004-18_2_b"     severity="1"  header="An object shall not be assigned or copied to an overlapping object"  />
    <clone newId="MISRA2012-RULE-19_1_c"  id="BD-PB-OVERLAP"        severity="1" />
    <clone newId="MISRA2012-RULE-19_2"    id="CODSTA-111"           severity="4"  header="The union keyword should not be used"  />
    <clone newId="MISRA2012-RULE-20_1"    id="MISRA2004-19_1"       severity="4"  header="#include directives should only be preceded by preprocessor directives or comments"  />
    <clone newId="MISRA2012-RULE-20_2_a"  id="NAMING-46"            severity="2"  header="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name"  />
    <clone newId="MISRA2012-RULE-20_2_b"  id="NAMING-48"            severity="2"  header="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name"  />
    <clone newId="MISRA2012-RULE-20_3"    id="MISRA-089"            severity="2"  header="The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence"  />
    <clone newId="MISRA2012-RULE-20_4_a"  id="CODSTA-133_a"         severity="2"  header="A macro shall not be defined with the same name as a keyword"  />
    <clone newId="MISRA2012-RULE-20_4_b"  id="CODSTA-133_b"         severity="2"  header="A macro shall not be defined with the same name as a keyword"  />
    <clone newId="MISRA2012-RULE-20_5"    id="PREPROC-25"           severity="4"  header="#undef should not be used"  />
    <clone newId="MISRA2012-RULE-20_6"    id="MISRA2004-19_9"       severity="2"  header="Tokens that look like a preprocessing directive shall not occur within a macro argument"  />
    <clone newId="MISRA2012-RULE-20_7"    id="MISRA2004-19_10"      severity="2"  header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses"  />
    <clone newId="MISRA2012-RULE-20_8"    id="PREPROC-19"           severity="2"  header="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1"  />
    <clone newId="MISRA2012-RULE-20_9_b"  id="MISRA2004-19_11_b"    severity="2"  header="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation"  />
    <clone newId="MISRA2012-RULE-20_10"   id="MISRA2004-19_13"      severity="4"  header="The # and ## preprocessor operators should not be used"  />
    <clone newId="MISRA2012-RULE-20_11"   id="PREPROC-16"           severity="2"  header="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator"  />
    <clone newId="MISRA2012-RULE-20_12"   id="PREPROC-17"           severity="2"  header="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators"  />
    <clone newId="MISRA2012-RULE-20_13"   id="MISRA2004-19_16"      severity="2"  header="A line whose first token is # shall be a valid preprocessing directive"  />
    <clone newId="MISRA2012-RULE-20_14"   id="MISRA2004-19_17"      severity="2"  header="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related"  />
    <clone newId="MISRA2012-RULE-21_1_a"  id="MISRA2004-20_1_a"     severity="2"  header="Do not #define or #undef identifiers with names which start with underscore"  />
    <clone newId="MISRA2012-RULE-21_1_b"  id="CODSTA-92_a"          severity="2"  header="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)"  />
    <clone newId="MISRA2012-RULE-21_1_c"  id="CODSTA-92_b"          severity="2"  header="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)"  />
    <clone newId="MISRA2012-RULE-21_1_d"  id="MISRA2004-20_1_e"     severity="2"  header="Do not #define nor #undef identifier 'defined'"  />
    <clone newId="MISRA2012-RULE-21_2_a"  id="MISRA2004-20_2"       severity="2"  header="An identifier with name which starts with underscore shall not be declared"  />
    <clone newId="MISRA2012-RULE-21_2_b"  id="MISRA2004-20_2_a"     severity="2"  header="A reserved identifier or macro name shall not be declared (for C90 code)"  />
    <clone newId="MISRA2012-RULE-21_2_c"  id="MISRA2004-20_2_b"     severity="2"  header="A reserved identifier or macro name shall not be declared (for C99 code)"  />
    <clone newId="MISRA2012-RULE-21_3"    id="MISRA2004-20_4"       severity="2"  header="The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_4_a"  id="MISRA2004-20_7"       severity="2"  header="The standard header file &lt;setjmp.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_4_b"  id="MISRA2004-20_7_b"     severity="2"  header="The standard header file &lt;setjmp.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_5_a"  id="MISRA2004-20_8"       severity="2"  header="The standard header file &lt;signal.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_5_b"  id="MISRA2004-20_8_b"     severity="2"  header="The standard header file &lt;signal.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_6"    id="CODSTA-110"           severity="2"  header="The Standard Library input/output functions shall not be used"  />
    <clone newId="MISRA2012-RULE-21_7"    id="MISRA2004-20_10"      severity="2"  header="The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_8"    id="PB-75"                severity="2"  header="The library function 'abort' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_8_b"  id="PB-75_b"              severity="2"  header="The library function 'exit' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_8_c"  id="PB-75_c"              severity="2"  header="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_9"    id="CODSTA-107"           severity="2"  header="The library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_10"   id="MISRA2004-20_12"      severity="2"  header="The standard header file &lt;time.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_10_b" id="MISRA2004-20_12_b"    severity="2"  header="The time handling functions and macros of library &lt;time.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_10_c" id="MISRA2004-20_12_c"    severity="2"  header="The types defined in the library &lt;time.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_11"   id="CODSTA-108"           severity="2"  header="The standard header file &lt;tgmath.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_12"   id="CODSTA-109"           severity="2"  />
    <clone newId="MISRA2012-RULE-21_12_b" id="CODSTA-109_b"         severity="2"  />
    <clone newId="MISRA2012-RULE-21_13"   id="BD-API-CTYPE"         severity="1"  header="Any value passed to a function in &lt;ctype.h&gt; shall be representable as an 'unsigned char' or be the value 'EOF'"  />
    <clone newId="MISRA2012-RULE-21_14"   id="BD-PB-MCCSTR"         severity="2"  header="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings"  />
    <clone newId="MISRA2012-RULE-21_15"   id="CODSTA-183"           severity="2"  header="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types"  />
    <clone newId="MISRA2012-RULE-21_16"   id="CODSTA-184"           severity="2"  header="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type"  />
    <clone newId="MISRA2012-RULE-21_17_a" id="BD-PB-OVERFNZT"       severity="1"  header="Avoid overflow due to reading a not zero terminated string"  />
    <clone newId="MISRA2012-RULE-21_17_b" id="BD-PB-OVERFWR"        severity="1"  header="Avoid overflow when writing to a buffer"  />
    <clone newId="MISRA2012-RULE-21_18"   id="BD-API-STRSIZE"       severity="1"  header="The 'size_t' argument passed to any function in &lt;string.h&gt; shall have an appropriate value">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-21_18-reportOnSafeUsagesOfZeroTerminatedString=true
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-21_19_a" id="CODSTA-185_a"         severity="1"  header="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type"  />
    <clone newId="MISRA2012-RULE-21_19_b" id="CODSTA-185_b"         severity="1"  header="Strings pointed by members of the structure 'lconv' should not be modified"  />
    <clone newId="MISRA2012-RULE-21_20"   id="BD-PB-INVRET"         severity="1"  header="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function"  />
    <clone newId="MISRA2012-RULE-21_21"   id="SECURITY-48_b"        severity="2"  header="The library function 'system' of &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_22"   id="CODSTA-108_c"         severity="1"  header="All arguments to any type-generic macros declared in &lt;tgmath.h&gt; shall have appropriate essential type"  />
    <clone newId="MISRA2012-RULE-21_23"   id="CODSTA-108_d"         severity="2"  header="All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h&gt; shall have the same standard type"  />
    <clone newId="MISRA2012-RULE-21_24"   id="SECURITY-02"          severity="2"  header="The random number generator functions of  &lt;stdlib.h&gt; shall not be used"  />
    <clone newId="MISRA2012-RULE-21_25"   id="CODSTA-MC-20"         severity="2"  />
    <clone newId="MISRA2012-RULE-21_26"   id="BD-TRS-TIMEDLOCK"     severity="2"  />
    <clone newId="MISRA2012-RULE-22_1"    id="BD-RES-LEAKS"         severity="2"  header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-22_1-nonMemberMethodsStoreResource=false
          MISRA2012-RULE-22_1-patternName=^malloc|calloc|realloc|fopen$
          MISRA2012-RULE-22_1-patternNameMethodsStore=true
          MISRA2012-RULE-22_1-reportUnvalidatedViolations=false
          MISRA2012-RULE-22_1-storeByTPMethods=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-22_2_a"  id="BD-RES-FREE"          severity="1"  header="Do not use resources that have been freed"  />
    <clone newId="MISRA2012-RULE-22_2_b"  id="BD-RES-INVFREE"       severity="1"  header="Do not free resources using invalid pointers"  />
    <clone newId="MISRA2012-RULE-22_3"    id="BD-PB-WRRDSTR"        severity="2"  header="The same file shall not be opened for read and write access at the same time on different stream"  />
    <clone newId="MISRA2012-RULE-22_4"    id="BD-PB-WRROS"          severity="1"  header="Avoid writing to a stream which has been opened as read only"  />
    <clone newId="MISRA2012-RULE-22_5_a"  id="CODSTA-166_a"         severity="1"  header="A pointer to a FILE object shall not be dereferenced"  />
    <clone newId="MISRA2012-RULE-22_5_b"  id="CODSTA-166_b"         severity="1"  header="A pointer to a FILE object shall not be dereferenced by a library function"  />
    <clone newId="MISRA2012-RULE-22_6"    id="BD-RES-FREE"          severity="1"  header="The value of a pointer to a FILE shall not be used after the associated stream has been closed"  />
    <clone newId="MISRA2012-RULE-22_7"    id="BD-PB-EOFCOMP"        severity="2"  header="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function"  />
    <clone newId="MISRA2012-RULE-22_8"    id="BD-PB-ERRNO"          severity="2"  header="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-22_8-reportOnMissingErrnoCheck=false
          MISRA2012-RULE-22_8-reportOnUnnecessaryErrnoCheck=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-22_9"    id="BD-PB-ERRNO"          severity="2"  header="The value of 'errno' shall be tested against zero after calling an errno-setting-function">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-22_9-reportWhenErrnoIsNotZero=false
          MISRA2012-RULE-22_9-reportOnUnnecessaryErrnoCheck=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-22_10"   id="BD-PB-ERRNO"          severity="2"  header="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function">
      <defParameters>
        <![CDATA[
          MISRA2012-RULE-22_10-reportWhenErrnoIsNotZero=false
          MISRA2012-RULE-22_10-reportOnMissingErrnoCheck=false
        ]]>
      </defParameters>
    </clone>
    <clone newId="MISRA2012-RULE-22_11"   id="BD-TRS-JOINDETACH"    severity="2"  />
    <clone newId="MISRA2012-RULE-22_12"   id="CODSTA-MC-22"         severity="1"  />
    <clone newId="MISRA2012-RULE-22_13"   id="CODSTA-MC-101"        severity="2"  />
    <clone newId="MISRA2012-RULE-22_14_a" id="BD-TRS-THRINIT"       severity="1"  />
    <clone newId="MISRA2012-RULE-22_14_b" id="CODSTA-MC-21"         severity="1"  />
    <clone newId="MISRA2012-RULE-22_15"   id="BD-TRS-THRDSTR"       severity="2"  />
    <clone newId="MISRA2012-RULE-22_16"   id="BD-TRS-LOCK"          severity="2"  />
    <clone newId="MISRA2012-RULE-22_17"   id="BD-TRS-REVLOCK"       severity="2"  />
    <clone newId="MISRA2012-RULE-22_18"   id="BD-TRS-DLOCK"         severity="2"  />
    <clone newId="MISRA2012-RULE-22_19"   id="GLOBAL-CONDMUTEXVAR"  severity="2"  header="A condition variable shall be associated with at most one mutex variable" />
    <clone newId="MISRA2012-RULE-22_20"   id="BD-TRS-THRTSS"        severity="1"  />
    <clone newId="MISRA2012-RULE-23_1"    id="CODSTA-MC-08"         severity="4"  header="A generic selection should only be expanded from a macro"  />
    <clone newId="MISRA2012-RULE-23_1_b"  id="CODSTA-MC-10"         severity="4"  header="A generic selection used in a macro definition should have a macro parameter in the controlling expression"  />
    <clone newId="MISRA2012-RULE-23_2"    id="CODSTA-MC-13"         severity="2"  header="A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" />
    <clone newId="MISRA2012-RULE-23_3"    id="CODSTA-MC-07"         severity="4"  header="A generic selection should contain at least one non-default association" />
    <clone newId="MISRA2012-RULE-23_4"    id="CODSTA-MC-09"         severity="2"  header="A generic association shall list an appropriate type" />
    <clone newId="MISRA2012-RULE-23_5"    id="CODSTA-MC-11"         severity="4"  header="A generic selection should not depend on implicit pointer type conversion" />
    <clone newId="MISRA2012-RULE-23_6"    id="CODSTA-MC-12"         severity="2"  header="The controlling expression of a generic selection shall have an essential type that matches its standard type" />
    <clone newId="MISRA2012-RULE-23_6_b"  id="CODSTA-MC-14"         severity="2"  header="Enumerated types should not be mixed with integer types in generic selections" />
    <clone newId="MISRA2012-RULE-23_7"    id="CODSTA-MC-15"         severity="4"  header="A generic selection that is expanded from a macro should evaluate its argument only once"  />
    <clone newId="MISRA2012-RULE-23_8"    id="CODSTA-MC-06"         severity="2"  header="A default association shall appear as either the first or the last association of a generic selection"  />
    <!-- MISRA C 2012 (Legacy) end -->
  <!-- MISRA C 2023 (MISRA C 2012) begin -->
  <category description="MISRA C 2023 (MISRA C 2012)" id="MISRAC2012" />
  <category description="Dir 4.1 (Required) Run-time failures shall be minimized" id="MISRAC2012-DIR_4_1" />
  <clone id="BD-PB-ARRAY" newId="MISRAC2012-DIR_4_1-a" severity="2" />
  <clone id="BD-PB-NP" newId="MISRAC2012-DIR_4_1-b" severity="2" />
  <clone id="BD-PB-ZERO" newId="MISRAC2012-DIR_4_1-c" severity="2" />
  <clone id="BD-PB-OVERFFMT" newId="MISRAC2012-DIR_4_1-d" severity="2" />
  <clone id="BD-PB-OVERFNZT" newId="MISRAC2012-DIR_4_1-e" severity="2" />
  <clone id="BD-PB-OVERFRD" newId="MISRAC2012-DIR_4_1-g" severity="2" />
  <clone id="BD-PB-OVERFWR" newId="MISRAC2012-DIR_4_1-h" severity="2" />
  <clone id="BD-PB-PTRSUB" newId="MISRAC2012-DIR_4_1-i" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-DIR_4_1-i-aggressiveMode=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-PTRCMP" newId="MISRAC2012-DIR_4_1-j" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-DIR_4_1-j-aggressiveMode=true
        MISRAC2012-DIR_4_1-j-reportOnComparisonFunctions=false
        MISRAC2012-DIR_4_1-j-reportOnRelationalOperators=true
        MISRAC2012-DIR_4_1-j-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-INTWRAP" newId="MISRAC2012-DIR_4_1-k" severity="2" />
  <clone id="BD-PB-INTUB" newId="MISRAC2012-DIR_4_1-l" severity="2" />
  <clone id="BD-PB-INTDL" newId="MISRAC2012-DIR_4_1-m" severity="2" />
  <category description="Dir 4.2 (Advisory) All usage of assembly language should be documented" id="MISRAC2012-DIR_4_2" />
  <clone id="COMMENT-09" newId="MISRAC2012-DIR_4_2-a" severity="4" />
  <category description="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3" />
  <clone id="MISRA2004-2_1" newId="MISRAC2012-DIR_4_3-a" severity="2" />
  <category description="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4" />
  <clone id="MISRA2004-2_4" newId="MISRAC2012-DIR_4_4-a" severity="4" />
  <clone id="MISRA2004-2_4_b" newId="MISRAC2012-DIR_4_4-b" severity="4" />
  <category description="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5" />
  <clone id="NAMING-50" newId="MISRAC2012-DIR_4_5-a" severity="4" />
  <category description="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRAC2012-DIR_4_6" />
  <clone id="MISRA2004-6_3" newId="MISRAC2012-DIR_4_6-a" severity="4" />
  <clone id="MISRA2004-6_3_b" newId="MISRAC2012-DIR_4_6-b" severity="4" />
  <clone id="CODSTA-155" newId="MISRAC2012-DIR_4_6-c" severity="4" />
  <category description="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" id="MISRAC2012-DIR_4_7" />
  <clone id="BD-PB-CHECKRET" newId="MISRAC2012-DIR_4_7-a" severity="2" />
  <clone id="BD-PB-CHECKRETGEN" newId="MISRAC2012-DIR_4_7-b" severity="2" />
  <category description="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8" />
  <clone id="CODSTA-115" newId="MISRAC2012-DIR_4_8-a" severity="4" />
  <category description="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" id="MISRAC2012-DIR_4_9" />
  <clone id="MISRA2004-19_7" newId="MISRAC2012-DIR_4_9-a" severity="4" />
  <category description="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRAC2012-DIR_4_10" />
  <clone id="PFO-02" newId="MISRAC2012-DIR_4_10-a" severity="2" />
  <category description="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" id="MISRAC2012-DIR_4_11" />
  <clone id="BD-API-VALPARAM" newId="MISRAC2012-DIR_4_11-a" severity="2" />
  <category description="Dir 4.12 (Required) Dynamic memory allocation shall not be used" id="MISRAC2012-DIR_4_12" />
  <clone id="MISRA2004-20_4" newId="MISRAC2012-DIR_4_12-a" severity="2" />
  <category description="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" id="MISRAC2012-DIR_4_13" />
  <clone id="BD-RES-LEAKS" newId="MISRAC2012-DIR_4_13-a" severity="4" />
  <clone id="BD-RES-FREE" newId="MISRAC2012-DIR_4_13-b" severity="4" />
  <clone id="BD-RES-INVFREE" newId="MISRAC2012-DIR_4_13-c" severity="4" />
  <clone id="BD-TRS-LOCK" newId="MISRAC2012-DIR_4_13-d" severity="4" />
  <clone id="BD-TRS-DLOCK" newId="MISRAC2012-DIR_4_13-e" severity="4" />
  <clone id="BD-TRS-REVLOCK" newId="MISRAC2012-DIR_4_13-f" severity="4" />
  <category description="Dir 4.14 (Required) The validity of values received from external sources shall be checked" id="MISRAC2012-DIR_4_14" />
  <clone id="BD-SECURITY-ARRAY" newId="MISRAC2012-DIR_4_14-a" severity="2" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="MISRAC2012-DIR_4_14-b" severity="2" />
  <clone id="BD-SECURITY-OVERFRD" newId="MISRAC2012-DIR_4_14-c" severity="2" />
  <clone id="BD-SECURITY-OVERFWR" newId="MISRAC2012-DIR_4_14-d" severity="2" />
  <clone id="BD-SECURITY-TDCMD" newId="MISRAC2012-DIR_4_14-e" severity="2" />
  <clone id="BD-SECURITY-TDFNAMES" newId="MISRAC2012-DIR_4_14-f" severity="2" />
  <clone id="BD-SECURITY-TDSQL" newId="MISRAC2012-DIR_4_14-g" severity="2" />
  <clone id="BD-SECURITY-BUFWRITE" newId="MISRAC2012-DIR_4_14-h" severity="2" />
  <clone id="BD-SECURITY-OVERFFMT" newId="MISRAC2012-DIR_4_14-i" severity="2" />
  <clone id="BD-SECURITY-TDENV" newId="MISRAC2012-DIR_4_14-j" severity="2" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="MISRAC2012-DIR_4_14-k" severity="2" />
  <clone id="BD-SECURITY-TDINPUT" newId="MISRAC2012-DIR_4_14-l" severity="2" />
  <category description="Dir 4.15 (Required) Evaluation of floating-point expressions shall not lead to the undetected generation of infinities and NaNs" id="MISRAC2012-DIR_4_15" />
  <clone id="BD-PB-NANINF" newId="MISRAC2012-DIR_4_15-a" severity="2" />
  <category description="Dir 5.1 (Required) There shall be no data races between threads" id="MISRAC2012-DIR_5_1" />
  <clone id="BD-TRS-MLOCK" newId="MISRAC2012-DIR_5_1-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-DIR_5_1-a-allowedUsagesInCriticalSections=1.0
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-TRS-DIFCS" newId="MISRAC2012-DIR_5_1-b" severity="2" />
  <clone id="BD-TRS-THRDR" newId="MISRAC2012-DIR_5_1-c" severity="2" />
  <category description="Dir 5.2 (Required) There shall be no deadlocks between threads" id="MISRAC2012-DIR_5_2" />
  <clone id="BD-TRS-ORDER" newId="MISRAC2012-DIR_5_2-a" severity="2" />
  <category description="Dir 5.3 (Required) There shall be no dynamic thread creation" id="MISRAC2012-DIR_5_3" />
  <clone id="BD-TRS-THRTHR" newId="MISRAC2012-DIR_5_3-a" severity="2" />
  <category description="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" id="MISRAC2012-RULE_1_1" />
  <clone id="CODSTA-174_a_c90" newId="MISRAC2012-RULE_1_1-a" severity="2" />
  <clone id="CODSTA-174_a_c99" newId="MISRAC2012-RULE_1_1-b" severity="2" />
  <clone id="CODSTA-174_b_c90" newId="MISRAC2012-RULE_1_1-c" severity="2" />
  <clone id="CODSTA-174_b_c99" newId="MISRAC2012-RULE_1_1-d" severity="2" />
  <category description="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" id="MISRAC2012-RULE_1_3" />
  <clone id="BD-PB-ZERO" newId="MISRAC2012-RULE_1_3-a" severity="2" />
  <clone id="BD-PB-NOTINIT" newId="MISRAC2012-RULE_1_3-b" severity="2" />
  <clone id="BD-RES-FREE" newId="MISRAC2012-RULE_1_3-c" severity="2" />
  <clone id="BD-PB-OVERFRD" newId="MISRAC2012-RULE_1_3-d" severity="2" />
  <clone id="BD-PB-OVERFWR" newId="MISRAC2012-RULE_1_3-e" severity="2" />
  <clone id="MISRA2004-12_2_a" newId="MISRAC2012-RULE_1_3-f" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="MISRAC2012-RULE_1_3-g" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="MISRAC2012-RULE_1_3-h" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="MISRAC2012-RULE_1_3-i" severity="2" />
  <clone id="MISRA2004-12_2_e" newId="MISRAC2012-RULE_1_3-j" severity="2" />
  <clone id="MISRA2004-12_2_f" newId="MISRAC2012-RULE_1_3-k" severity="2" />
  <clone id="MISRA2004-12_2_g" newId="MISRAC2012-RULE_1_3-l" severity="2" />
  <clone id="MISRA2004-17_6_a" newId="MISRAC2012-RULE_1_3-m" severity="2" />
  <clone id="MISRA2004-17_6_b" newId="MISRAC2012-RULE_1_3-n" severity="2" />
  <clone id="PB-29" newId="MISRAC2012-RULE_1_3-o" severity="2" />
  <category description="Rule 1.4 (Required) Emergent language features shall not be used" id="MISRAC2012-RULE_1_4" />
  <clone id="CODSTA-215" newId="MISRAC2012-RULE_1_4-j" severity="2" />
  <clone id="CODSTA-212" newId="MISRAC2012-RULE_1_4-k" severity="2" />
  <clone id="CODSTA-217" newId="MISRAC2012-RULE_1_4-l" severity="2" />
  <clone id="CODSTA-218" newId="MISRAC2012-RULE_1_4-m" severity="2" />
  <clone id="CODSTA-219" newId="MISRAC2012-RULE_1_4-n" severity="2" />
  <category description="Rule 1.5 (Required) Obsolescent language features shall not be used" id="MISRAC2012-RULE_1_5" />
  <clone id="MISRA2004-8_11" newId="MISRAC2012-RULE_1_5-a" severity="2" />
  <clone id="CODSTA-10" newId="MISRAC2012-RULE_1_5-b" severity="2" />
  <clone id="CODSTA-159" newId="MISRAC2012-RULE_1_5-c" severity="2" />
  <clone id="CODSTA-209_b" newId="MISRAC2012-RULE_1_5-d" severity="2" />
  <clone id="PREPROC-27" newId="MISRAC2012-RULE_1_5-e" severity="2" />
  <clone id="BD-PB-UNGETC" newId="MISRAC2012-RULE_1_5-f" severity="2" />
  <clone id="BD-API-REALLOC" newId="MISRAC2012-RULE_1_5-g" severity="2" />
  <category description="Rule 2.1 (Required) A project shall not contain unreachable code" id="MISRAC2012-RULE_2_1" />
  <clone id="MISRA2004-14_1_a" newId="MISRAC2012-RULE_2_1-a" severity="2" />
  <clone id="MISRA2004-14_1_b" newId="MISRAC2012-RULE_2_1-b" severity="2" />
  <clone id="MISRA2004-14_1_c" newId="MISRAC2012-RULE_2_1-c" severity="2" />
  <clone id="MISRA2004-14_1_d" newId="MISRAC2012-RULE_2_1-d" severity="2" />
  <clone id="MISRA2004-14_1_e" newId="MISRAC2012-RULE_2_1-e" severity="2" />
  <clone id="MISRA2004-14_1_f" newId="MISRAC2012-RULE_2_1-f" severity="2" />
  <clone id="MISRA2004-14_1_g" newId="MISRAC2012-RULE_2_1-g" severity="2" />
  <clone id="BD-PB-UCMETH" newId="MISRAC2012-RULE_2_1-h" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_2_1-h-global=false
        MISRAC2012-RULE_2_1-h-ignore_template=false
        MISRAC2012-RULE_2_1-h-internal_linkage=true
        MISRAC2012-RULE_2_1-h-isTransitive=false
        MISRAC2012-RULE_2_1-h-public=false
        MISRAC2012-RULE_2_1-h-protected=false
        MISRAC2012-RULE_2_1-h-private=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 2.2 (Required) A project shall not contain dead code" id="MISRAC2012-RULE_2_2" />
  <clone id="MISRA2004-14_2" newId="MISRAC2012-RULE_2_2-a" severity="2" />
  <clone id="BD-PB-VOVR" newId="MISRAC2012-RULE_2_2-b" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_2_2-b-reportOnVariableDeclarations=false
        MISRAC2012-RULE_2_2-b-reportOnNullPointer=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 2.3 (Advisory) A project should not contain unused type declarations" id="MISRAC2012-RULE_2_3" />
  <clone id="CODSTA-175_a" newId="MISRAC2012-RULE_2_3-a" severity="4" />
  <clone id="CODSTA-175_b" newId="MISRAC2012-RULE_2_3-b" severity="4" />
  <category description="Rule 2.4 (Advisory) A project should not contain unused tag declarations" id="MISRAC2012-RULE_2_4" />
  <clone id="CODSTA-176_a" newId="MISRAC2012-RULE_2_4-a" severity="4" />
  <clone id="CODSTA-176_b" newId="MISRAC2012-RULE_2_4-b" severity="4" />
  <category description="Rule 2.5 (Advisory) A project should not contain unused macro definitions" id="MISRAC2012-RULE_2_5" />
  <clone id="CODSTA-177" newId="MISRAC2012-RULE_2_5-a" severity="4" />
  <category description="Rule 2.6 (Advisory) A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6" />
  <clone id="OPT-37" newId="MISRAC2012-RULE_2_6-a" severity="4" />
  <category description="Rule 2.7 (Advisory) A function should not contain unused parameters" id="MISRAC2012-RULE_2_7" />
  <clone id="OPT-38" newId="MISRAC2012-RULE_2_7-a" severity="4" />
  <category description="Rule 2.8 (Advisory) A project should not contain unused object definitions" id="MISRAC2012-RULE_2_8" />
  <clone id="GLOBAL-UNUSEDEXTVAR" newId="MISRAC2012-RULE_2_8-a" severity="4" />
  <clone id="OPT-43" newId="MISRAC2012-RULE_2_8-b" severity="4" />
  <clone id="OPT-02" newId="MISRAC2012-RULE_2_8-c" severity="4" />
  <category description="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" id="MISRAC2012-RULE_3_1" />
  <clone id="MISRA2004-2_3" newId="MISRAC2012-RULE_3_1-a" severity="2" />
  <clone id="COMMENT-11" newId="MISRAC2012-RULE_3_1-b" severity="2" />
  <clone id="COMMENT-12" newId="MISRAC2012-RULE_3_1-c" severity="2" />
  <category description="Rule 3.2 (Required) Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2" />
  <clone id="COMMENT-13" newId="MISRAC2012-RULE_3_2-a" severity="2" />
  <category description="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1" />
  <clone id="CODSTA-117" newId="MISRAC2012-RULE_4_1-a" severity="2" />
  <category description="Rule 4.2 (Advisory) Trigraphs should not be used" id="MISRAC2012-RULE_4_2" />
  <clone id="MISRA2004-4_2" newId="MISRAC2012-RULE_4_2-a" severity="4" />
  <category description="Rule 5.1 (Required) External identifiers shall be distinct" id="MISRAC2012-RULE_5_1" />
  <clone id="CODSTA-178" newId="MISRAC2012-RULE_5_1-a" severity="2" />
  <category description="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" id="MISRAC2012-RULE_5_2" />
  <clone id="CODSTA-179_a_c90" newId="MISRAC2012-RULE_5_2-a" severity="2" />
  <clone id="CODSTA-179_a_c99" newId="MISRAC2012-RULE_5_2-b" severity="2" />
  <clone id="CODSTA-179_b_c90" newId="MISRAC2012-RULE_5_2-c" severity="2" />
  <clone id="CODSTA-179_b_c99" newId="MISRAC2012-RULE_5_2-d" severity="2" />
  <category description="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRAC2012-RULE_5_3" />
  <clone id="MISRA2004-5_2_a" newId="MISRAC2012-RULE_5_3-a" severity="2" />
  <clone id="MISRA2004-5_2_b" newId="MISRAC2012-RULE_5_3-b" severity="2" />
  <category description="Rule 5.4 (Required) Macro identifiers shall be distinct" id="MISRAC2012-RULE_5_4" />
  <clone id="CODSTA-171_c90" newId="MISRAC2012-RULE_5_4-a" severity="2" />
  <clone id="CODSTA-171_c99" newId="MISRAC2012-RULE_5_4-b" severity="2" />
  <clone id="CODSTA-172_c90" newId="MISRAC2012-RULE_5_4-c" severity="2" />
  <clone id="CODSTA-172_c99" newId="MISRAC2012-RULE_5_4-d" severity="2" />
  <category description="Rule 5.5 (Required) Identifiers shall be distinct from macro names" id="MISRAC2012-RULE_5_5" />
  <clone id="CODSTA-170_c90" newId="MISRAC2012-RULE_5_5-a" severity="2" />
  <clone id="CODSTA-170_c99" newId="MISRAC2012-RULE_5_5-b" severity="2" />
  <category description="Rule 5.6 (Required) A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6" />
  <clone id="GLOBAL-UNIQUETYPEDEFC" newId="MISRAC2012-RULE_5_6-a" severity="2" />
  <category description="Rule 5.7 (Required) A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7" />
  <clone id="GLOBAL-UNIQUETYPEC" newId="MISRAC2012-RULE_5_7-a" severity="2" />
  <category description="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8" />
  <clone id="GLOBAL-REUSEDEXTVAR" newId="MISRAC2012-RULE_5_8-a" severity="2" />
  <clone id="GLOBAL-REUSEDEXTFUN" newId="MISRAC2012-RULE_5_8-b" severity="2" />
  <category description="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" id="MISRAC2012-RULE_5_9" />
  <clone id="GLOBAL-REUSEDSTATVAR" newId="MISRAC2012-RULE_5_9-a" severity="4" />
  <clone id="GLOBAL-REUSEDSTATFUN" newId="MISRAC2012-RULE_5_9-b" severity="4" />
  <category description="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" id="MISRAC2012-RULE_6_1" />
  <clone id="MISRA2004-6_4" newId="MISRAC2012-RULE_6_1-a" severity="2" />
  <category description="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" id="MISRAC2012-RULE_6_2" />
  <clone id="CODSTA-71" newId="MISRAC2012-RULE_6_2-a" severity="2" />
  <category description="Rule 6.3 (Required) A bit field shall not be declared as a member of a union" id="MISRAC2012-RULE_6_3" />
  <clone id="CODSTA-02_b" newId="MISRAC2012-RULE_6_3-a" severity="2" />
  <category description="Rule 7.1 (Required) Octal constants shall not be used" id="MISRAC2012-RULE_7_1" />
  <clone id="MISRA2004-7_1_a" newId="MISRAC2012-RULE_7_1-a" severity="2" />
  <category description="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRAC2012-RULE_7_2" />
  <clone id="MISRA2004-10_6" newId="MISRAC2012-RULE_7_2-a" severity="2" />
  <category description="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" id="MISRAC2012-RULE_7_3" />
  <clone id="PORT-01" newId="MISRAC2012-RULE_7_3-a" severity="2" />
  <category description="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" id="MISRAC2012-RULE_7_4" />
  <clone id="PB-27" newId="MISRAC2012-RULE_7_4-a" severity="2" />
  <category description="Rule 7.5 (Mandatory) The argument of an integer-constant macro shall have an appropriate form" id="MISRAC2012-RULE_7_5" />
  <clone id="CODSTA-220" newId="MISRAC2012-RULE_7_5-a" severity="1" />
  <category description="Rule 7.6 (Required) The small integer variants of the minimum-width integer constant macros shall not be used" id="MISRAC2012-RULE_7_6" />
  <clone id="CODSTA-220_b" newId="MISRAC2012-RULE_7_6-a" severity="2" />
  <category description="Rule 8.1 (Required) Types shall be explicitly specified" id="MISRAC2012-RULE_8_1" />
  <clone id="MISRA2004-8_2_a" newId="MISRAC2012-RULE_8_1-a" severity="2" />
  <clone id="MISRA2004-8_2_b" newId="MISRAC2012-RULE_8_1-b" severity="2" />
  <category description="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" id="MISRAC2012-RULE_8_2" />
  <clone id="MISRA2004-16_3" newId="MISRAC2012-RULE_8_2-a" severity="2" />
  <clone id="CODSTA-158" newId="MISRAC2012-RULE_8_2-b" severity="2" />
  <clone id="CODSTA-159" newId="MISRAC2012-RULE_8_2-c" severity="2" />
  <category description="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" id="MISRAC2012-RULE_8_3" />
  <clone id="MISRA2004-8_4" newId="MISRAC2012-RULE_8_3-a" severity="2" />
  <clone id="MISRA2004-16_4" newId="MISRAC2012-RULE_8_3-b" severity="2" />
  <clone id="GLOBAL-COMPATDECLS" newId="MISRAC2012-RULE_8_3-c" severity="2" />
  <category description="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4" />
  <clone id="CODSTA-118" newId="MISRAC2012-RULE_8_4-a" severity="2" />
  <clone id="MISRA2004-8_4" newId="MISRAC2012-RULE_8_4-b" severity="2" />
  <category description="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" id="MISRAC2012-RULE_8_5" />
  <clone id="CODSTA-154" newId="MISRAC2012-RULE_8_5-a" severity="2" />
  <category description="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" id="MISRAC2012-RULE_8_6" />
  <clone id="GLOBAL-ONEEXTERNDEF" newId="MISRAC2012-RULE_8_6-a" severity="2" />
  <clone id="GLOBAL-NOEXTERNDEF" newId="MISRAC2012-RULE_8_6-b" severity="2" />
  <category description="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7" />
  <clone id="GLOBAL-AVOIDEXTERN" newId="MISRAC2012-RULE_8_7-a" severity="4" />
  <category description="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8" />
  <clone id="MISRA2004-8_11" newId="MISRAC2012-RULE_8_8-a" severity="2" />
  <category description="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" id="MISRAC2012-RULE_8_9" />
  <clone id="MISRA2004-8_7" newId="MISRAC2012-RULE_8_9-a" severity="4" />
  <category description="Rule 8.10 (Required) An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10" />
  <clone id="CODSTA-120" newId="MISRAC2012-RULE_8_10-a" severity="2" />
  <category description="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11" />
  <clone id="MISRA2004-8_12" newId="MISRAC2012-RULE_8_11-a" severity="4" />
  <category description="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12" />
  <clone id="PB-58" newId="MISRAC2012-RULE_8_12-a" severity="2" />
  <category description="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" id="MISRAC2012-RULE_8_13" />
  <clone id="MISRA2004-16_7" newId="MISRAC2012-RULE_8_13-a" severity="4" />
  <clone id="MISRA2004-16_7_b" newId="MISRAC2012-RULE_8_13-b" severity="4" />
  <category description="Rule 8.14 (Required) The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14" />
  <clone id="CODSTA-121" newId="MISRAC2012-RULE_8_14-a" severity="2" />
  <category description="Rule 8.15 (Required) All declarations of an object with an explicit alignment specification shall specify the same alignment" id="MISRAC2012-RULE_8_15" />
  <clone id="GLOBAL-ALIGNDECL" newId="MISRAC2012-RULE_8_15-a" severity="2" />
  <clone id="CODSTA-MC-04" newId="MISRAC2012-RULE_8_15-b" severity="2" />
  <category description="Rule 8.16 (Advisory) The alignment specification of zero should not appear in an object declaration" id="MISRAC2012-RULE_8_16" />
  <clone id="CODSTA-MC-03" newId="MISRAC2012-RULE_8_16-a" severity="4" />
  <category description="Rule 8.17 (Advisory) At most one explicit alignment specifier should appear in an object declaration" id="MISRAC2012-RULE_8_17" />
  <clone id="CODSTA-MC-02" newId="MISRAC2012-RULE_8_17-a" severity="4" />
  <category description="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" id="MISRAC2012-RULE_9_1" />
  <clone id="BD-PB-NOTINIT" newId="MISRAC2012-RULE_9_1-a" severity="1" />
  <category description="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2" />
  <clone id="INIT-16" newId="MISRAC2012-RULE_9_2-a" severity="2" />
  <category description="Rule 9.3 (Required) Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3" />
  <clone id="MISRA2004-9_2_b" newId="MISRAC2012-RULE_9_3-a" severity="2" />
  <category description="Rule 9.4 (Required) An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4" />
  <clone id="PB-69" newId="MISRAC2012-RULE_9_4-a" severity="2" />
  <category description="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5" />
  <clone id="CODSTA-186" newId="MISRAC2012-RULE_9_5-a" severity="2" />
  <category description="Rule 9.6 (Required) An initializer using chained designators shall not contain initializers without designators" id="MISRAC2012-RULE_9_6" />
  <clone id="PB-80" newId="MISRAC2012-RULE_9_6-a" severity="2" />
  <category description="Rule 9.7 (Mandatory) Atomic objects shall be appropriately initialized before being accessed" id="MISRAC2012-RULE_9_7" />
  <clone id="BD-PB-NOTINITAT" newId="MISRAC2012-RULE_9_7-a" severity="1" />
  <category description="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" id="MISRAC2012-RULE_10_1" />
  <clone id="CODSTA-161_a" newId="MISRAC2012-RULE_10_1-a" severity="2" />
  <clone id="CODSTA-161_b" newId="MISRAC2012-RULE_10_1-b" severity="2" />
  <clone id="CODSTA-161_c" newId="MISRAC2012-RULE_10_1-c" severity="2" />
  <clone id="CODSTA-161_d" newId="MISRAC2012-RULE_10_1-d" severity="2" />
  <clone id="CODSTA-161_e" newId="MISRAC2012-RULE_10_1-e" severity="2" />
  <clone id="CODSTA-161_f" newId="MISRAC2012-RULE_10_1-f" severity="2" />
  <clone id="CODSTA-161_g" newId="MISRAC2012-RULE_10_1-g" severity="2" />
  <clone id="CODSTA-225" newId="MISRAC2012-RULE_10_1-h" severity="2" />
  <category description="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2" />
  <clone id="CODSTA-162" newId="MISRAC2012-RULE_10_2-a" severity="2" />
  <category description="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" id="MISRAC2012-RULE_10_3" />
  <clone id="CODSTA-163_a" newId="MISRAC2012-RULE_10_3-a" severity="2" />
  <clone id="CODSTA-163_b" newId="MISRAC2012-RULE_10_3-b" severity="2" />
  <category description="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4" />
  <clone id="CODSTA-164_a" newId="MISRAC2012-RULE_10_4-a" severity="2" />
  <clone id="CODSTA-164_b" newId="MISRAC2012-RULE_10_4-b" severity="2" />
  <category description="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" id="MISRAC2012-RULE_10_5" />
  <clone id="CODSTA-165_a" newId="MISRAC2012-RULE_10_5-a" severity="4" />
  <clone id="CODSTA-165_b" newId="MISRAC2012-RULE_10_5-b" severity="4" />
  <clone id="CODSTA-165_c" newId="MISRAC2012-RULE_10_5-c" severity="4" />
  <category description="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6" />
  <clone id="CODSTA-157" newId="MISRAC2012-RULE_10_6-a" severity="2" />
  <category description="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7" />
  <clone id="CODSTA-156_a" newId="MISRAC2012-RULE_10_7-a" severity="2" />
  <clone id="CODSTA-156_b" newId="MISRAC2012-RULE_10_7-b" severity="2" />
  <category description="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8" />
  <clone id="CODSTA-152" newId="MISRAC2012-RULE_10_8-a" severity="2" />
  <category description="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" id="MISRAC2012-RULE_11_1" />
  <clone id="CODSTA-124_a" newId="MISRAC2012-RULE_11_1-a" severity="2" />
  <clone id="CODSTA-124_b" newId="MISRAC2012-RULE_11_1-b" severity="2" />
  <category description="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2" />
  <clone id="CODSTA-125" newId="MISRAC2012-RULE_11_2-a" severity="2" />
  <category description="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3" />
  <clone id="CODSTA-126" newId="MISRAC2012-RULE_11_3-a" severity="2" />
  <category description="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4" />
  <clone id="CODSTA-127" newId="MISRAC2012-RULE_11_4-a" severity="4" />
  <category description="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5" />
  <clone id="CODSTA-128" newId="MISRAC2012-RULE_11_5-a" severity="4" />
  <category description="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6" />
  <clone id="CODSTA-129_a" newId="MISRAC2012-RULE_11_6-a" severity="2" />
  <category description="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7" />
  <clone id="CODSTA-130" newId="MISRAC2012-RULE_11_7-a" severity="2" />
  <category description="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" id="MISRAC2012-RULE_11_8" />
  <clone id="CODSTA-301" newId="MISRAC2012-RULE_11_8-a" severity="2" />
  <category description="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRAC2012-RULE_11_9" />
  <clone id="CODSTA-CPP-63" newId="MISRAC2012-RULE_11_9-a" severity="2" />
  <clone id="CODSTA-131" newId="MISRAC2012-RULE_11_9-b" severity="2" />
  <category description="Rule 11.10 (Required) The _Atomic qualifier shall not be applied to the incomplete type void" id="MISRAC2012-RULE_11_10" />
  <clone id="CODSTA-MC-16" newId="MISRAC2012-RULE_11_10-a" severity="2" />
  <category description="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" id="MISRAC2012-RULE_12_1" />
  <clone id="FORMAT-50" newId="MISRAC2012-RULE_12_1-a" severity="4" />
  <clone id="FORMAT-25" newId="MISRAC2012-RULE_12_1-c" severity="4" />
  <category description="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" id="MISRAC2012-RULE_12_2" />
  <clone id="BD-PB-BADSHIFT" newId="MISRAC2012-RULE_12_2-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_12_2-a-violateOnNegativeShifted=false
        MISRAC2012-RULE_12_2-a-violateOnNegativeShift=true
        MISRAC2012-RULE_12_2-a-violateOnTooBigShift=true
        MISRAC2012-RULE_12_2-a-lhsBitSizeStrategy=MC
        MISRAC2012-RULE_12_2-a-violateOnOverflow=false
        MISRAC2012-RULE_12_2-a-violateOnUnsignedOverflow=false
      ]]>
    </defParameters>
  </clone>
  <clone id="CODSTA-302" newId="MISRAC2012-RULE_12_2-b" severity="2" />
  <category description="Rule 12.3 (Advisory) The comma operator should not be used" id="MISRAC2012-RULE_12_3" />
  <clone id="MISRA2004-12_10" newId="MISRAC2012-RULE_12_3-a" severity="4" />
  <category description="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" id="MISRAC2012-RULE_12_4" />
  <clone id="PB-66_a" newId="MISRAC2012-RULE_12_4-a" severity="4" />
  <clone id="PB-66_b" newId="MISRAC2012-RULE_12_4-b" severity="4" />
  <category description="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5" />
  <clone id="CODSTA-182" newId="MISRAC2012-RULE_12_5-a" severity="1" />
  <category description="Rule 12.6 (Required) Structure and union members of atomic objects shall not be directly accessed" id="MISRAC2012-RULE_12_6" />
  <clone id="CODSTA-MC-17" newId="MISRAC2012-RULE_12_6-a" severity="2" />
  <category description="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1" />
  <clone id="CODSTA-141_a" newId="MISRAC2012-RULE_13_1-a" severity="2" />
  <category description="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" id="MISRAC2012-RULE_13_2" />
  <clone id="MISRA2004-12_2_a" newId="MISRAC2012-RULE_13_2-a" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="MISRAC2012-RULE_13_2-b" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="MISRAC2012-RULE_13_2-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="MISRAC2012-RULE_13_2-d" severity="2" />
  <clone id="MISRA2004-12_2_e" newId="MISRAC2012-RULE_13_2-e" severity="2" />
  <clone id="MISRA2004-12_2_f" newId="MISRAC2012-RULE_13_2-f" severity="2" />
  <clone id="MISRA2004-12_2_g" newId="MISRAC2012-RULE_13_2-g" severity="2" />
  <clone id="CODSTA-MC-19" newId="MISRAC2012-RULE_13_2-h" severity="2" />
  <category description="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRAC2012-RULE_13_3" />
  <clone id="CODSTA-123" newId="MISRAC2012-RULE_13_3-a" severity="4" />
  <category description="Rule 13.4 (Advisory) The result of an assignment operator should not be used" id="MISRAC2012-RULE_13_4" />
  <clone id="CODSTA-138" newId="MISRAC2012-RULE_13_4-a" severity="4" />
  <category description="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRAC2012-RULE_13_5" />
  <clone id="MISRA2004-12_4_a" newId="MISRAC2012-RULE_13_5-a" severity="2" />
  <category description="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRAC2012-RULE_13_6" />
  <clone id="MISRA2004-12_3" newId="MISRAC2012-RULE_13_6-a" severity="2" />
  <clone id="MISRA2004-12_3_b" newId="MISRAC2012-RULE_13_6-b" severity="2" />
  <clone id="CODSTA-137" newId="MISRAC2012-RULE_13_6-c" severity="2" />
  <category description="Rule 14.1 (Required) A loop counter shall not have essentially floating type" id="MISRAC2012-RULE_14_1" />
  <clone id="CODSTA-167_a" newId="MISRAC2012-RULE_14_1-a" severity="2" />
  <clone id="CODSTA-167_b" newId="MISRAC2012-RULE_14_1-b" severity="2" />
  <category description="Rule 14.2 (Required) A for loop shall be well-formed" id="MISRAC2012-RULE_14_2" />
  <clone id="CODSTA-168" newId="MISRAC2012-RULE_14_2-a" severity="2" />
  <clone id="CODSTA-169_a" newId="MISRAC2012-RULE_14_2-b" severity="2" />
  <clone id="CODSTA-169_b" newId="MISRAC2012-RULE_14_2-c" severity="2" />
  <clone id="CODSTA-169_c" newId="MISRAC2012-RULE_14_2-d" severity="2" />
  <category description="Rule 14.3 (Required) Controlling expressions shall not be invariant" id="MISRAC2012-RULE_14_3" />
  <clone id="BD-PB-CC" newId="MISRAC2012-RULE_14_3-ac" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_14_3-ac-exceptDoWhileFalseLoops=true
        MISRAC2012-RULE_14_3-ac-exceptInfiniteLoops=true
        MISRAC2012-RULE_14_3-ac-violateOnConstantCondition=true
        MISRAC2012-RULE_14_3-ac-violateOnInnerConditions=false
        MISRAC2012-RULE_14_3-ac-violateOnNoIf=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRAC2012-RULE_14_4" />
  <clone id="MISRA2004-13_2" newId="MISRAC2012-RULE_14_4-a" severity="2" />
  <category description="Rule 15.1 (Advisory) The goto statement should not be used" id="MISRAC2012-RULE_15_1" />
  <clone id="MISRA2004-14_4" newId="MISRAC2012-RULE_15_1-a" severity="4" />
  <category description="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" id="MISRAC2012-RULE_15_2" />
  <clone id="CODSTA-77" newId="MISRAC2012-RULE_15_2-a" severity="2" />
  <category description="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRAC2012-RULE_15_3" />
  <clone id="CODSTA-78" newId="MISRAC2012-RULE_15_3-a" severity="2" />
  <category description="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRAC2012-RULE_15_4" />
  <clone id="CODSTA-79" newId="MISRAC2012-RULE_15_4-a" severity="4" />
  <category description="Rule 15.5 (Advisory) A function should have a single point of exit at the end" id="MISRAC2012-RULE_15_5" />
  <clone id="MISRA2004-14_7" newId="MISRAC2012-RULE_15_5-a" severity="4" />
  <category description="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRAC2012-RULE_15_6" />
  <clone id="MISRA2004-14_8" newId="MISRAC2012-RULE_15_6-a" severity="2" />
  <clone id="MISRA2004-14_9" newId="MISRAC2012-RULE_15_6-b" severity="2" />
  <category description="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" id="MISRAC2012-RULE_15_7" />
  <clone id="MISRA2004-14_10" newId="MISRAC2012-RULE_15_7-a" severity="2" />
  <category description="Rule 16.1 (Required) All switch statements shall be well-formed" id="MISRAC2012-RULE_16_1" />
  <clone id="MISRA2004-15_0_b" newId="MISRAC2012-RULE_16_1-a" severity="2" />
  <clone id="MISRA2004-15_1" newId="MISRAC2012-RULE_16_1-b" severity="2" />
  <clone id="MISRA2004-15_2" newId="MISRAC2012-RULE_16_1-c" severity="2" />
  <clone id="MISRA2004-15_2_b" newId="MISRAC2012-RULE_16_1-d" severity="2" />
  <clone id="CODSTA-35" newId="MISRAC2012-RULE_16_1-e" severity="2" />
  <clone id="CODSTA-119" newId="MISRAC2012-RULE_16_1-f" severity="2" />
  <clone id="CODSTA-116" newId="MISRAC2012-RULE_16_1-g" severity="2" />
  <clone id="OPT-39" newId="MISRAC2012-RULE_16_1-h" severity="2" />
  <category description="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2" />
  <clone id="MISRA2004-15_1" newId="MISRAC2012-RULE_16_2-a" severity="2" />
  <category description="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" id="MISRAC2012-RULE_16_3" />
  <clone id="MISRA2004-15_2" newId="MISRAC2012-RULE_16_3-a" severity="2" />
  <clone id="MISRA2004-15_2_b" newId="MISRAC2012-RULE_16_3-b" severity="2" />
  <category description="Rule 16.4 (Required) Every switch statement shall have a default label" id="MISRAC2012-RULE_16_4" />
  <clone id="CODSTA-35" newId="MISRAC2012-RULE_16_4-a" severity="2" />
  <clone id="CODSTA-119" newId="MISRAC2012-RULE_16_4-b" severity="2" />
  <category description="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5" />
  <clone id="CODSTA-116" newId="MISRAC2012-RULE_16_5-a" severity="2" />
  <category description="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6" />
  <clone id="OPT-39" newId="MISRAC2012-RULE_16_6-a" severity="2" />
  <category description="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" id="MISRAC2012-RULE_16_7" />
  <clone id="MISRA2004-15_4" newId="MISRAC2012-RULE_16_7-a" severity="2" />
  <clone id="MISRA2004-15_4_b" newId="MISRAC2012-RULE_16_7-b" severity="2" />
  <category description="Rule 17.1 (Required) The features of &lt;stdarg.h&gt; shall not be used" id="MISRAC2012-RULE_17_1" />
  <clone id="CODSTA-136_a" newId="MISRAC2012-RULE_17_1-a" severity="2" />
  <clone id="CODSTA-136_b" newId="MISRAC2012-RULE_17_1-b" severity="2" />
  <clone id="CODSTA-136_c" newId="MISRAC2012-RULE_17_1-c" severity="2" />
  <category description="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2" />
  <clone id="MISRA2004-16_2" newId="MISRAC2012-RULE_17_2-a" severity="2" />
  <category description="Rule 17.3 (Mandatory) A function shall not be declared implicitly" id="MISRAC2012-RULE_17_3" />
  <clone id="MISRA-071_b" newId="MISRAC2012-RULE_17_3-a" severity="1" />
  <category description="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4" />
  <clone id="MISRA2004-16_8" newId="MISRAC2012-RULE_17_4-a" severity="1" />
  <clone id="MISRA2004-16_8_b" newId="MISRAC2012-RULE_17_4-b" severity="1" />
  <category description="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5" />
  <clone id="CODSTA-134" newId="MISRAC2012-RULE_17_5-a" severity="2" />
  <category description="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" id="MISRAC2012-RULE_17_6" />
  <clone id="CODSTA-160" newId="MISRAC2012-RULE_17_6-a" severity="1" />
  <category description="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7" />
  <clone id="CODSTA-122_a" newId="MISRAC2012-RULE_17_7-a" severity="2" />
  <clone id="CODSTA-122_b" newId="MISRAC2012-RULE_17_7-b" severity="2" />
  <category description="Rule 17.8 (Advisory) A function parameter should not be modified" id="MISRAC2012-RULE_17_8" />
  <clone id="CODSTA-132" newId="MISRAC2012-RULE_17_8-a" severity="4" />
  <category description="Rule 17.9 (Mandatory) A function declared with a _Noreturn function specifier shall not return to its caller" id="MISRAC2012-RULE_17_9" />
  <clone id="BD-PB-NORETURN" newId="MISRAC2012-RULE_17_9-a" severity="1" />
  <category description="Rule 17.10 (Required) A function declared with a _Noreturn function specifier shall have void return type" id="MISRAC2012-RULE_17_10" />
  <clone id="CODSTA-204" newId="MISRAC2012-RULE_17_10-a" severity="2" />
  <category description="Rule 17.11 (Advisory) A function that never returns should be declared with a _Noreturn function specifier" id="MISRAC2012-RULE_17_11" />
  <clone id="BD-PB-NORETDECL" newId="MISRAC2012-RULE_17_11-a" severity="4" />
  <category description="Rule 17.12 (Advisory) A function identifier should only be used with either a preceding &amp;, or with a parenthesised parameter list" id="MISRAC2012-RULE_17_12" />
  <clone id="MISRA2004-16_9" newId="MISRAC2012-RULE_17_12-a" severity="4" />
  <category description="Rule 17.13 (Required) A function type shall not be type qualified" id="MISRAC2012-RULE_17_13" />
  <clone id="CODSTA-221" newId="MISRAC2012-RULE_17_13-a" severity="2" />
  <category description="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" id="MISRAC2012-RULE_18_1" />
  <clone id="BD-PB-ARRAY" newId="MISRAC2012-RULE_18_1-a" severity="2" />
  <clone id="BD-PB-OVERFARRAY" newId="MISRAC2012-RULE_18_1-b" severity="2" />
  <clone id="BD-PB-PTRARR" newId="MISRAC2012-RULE_18_1-c" severity="2" />
  <category description="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRAC2012-RULE_18_2" />
  <clone id="BD-PB-PTRSUB" newId="MISRAC2012-RULE_18_2-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_18_2-a-aggressiveMode=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 18.3 (Required) The relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" id="MISRAC2012-RULE_18_3" />
  <clone id="BD-PB-PTRCMP" newId="MISRAC2012-RULE_18_3-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_18_3-a-aggressiveMode=true
        MISRAC2012-RULE_18_3-a-reportOnComparisonFunctions=false
        MISRAC2012-RULE_18_3-a-reportOnRelationalOperators=true
        MISRAC2012-RULE_18_3-a-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4" />
  <clone id="CODSTA-181" newId="MISRAC2012-RULE_18_4-a" severity="4" />
  <category description="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" id="MISRAC2012-RULE_18_5" />
  <clone id="MISRA2004-17_5" newId="MISRAC2012-RULE_18_5-a" severity="4" />
  <category description="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" id="MISRAC2012-RULE_18_6" />
  <clone id="MISRA2004-17_6_a" newId="MISRAC2012-RULE_18_6-a" severity="2" />
  <clone id="MISRA2004-17_6_b" newId="MISRAC2012-RULE_18_6-b" severity="2" />
  <clone id="CODSTA-231" newId="MISRAC2012-RULE_18_6-c" severity="2" />
  <category description="Rule 18.7 (Required) Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7" />
  <clone id="CODSTA-113" newId="MISRAC2012-RULE_18_7-a" severity="2" />
  <category description="Rule 18.8 (Required) Variable-length arrays shall not be used" id="MISRAC2012-RULE_18_8" />
  <clone id="CODSTA-112" newId="MISRAC2012-RULE_18_8-a" severity="2" />
  <category description="Rule 18.9 (Required) An object with temporary lifetime shall not undergo array-to-pointer conversion" id="MISRAC2012-RULE_18_9" />
  <clone id="CODSTA-196" newId="MISRAC2012-RULE_18_9-a" severity="2" />
  <category description="Rule 18.10 (Mandatory) Pointers to variably-modified array types shall not be used" id="MISRAC2012-RULE_18_10" />
  <clone id="CODSTA-112_b" newId="MISRAC2012-RULE_18_10-a" severity="1" />
  <category description="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1" />
  <clone id="MISRA2004-18_2" newId="MISRAC2012-RULE_19_1-a" severity="1" />
  <clone id="MISRA2004-18_2_b" newId="MISRAC2012-RULE_19_1-b" severity="1" />
  <clone id="BD-PB-OVERLAP" newId="MISRAC2012-RULE_19_1-c" severity="1" />
  <category description="Rule 19.2 (Advisory) The union keyword should not be used" id="MISRAC2012-RULE_19_2" />
  <clone id="CODSTA-111" newId="MISRAC2012-RULE_19_2-a" severity="4" />
  <category description="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" id="MISRAC2012-RULE_20_1" />
  <clone id="MISRA2004-19_1" newId="MISRAC2012-RULE_20_1-a" severity="4" />
  <category description="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRAC2012-RULE_20_2" />
  <clone id="NAMING-46" newId="MISRAC2012-RULE_20_2-a" severity="2" />
  <clone id="NAMING-48" newId="MISRAC2012-RULE_20_2-b" severity="2" />
  <category description="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3" />
  <clone id="MISRA-089" newId="MISRAC2012-RULE_20_3-a" severity="2" />
  <category description="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" id="MISRAC2012-RULE_20_4" />
  <clone id="CODSTA-133_a" newId="MISRAC2012-RULE_20_4-a" severity="2" />
  <clone id="CODSTA-133_b" newId="MISRAC2012-RULE_20_4-b" severity="2" />
  <category description="Rule 20.5 (Advisory) #undef should not be used" id="MISRAC2012-RULE_20_5" />
  <clone id="PREPROC-25" newId="MISRAC2012-RULE_20_5-a" severity="4" />
  <category description="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRAC2012-RULE_20_6" />
  <clone id="MISRA2004-19_9" newId="MISRAC2012-RULE_20_6-a" severity="2" />
  <category description="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRAC2012-RULE_20_7" />
  <clone id="MISRA2004-19_10" newId="MISRAC2012-RULE_20_7-a" severity="2" />
  <category description="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8" />
  <clone id="PREPROC-19" newId="MISRAC2012-RULE_20_8-a" severity="2" />
  <category description="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRAC2012-RULE_20_9" />
  <clone id="MISRA2004-19_11_b" newId="MISRAC2012-RULE_20_9-b" severity="2" />
  <category description="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10" />
  <clone id="MISRA2004-19_13" newId="MISRAC2012-RULE_20_10-a" severity="4" />
  <category description="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11" />
  <clone id="PREPROC-16" newId="MISRAC2012-RULE_20_11-a" severity="2" />
  <category description="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12" />
  <clone id="PREPROC-17" newId="MISRAC2012-RULE_20_12-a" severity="2" />
  <category description="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" id="MISRAC2012-RULE_20_13" />
  <clone id="MISRA2004-19_16" newId="MISRAC2012-RULE_20_13-a" severity="2" />
  <category description="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRAC2012-RULE_20_14" />
  <clone id="MISRA2004-19_17" newId="MISRAC2012-RULE_20_14-a" severity="2" />
  <category description="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" id="MISRAC2012-RULE_21_1" />
  <clone id="MISRA2004-20_1_a" newId="MISRAC2012-RULE_21_1-a" severity="2" />
  <clone id="CODSTA-92_a" newId="MISRAC2012-RULE_21_1-b" severity="2" />
  <clone id="CODSTA-92_b" newId="MISRAC2012-RULE_21_1-c" severity="2" />
  <clone id="MISRA2004-20_1_e" newId="MISRAC2012-RULE_21_1-d" severity="2" />
  <category description="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" id="MISRAC2012-RULE_21_2" />
  <clone id="MISRA2004-20_2" newId="MISRAC2012-RULE_21_2-a" severity="2" />
  <clone id="MISRA2004-20_2_a" newId="MISRAC2012-RULE_21_2-b" severity="2" />
  <clone id="MISRA2004-20_2_b" newId="MISRAC2012-RULE_21_2-c" severity="2" />
  <category description="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_3" />
  <clone id="MISRA2004-20_4" newId="MISRAC2012-RULE_21_3-a" severity="2" />
  <category description="Rule 21.4 (Required) The standard header file &lt;setjmp.h&gt; shall not be used" id="MISRAC2012-RULE_21_4" />
  <clone id="MISRA2004-20_7" newId="MISRAC2012-RULE_21_4-a" severity="2" />
  <clone id="MISRA2004-20_7_b" newId="MISRAC2012-RULE_21_4-b" severity="2" />
  <category description="Rule 21.5 (Required) The standard header file &lt;signal.h&gt; shall not be used" id="MISRAC2012-RULE_21_5" />
  <clone id="MISRA2004-20_8" newId="MISRAC2012-RULE_21_5-a" severity="2" />
  <clone id="MISRA2004-20_8_b" newId="MISRAC2012-RULE_21_5-b" severity="2" />
  <category description="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" id="MISRAC2012-RULE_21_6" />
  <clone id="CODSTA-110" newId="MISRAC2012-RULE_21_6-a" severity="2" />
  <category description="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_7" />
  <clone id="MISRA2004-20_10" newId="MISRAC2012-RULE_21_7-a" severity="2" />
  <category description="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_8" />
  <clone id="PB-75" newId="MISRAC2012-RULE_21_8-a" severity="2" />
  <clone id="PB-75_b" newId="MISRAC2012-RULE_21_8-b" severity="2" />
  <clone id="PB-75_c" newId="MISRAC2012-RULE_21_8-c" severity="2" />
  <category description="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_9" />
  <clone id="CODSTA-107" newId="MISRAC2012-RULE_21_9-a" severity="2" />
  <category description="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" id="MISRAC2012-RULE_21_10" />
  <clone id="MISRA2004-20_12" newId="MISRAC2012-RULE_21_10-a" severity="2" />
  <clone id="MISRA2004-20_12_b" newId="MISRAC2012-RULE_21_10-b" severity="2" />
  <clone id="MISRA2004-20_12_c" newId="MISRAC2012-RULE_21_10-c" severity="2" />
  <category description="Rule 21.11 (Required) The standard header file &lt;tgmath.h&gt; shall not be used" id="MISRAC2012-RULE_21_11" />
  <clone id="CODSTA-108" newId="MISRAC2012-RULE_21_11-a" severity="2" />
  <category description="Rule 21.12 (Required) The standard header file &lt;fenv.h&gt; shall not be used" id="MISRAC2012-RULE_21_12" />
  <clone id="CODSTA-109" newId="MISRAC2012-RULE_21_12-a" severity="2" />
  <clone id="CODSTA-109_b" newId="MISRAC2012-RULE_21_12-b" severity="2" />
  <category description="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h&gt; shall be representable as an unsigned char or be the value EOF" id="MISRAC2012-RULE_21_13" />
  <clone id="BD-API-CTYPE" newId="MISRAC2012-RULE_21_13-a" severity="1" />
  <category description="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14" />
  <clone id="BD-PB-MCCSTR" newId="MISRAC2012-RULE_21_14-a" severity="2" />
  <category description="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15" />
  <clone id="CODSTA-183" newId="MISRAC2012-RULE_21_15-a" severity="2" />
  <category description="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16" />
  <clone id="CODSTA-184" newId="MISRAC2012-RULE_21_16-a" severity="2" />
  <category description="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h&gt; shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" id="MISRAC2012-RULE_21_17" />
  <clone id="BD-PB-OVERFNZT" newId="MISRAC2012-RULE_21_17-a" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="MISRAC2012-RULE_21_17-b" severity="1" />
  <category description="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h&gt; shall have an appropriate value" id="MISRAC2012-RULE_21_18" />
  <clone id="BD-API-STRSIZE" newId="MISRAC2012-RULE_21_18-a" severity="1">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_21_18-a-reportOnSafeUsagesOfZeroTerminatedString=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19" />
  <clone id="CODSTA-185_a" newId="MISRAC2012-RULE_21_19-a" severity="1" />
  <clone id="CODSTA-185_b" newId="MISRAC2012-RULE_21_19-b" severity="1" />
  <category description="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" id="MISRAC2012-RULE_21_20" />
  <clone id="BD-PB-INVRET" newId="MISRAC2012-RULE_21_20-a" severity="1" />
  <category description="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_21" />
  <clone id="SECURITY-48_b" newId="MISRAC2012-RULE_21_21-a" severity="2" />
  <category description="Rule 21.22 (Mandatory) All arguments to any type-generic macros declared in &lt;tgmath.h&gt; shall have appropriate essential type" id="MISRAC2012-RULE_21_22" />
  <clone id="CODSTA-108_c" newId="MISRAC2012-RULE_21_22-a" severity="1" />
  <category description="Rule 21.23 (Required) All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h&gt; shall have the same standard type" id="MISRAC2012-RULE_21_23" />
  <clone id="CODSTA-108_d" newId="MISRAC2012-RULE_21_23-a" severity="2" />
  <category description="Rule 21.24 (Required) The random number generator functions of &lt;stdlib.h&gt; shall not be used" id="MISRAC2012-RULE_21_24" />
  <clone id="SECURITY-02" newId="MISRAC2012-RULE_21_24-a" severity="2" />
  <category description="Rule 21.25 (Required) All memory synchronization operations shall be executed in sequentially consistent order" id="MISRAC2012-RULE_21_25" />
  <clone id="CODSTA-MC-20" newId="MISRAC2012-RULE_21_25-a" severity="2" />
  <category description="Rule 21.26 (Required) The Standard Library function mtx_timedlock() shall only be invoked on mutex objects of appropriate mutex type" id="MISRAC2012-RULE_21_26" />
  <clone id="BD-TRS-TIMEDLOCK" newId="MISRAC2012-RULE_21_26-a" severity="2" />
  <category description="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRAC2012-RULE_22_1" />
  <clone id="BD-RES-LEAKS" newId="MISRAC2012-RULE_22_1-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_22_1-a-nonMemberMethodsStoreResource=false
        MISRAC2012-RULE_22_1-a-patternName=^malloc|calloc|realloc|fopen$
        MISRAC2012-RULE_22_1-a-patternNameMethodsStore=true
        MISRAC2012-RULE_22_1-a-reportUnvalidatedViolations=false
        MISRAC2012-RULE_22_1-a-storeByTPMethods=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a Standard Library function" id="MISRAC2012-RULE_22_2" />
  <clone id="BD-RES-FREE" newId="MISRAC2012-RULE_22_2-a" severity="1" />
  <clone id="BD-RES-INVFREE" newId="MISRAC2012-RULE_22_2-b" severity="1" />
  <category description="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3" />
  <clone id="BD-PB-WRRDSTR" newId="MISRAC2012-RULE_22_3-a" severity="2" />
  <category description="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" id="MISRAC2012-RULE_22_4" />
  <clone id="BD-PB-WRROS" newId="MISRAC2012-RULE_22_4-a" severity="1" />
  <category description="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5" />
  <clone id="CODSTA-166_a" newId="MISRAC2012-RULE_22_5-a" severity="1" />
  <clone id="CODSTA-166_b" newId="MISRAC2012-RULE_22_5-b" severity="1" />
  <category description="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRAC2012-RULE_22_6" />
  <clone id="BD-RES-FREE" newId="MISRAC2012-RULE_22_6-a" severity="1" />
  <category description="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" id="MISRAC2012-RULE_22_7" />
  <clone id="BD-PB-EOFCOMP" newId="MISRAC2012-RULE_22_7-a" severity="2" />
  <category description="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" id="MISRAC2012-RULE_22_8" />
  <clone id="BD-PB-ERRNO" newId="MISRAC2012-RULE_22_8-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_22_8-a-reportOnMissingErrnoCheck=false
        MISRAC2012-RULE_22_8-a-reportOnUnnecessaryErrnoCheck=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" id="MISRAC2012-RULE_22_9" />
  <clone id="BD-PB-ERRNO" newId="MISRAC2012-RULE_22_9-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_22_9-a-reportWhenErrnoIsNotZero=false
        MISRAC2012-RULE_22_9-a-reportOnUnnecessaryErrnoCheck=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" id="MISRAC2012-RULE_22_10" />
  <clone id="BD-PB-ERRNO" newId="MISRAC2012-RULE_22_10-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRAC2012-RULE_22_10-a-reportWhenErrnoIsNotZero=false
        MISRAC2012-RULE_22_10-a-reportOnMissingErrnoCheck=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 22.11 (Required) A thread that was previously either joined or detached shall not be subsequently joined nor detached" id="MISRAC2012-RULE_22_11" />
  <clone id="BD-TRS-JOINDETACH" newId="MISRAC2012-RULE_22_11-a" severity="2" />
  <category description="Rule 22.12 (Mandatory) Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" id="MISRAC2012-RULE_22_12" />
  <clone id="CODSTA-MC-22" newId="MISRAC2012-RULE_22_12-a" severity="1" />
  <category description="Rule 22.13 (Required) Thread objects, thread synchronization objects and thread-specific storage pointers shall have appropriate storage duration" id="MISRAC2012-RULE_22_13" />
  <clone id="CODSTA-MC-101" newId="MISRAC2012-RULE_22_13-a" severity="2" />
  <category description="Rule 22.14 (Mandatory) Thread synchronization objects shall be initialized before being accessed" id="MISRAC2012-RULE_22_14" />
  <clone id="BD-TRS-THRINIT" newId="MISRAC2012-RULE_22_14-a" severity="1" />
  <clone id="CODSTA-MC-21" newId="MISRAC2012-RULE_22_14-b" severity="1" />
  <category description="Rule 22.15 (Required) Thread synchronization objects and thread-specific storage pointers shall not be destroyed until after all threads accessing them have terminated" id="MISRAC2012-RULE_22_15" />
  <clone id="BD-TRS-THRDSTR" newId="MISRAC2012-RULE_22_15-a" severity="2" />
  <category description="Rule 22.16 (Required) All mutex objects locked by a thread shall be explicitly unlocked by the same thread" id="MISRAC2012-RULE_22_16" />
  <clone id="BD-TRS-LOCK" newId="MISRAC2012-RULE_22_16-a" severity="2" />
  <category description="Rule 22.17 (Required) No thread shall unlock a mutex or call cnd_wait() or cnd_timedwait() for a mutex it has not locked before" id="MISRAC2012-RULE_22_17" />
  <clone id="BD-TRS-REVLOCK" newId="MISRAC2012-RULE_22_17-a" severity="2" />
  <category description="Rule 22.18 (Required) Non-recursive mutexes shall not be recursively locked" id="MISRAC2012-RULE_22_18" />
  <clone id="BD-TRS-DLOCK" newId="MISRAC2012-RULE_22_18-a" severity="2" />
  <category description="Rule 22.19 (Required) A condition variable shall be associated with at most one mutex object" id="MISRAC2012-RULE_22_19" />
  <clone id="GLOBAL-CONDMUTEXVAR" newId="MISRAC2012-RULE_22_19-a" severity="2" />
  <category description="Rule 22.20 (Mandatory) Thread-specific storage pointers shall be created before being accessed" id="MISRAC2012-RULE_22_20" />
  <clone id="BD-TRS-THRTSS" newId="MISRAC2012-RULE_22_20-a" severity="1" />
  <category description="Rule 23.1 (Advisory) A generic selection should only be expanded from a macro" id="MISRAC2012-RULE_23_1" />
  <clone id="CODSTA-MC-08" newId="MISRAC2012-RULE_23_1-a" severity="4" />
  <clone id="CODSTA-MC-10" newId="MISRAC2012-RULE_23_1-b" severity="4" />
  <category description="Rule 23.2 (Required) A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" id="MISRAC2012-RULE_23_2" />
  <clone id="CODSTA-MC-13" newId="MISRAC2012-RULE_23_2-a" severity="2" />
  <category description="Rule 23.3 (Advisory) A generic selection should contain at least one non-default association" id="MISRAC2012-RULE_23_3" />
  <clone id="CODSTA-MC-07" newId="MISRAC2012-RULE_23_3-a" severity="4" />
  <category description="Rule 23.4 (Required) A generic association shall list an appropriate type" id="MISRAC2012-RULE_23_4" />
  <clone id="CODSTA-MC-09" newId="MISRAC2012-RULE_23_4-a" severity="2" />
  <category description="Rule 23.5 (Advisory) A generic selection should not depend on implicit pointer type conversion" id="MISRAC2012-RULE_23_5" />
  <clone id="CODSTA-MC-11" newId="MISRAC2012-RULE_23_5-a" severity="4" />
  <category description="Rule 23.6 (Required) The controlling expression of a generic selection shall have an essential type that matches its standard type" id="MISRAC2012-RULE_23_6" />
  <clone id="CODSTA-MC-12" newId="MISRAC2012-RULE_23_6-a" severity="2" />
  <clone id="CODSTA-MC-14" newId="MISRAC2012-RULE_23_6-b" severity="2" />
  <category description="Rule 23.7 (Advisory) A generic selection that is expanded from a macro should evaluate its argument only once" id="MISRAC2012-RULE_23_7" />
  <clone id="CODSTA-MC-15" newId="MISRAC2012-RULE_23_7-a" severity="4" />
  <category description="Rule 23.8 (Required) A default association shall appear as either the first or the last association of a generic selection" id="MISRAC2012-RULE_23_8" />
  <clone id="CODSTA-MC-06" newId="MISRAC2012-RULE_23_8-a" severity="2" />
  <!-- MISRA C 2023 (MISRA C 2012) end -->
  <!-- AUTOSAR begin -->
  <category description="AUTOSAR C++14 Coding Guidelines" id="AUTOSAR" />
  <category description="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" id="AUTOSAR-A0_1_1" />
  <clone id="BD-PB-VOVR" newId="AUTOSAR-A0_1_1-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-A0_1_1-a-reportOnVariableDefaultDeclarations=false
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" id="AUTOSAR-A0_1_2" />
  <clone id="CODSTA-CPP-58" newId="AUTOSAR-A0_1_2-a" severity="2" />
  <category description="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" id="AUTOSAR-A0_1_3" />
  <clone id="OPT-30" newId="AUTOSAR-A0_1_3-a" severity="2" />
  <category description="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" id="AUTOSAR-A0_1_4" />
  <clone id="OPT-03" newId="AUTOSAR-A0_1_4-a" severity="2" />
  <category description="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" id="AUTOSAR-A0_1_5" />
  <clone id="OPT-42" newId="AUTOSAR-A0_1_5-a" severity="2" />
  <category description="AUTOSAR A0-1-6 There should be no unused type declarations" id="AUTOSAR-A0_1_6" />
  <clone id="GLOBAL-UNUSEDTYPE" newId="AUTOSAR-A0_1_6-a" severity="4" />
  <category description="AUTOSAR A0-4-2 Type long double shall not be used" id="AUTOSAR-A0_4_2" />
  <clone id="PORT-32" newId="AUTOSAR-A0_4_2-a" severity="2" />
  <category description="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" id="AUTOSAR-A0_4_4" />
  <clone id="BD-API-VALPARAM" newId="AUTOSAR-A0_4_4-a" severity="2" />
  <category description="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" id="AUTOSAR-A1_1_1" />
  <clone id="MISRA-028" newId="AUTOSAR-A1_1_1-a" severity="2" />
  <clone id="MRM-40_a" newId="AUTOSAR-A1_1_1-b" severity="2" />
  <clone id="MRM-40_d" newId="AUTOSAR-A1_1_1-c" severity="2" />
  <clone id="CODSTA-CPP-59" newId="AUTOSAR-A1_1_1-d" severity="2" />
  <clone id="CODSTA-MCPP-07" newId="AUTOSAR-A1_1_1-e" severity="2" />
  <clone id="CODSTA-MCPP-07_b" newId="AUTOSAR-A1_1_1-f" severity="2" />
  <clone id="CODSTA-MCPP-16_d" newId="AUTOSAR-A1_1_1-g" severity="2" />
  <clone id="CODSTA-MCPP-41" newId="AUTOSAR-A1_1_1-h" severity="2" />
  <clone id="CODSTA-MCPP-42" newId="AUTOSAR-A1_1_1-i" severity="2" />
  <clone id="CODSTA-MCPP-43" newId="AUTOSAR-A1_1_1-j" severity="2" />
  <clone id="EXCEPT-23" newId="AUTOSAR-A1_1_1-k" severity="2" />
  <category description="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" id="AUTOSAR-A10_1_1" />
  <clone id="OOP-07" newId="AUTOSAR-A10_1_1-a" severity="2" />
  <category description="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" id="AUTOSAR-A10_2_1" />
  <clone id="OOP-32" newId="AUTOSAR-A10_2_1-a" severity="2" />
  <clone id="OOP-53" newId="AUTOSAR-A10_2_1-b" severity="2" />
  <category description="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" id="AUTOSAR-A10_3_1" />
  <clone id="CODSTA-MCPP-24" newId="AUTOSAR-A10_3_1-a" severity="2" />
  <category description="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2" />
  <clone id="CODSTA-MCPP-05" newId="AUTOSAR-A10_3_2-a" severity="2" />
  <category description="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" id="AUTOSAR-A10_3_3" />
  <clone id="CODSTA-MCPP-52" newId="AUTOSAR-A10_3_3-a" severity="2" />
  <category description="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5" />
  <clone id="OOP-56" newId="AUTOSAR-A10_3_5-a" severity="2" />
  <category description="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" id="AUTOSAR-A10_4_1" />
  <clone id="OOP-40" newId="AUTOSAR-A10_4_1-a" severity="4" />
  <category description="AUTOSAR A11-0-1 A non-POD type should be defined as class" id="AUTOSAR-A11_0_1" />
  <clone id="OOP-55" newId="AUTOSAR-A11_0_1-a" severity="4" />
  <category description="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" id="AUTOSAR-A11_0_2" />
  <clone id="OOP-57" newId="AUTOSAR-A11_0_2-a" severity="2" />
  <category description="AUTOSAR A11-3-1 Friend declarations shall not be used" id="AUTOSAR-A11_3_1" />
  <clone id="OOP-11_b" newId="AUTOSAR-A11_3_1-a" severity="2" />
  <category description="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" id="AUTOSAR-A12_0_1" />
  <clone id="CODSTA-MCPP-56" newId="AUTOSAR-A12_0_1-a" severity="2" />
  <category description="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" id="AUTOSAR-A12_0_2" />
  <clone id="CODSTA-CPP-100" newId="AUTOSAR-A12_0_2-a" severity="2" />
  <category description="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" id="AUTOSAR-A12_1_1" />
  <clone id="PB-43" newId="AUTOSAR-A12_1_1-a" severity="2" />
  <clone id="INIT-06" newId="AUTOSAR-A12_1_1-b" severity="2" />
  <category description="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" id="AUTOSAR-A12_1_2" />
  <clone id="INIT-18" newId="AUTOSAR-A12_1_2-a" severity="2" />
  <category description="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" id="AUTOSAR-A12_1_3" />
  <clone id="INIT-17_b" newId="AUTOSAR-A12_1_3-a" severity="2" />
  <category description="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4" />
  <clone id="OOP-45" newId="AUTOSAR-A12_1_4-a" severity="2" />
  <category description="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" id="AUTOSAR-A12_1_5" />
  <clone id="CODSTA-CPP-106" newId="AUTOSAR-A12_1_5-a" severity="2" />
  <category description="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6" />
  <clone id="CODSTA-MCPP-37" newId="AUTOSAR-A12_1_6-a" severity="2" />
  <category description="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" id="AUTOSAR-A12_4_1" />
  <clone id="OOP-31" newId="AUTOSAR-A12_4_1-a" severity="2" />
  <category description="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2" />
  <clone id="CODSTA-MCPP-23" newId="AUTOSAR-A12_4_2-a" severity="4" />
  <category description="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" id="AUTOSAR-A12_6_1" />
  <clone id="INIT-14" newId="AUTOSAR-A12_6_1-a" severity="2" />
  <category description="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" id="AUTOSAR-A12_7_1" />
  <clone id="CODSTA-CPP-105" newId="AUTOSAR-A12_7_1-a" severity="2" />
  <category description="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" id="AUTOSAR-A12_8_1" />
  <clone id="OOP-46" newId="AUTOSAR-A12_8_1-a" severity="2" />
  <category description="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2" />
  <clone id="CODSTA-MCPP-49" newId="AUTOSAR-A12_8_2-a" severity="4" />
  <category description="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" id="AUTOSAR-A12_8_3" />
  <clone id="BD-PB-SUBSEQMOVE" newId="AUTOSAR-A12_8_3-a" severity="2" />
  <category description="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" id="AUTOSAR-A12_8_4" />
  <clone id="CODSTA-MCPP-13" newId="AUTOSAR-A12_8_4-a" severity="2" />
  <category description="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" id="AUTOSAR-A12_8_5" />
  <clone id="OOP-34" newId="AUTOSAR-A12_8_5-a" severity="2" />
  <clone id="OOP-34_b" newId="AUTOSAR-A12_8_5-b" severity="2" />
  <category description="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" id="AUTOSAR-A12_8_6" />
  <clone id="OOP-01" newId="AUTOSAR-A12_8_6-a" severity="2" />
  <category description="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7" />
  <clone id="CODSTA-MCPP-19" newId="AUTOSAR-A12_8_7-a" severity="4" />
  <category description="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2" />
  <clone id="NAMING-51" newId="AUTOSAR-A13_1_2-a" severity="2" />
  <category description="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3" />
  <clone id="CODSTA-MCPP-33" newId="AUTOSAR-A13_1_3-a" severity="2" />
  <category description="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" id="AUTOSAR-A13_2_1" />
  <clone id="CODSTA-CPP-02" newId="AUTOSAR-A13_2_1-a" severity="2" />
  <category description="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" id="AUTOSAR-A13_2_2" />
  <clone id="CODSTA-CPP-102" newId="AUTOSAR-A13_2_2-a" severity="2" />
  <category description="AUTOSAR A13-2-3 A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3" />
  <clone id="CODSTA-CPP-101" newId="AUTOSAR-A13_2_3-a" severity="2" />
  <category description="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" id="AUTOSAR-A13_3_1" />
  <clone id="CODSTA-MCPP-14" newId="AUTOSAR-A13_3_1-a" severity="2" />
  <category description="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" id="AUTOSAR-A13_5_1" />
  <clone id="HICPP-13_2_4-a" newId="AUTOSAR-A13_5_1-a" severity="2" />
  <category description="AUTOSAR A13-5-3 User-defined conversion operators should not be used" id="AUTOSAR-A13_5_3" />
  <clone id="CODSTA-CPP-05" newId="AUTOSAR-A13_5_3-a" severity="4" />
  <category description="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4" />
  <clone id="CODSTA-CPP-86" newId="AUTOSAR-A13_5_4-b" severity="2" />
  <category description="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5" />
  <clone id="CODSTA-CPP-107" newId="AUTOSAR-A13_5_5-a" severity="2" />
  <clone id="CODSTA-CPP-107_b" newId="AUTOSAR-A13_5_5-b" severity="2" />
  <category description="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" id="AUTOSAR-A13_5_2" />
  <clone id="CODSTA-MCPP-01" newId="AUTOSAR-A13_5_2-a" severity="2" />
  <category description="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" id="AUTOSAR-A13_6_1" />
  <clone id="CODSTA-MCPP-25" newId="AUTOSAR-A13_6_1-a" severity="2" />
  <category description="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" id="AUTOSAR-A14_5_1" />
  <clone id="TEMPL-07_b" newId="AUTOSAR-A14_5_1-a" severity="2" />
  <category description="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." id="AUTOSAR-A14_5_3" />
  <clone id="TEMPL-18" newId="AUTOSAR-A14_5_3-a" severity="4" />
  <category description="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2" />
  <clone id="TEMPL-16" newId="AUTOSAR-A14_7_2-a" severity="2" />
  <category description="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" id="AUTOSAR-A14_8_2" />
  <clone id="TEMPL-09" newId="AUTOSAR-A14_8_2-a" severity="2" />
  <category description="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" id="AUTOSAR-A15_0_2" />
  <clone id="BD-RES-LEAKS" newId="AUTOSAR-A15_0_2-a" severity="2" />
  <category description="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" id="AUTOSAR-A15_1_1" />
  <clone id="HICPP-15_1_1-a" newId="AUTOSAR-A15_1_1-a" severity="4" />
  <category description="AUTOSAR A15-1-2 An exception object shall not be a pointer" id="AUTOSAR-A15_1_2" />
  <clone id="EXCEPT-09" newId="AUTOSAR-A15_1_2-a" severity="2" />
  <category description="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" id="AUTOSAR-A15_1_4" />
  <clone id="BD-RES-LEAKS" newId="AUTOSAR-A15_1_4-a" severity="2" />
  <category description="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" id="AUTOSAR-A15_1_5" />
  <clone id="PORT-30" newId="AUTOSAR-A15_1_5-a" severity="2" />
  <category description="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" id="AUTOSAR-A15_2_1" />
  <clone id="EXCEPT-18" newId="AUTOSAR-A15_2_1-a" severity="2" />
  <clone id="EXCEPT-13" newId="AUTOSAR-A15_2_1-b" severity="2" />
  <category description="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" id="AUTOSAR-A15_3_2" />
  <clone id="EXCEPT-13" newId="AUTOSAR-A15_3_2-a" severity="2" />
  <category description="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3" />
  <clone id="EXCEPT-06" newId="AUTOSAR-A15_3_3-a" severity="2" />
  <category description="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" id="AUTOSAR-A15_3_4" />
  <clone id="EXCEPT-26" newId="AUTOSAR-A15_3_4-a" severity="2" />
  <category description="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" id="AUTOSAR-A15_3_5" />
  <clone id="EXCEPT-15" newId="AUTOSAR-A15_3_5-a" severity="2" />
  <category description="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" id="AUTOSAR-A15_4_1" />
  <clone id="EXCEPT-23" newId="AUTOSAR-A15_4_1-a" severity="2" />
  <category description="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition&gt;), then it shall not exit with an exception" id="AUTOSAR-A15_4_2" />
  <clone id="BD-PB-NOEXCEPT" newId="AUTOSAR-A15_4_2-a" severity="2" />
  <category description="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" id="AUTOSAR-A15_4_3" />
  <clone id="GLOBAL-EXCSPECDECL" newId="AUTOSAR-A15_4_3-a" severity="2" />
  <category description="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" id="AUTOSAR-A15_4_4" />
  <clone id="CODSTA-MCPP-09" newId="AUTOSAR-A15_4_4-a" severity="2" />
  <category description="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" id="AUTOSAR-A15_4_5" />
  <clone id="EXCEPT-22" newId="AUTOSAR-A15_4_5-a" severity="2" />
  <category description="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" id="AUTOSAR-A15_5_1" />
  <clone id="EXCEPT-01" newId="AUTOSAR-A15_5_1-a" severity="2" />
  <clone id="EXCEPT-21" newId="AUTOSAR-A15_5_1-b" severity="2" />
  <category description="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" id="AUTOSAR-A15_5_2" />
  <clone id="PB-44" newId="AUTOSAR-A15_5_2-a" severity="2" />
  <clone id="PB-75" newId="AUTOSAR-A15_5_2-b" severity="2" />
  <clone id="PB-75_c" newId="AUTOSAR-A15_5_2-c" severity="2" />
  <clone id="PB-75_d" newId="AUTOSAR-A15_5_2-d" severity="2" />
  <category description="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" id="AUTOSAR-A15_5_3" />
  <clone id="PB-44" newId="AUTOSAR-A15_5_3-a" severity="2" />
  <clone id="EXCEPT-01" newId="AUTOSAR-A15_5_3-b" severity="2" />
  <clone id="EXCEPT-03" newId="AUTOSAR-A15_5_3-c" severity="2" />
  <clone id="EXCEPT-06" newId="AUTOSAR-A15_5_3-d" severity="2" />
  <clone id="EXCEPT-07" newId="AUTOSAR-A15_5_3-e" severity="2" />
  <clone id="EXCEPT-08" newId="AUTOSAR-A15_5_3-f" severity="2" />
  <clone id="EXCEPT-13" newId="AUTOSAR-A15_5_3-g" severity="2" />
  <clone id="EXCEPT-14" newId="AUTOSAR-A15_5_3-h" severity="2" />
  <clone id="EXCEPT-18" newId="AUTOSAR-A15_5_3-i" severity="2" />
  <clone id="BD-PB-EXCEPT" newId="AUTOSAR-A15_5_3-j" severity="2" />
  <clone id="BD-PB-EXITHAN" newId="AUTOSAR-A15_5_3-k" severity="2" />
  <category description="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" id="AUTOSAR-A16_0_1" />
  <clone id="PREPROC-26" newId="AUTOSAR-A16_0_1-a" severity="2" />
  <clone id="PREPROC-22" newId="AUTOSAR-A16_0_1-b" severity="2" />
  <clone id="PREPROC-23" newId="AUTOSAR-A16_0_1-c" severity="2" />
  <clone id="PREPROC-01" newId="AUTOSAR-A16_0_1-d" severity="2" />
  <clone id="PREPROC-25" newId="AUTOSAR-A16_0_1-e" severity="2" />
  <category description="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" id="AUTOSAR-A16_2_1" />
  <clone id="PB-28" newId="AUTOSAR-A16_2_1-a" severity="2" />
  <category description="AUTOSAR A16-2-2 There shall be no unused include directives" id="AUTOSAR-A16_2_2" />
  <clone id="OPT-41" newId="AUTOSAR-A16_2_2-a" severity="2" />
  <category description="AUTOSAR A16-6-1 #error directive shall not be used" id="AUTOSAR-A16_6_1" />
  <clone id="PREPROC-22" newId="AUTOSAR-A16_6_1-a" severity="2" />
  <category description="AUTOSAR A16-7-1 The #pragma directive shall not be used" id="AUTOSAR-A16_7_1" />
  <clone id="PREPROC-23" newId="AUTOSAR-A16_7_1-a" severity="2" />
  <category description="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" id="AUTOSAR-A17_0_1" />
  <clone id="MISRA2004-20_1_e" newId="AUTOSAR-A17_0_1-a" severity="2" />
  <clone id="CODSTA-92_b" newId="AUTOSAR-A17_0_1-b" severity="2" />
  <clone id="CODSTA-92_a" newId="AUTOSAR-A17_0_1-c" severity="2" />
  <clone id="MISRA2004-20_1_b" newId="AUTOSAR-A17_0_1-d" severity="2" />
  <clone id="MISRA2004-20_1_a" newId="AUTOSAR-A17_0_1-e" severity="2" />
  <category description="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" id="AUTOSAR-A17_1_1" />
  <clone id="MISRA2004-20_5" newId="AUTOSAR-A17_1_1-a" severity="2" />
  <category description="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" id="AUTOSAR-A17_6_1" />
  <clone id="CODSTA-CPP-95" newId="AUTOSAR-A17_6_1-a" severity="2" />
  <category description="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" id="AUTOSAR-A18_0_1" />
  <clone id="CODSTA-CPP-59" newId="AUTOSAR-A18_0_1-a" severity="2" />
  <category description="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" id="AUTOSAR-A18_0_2" />
  <clone id="MISRA2004-20_10" newId="AUTOSAR-A18_0_2-a" severity="2" />
  <category description="AUTOSAR A18-0-3 The library &lt;clocale&gt; (locale.h) and the setlocale function shall not be used" id="AUTOSAR-A18_0_3" />
  <clone id="MISRA-121_b" newId="AUTOSAR-A18_0_3-a" severity="2" />
  <clone id="MISRA-121_a" newId="AUTOSAR-A18_0_3-b" severity="2" />
  <category description="AUTOSAR A18-1-1 C-style arrays shall not be used" id="AUTOSAR-A18_1_1" />
  <clone id="STL-37" newId="AUTOSAR-A18_1_1-a" severity="2" />
  <category description="AUTOSAR A18-1-2 The std::vector&lt;bool&gt; specialization shall not be used" id="AUTOSAR-A18_1_2" />
  <clone id="STL-14" newId="AUTOSAR-A18_1_2-a" severity="2" />
  <category description="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" id="AUTOSAR-A18_1_3" />
  <clone id="CODSTA-MCPP-16_d" newId="AUTOSAR-A18_1_3-a" severity="2" />
  <category description="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4" />
  <clone id="BD-PB-ARRPTR" newId="AUTOSAR-A18_1_4-a" severity="2" />
  <category description="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6" />
  <clone id="CODSTA-MCPP-27" newId="AUTOSAR-A18_1_6-a" severity="2" />
  <category description="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" id="AUTOSAR-A18_5_1" />
  <clone id="MRM-46" newId="AUTOSAR-A18_5_1-a" severity="2" />
  <category description="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" id="AUTOSAR-A18_5_10" />
  <clone id="MRM-55" newId="AUTOSAR-A18_5_10-a" severity="2" />
  <clone id="MRM-55_b" newId="AUTOSAR-A18_5_10-b" severity="2" />
  <category description="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" id="AUTOSAR-A18_5_11" />
  <clone id="MRM-26" newId="AUTOSAR-A18_5_11-a" severity="2" />
  <clone id="MRM-27" newId="AUTOSAR-A18_5_11-b" severity="2" />
  <category description="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" id="AUTOSAR-A18_5_2" />
  <clone id="MISRA2004-20_4" newId="AUTOSAR-A18_5_2-a" severity="2" />
  <category description="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" id="AUTOSAR-A18_5_3" />
  <clone id="MRM-35" newId="AUTOSAR-A18_5_3-a" severity="2" />
  <clone id="MRM-36" newId="AUTOSAR-A18_5_3-b" severity="2" />
  <clone id="BD-RES-BADDEALLOC" newId="AUTOSAR-A18_5_3-c" severity="2" />
  <category description="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" id="AUTOSAR-A18_5_4" />
  <clone id="CODSTA-MCPP-31" newId="AUTOSAR-A18_5_4-a" severity="2" />
  <category description="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" id="AUTOSAR-A18_5_5" />
  <clone id="MRM-06" newId="AUTOSAR-A18_5_5-a" severity="2" />
  <clone id="MRM-31" newId="AUTOSAR-A18_5_5-b" severity="2" />
  <clone id="BD-PB-NEWHAN" newId="AUTOSAR-A18_5_5-c" severity="2" />
  <category description="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" id="AUTOSAR-A18_5_8" />
  <clone id="MRM-30" newId="AUTOSAR-A18_5_8-a" severity="2" />
  <category description="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" id="AUTOSAR-A18_5_9" />
  <clone id="MRM-53" newId="AUTOSAR-A18_5_9-a" severity="2" />
  <category description="AUTOSAR A18-9-1 The std::bind shall not be used" id="AUTOSAR-A18_9_1" />
  <clone id="CODSTA-MCPP-07" newId="AUTOSAR-A18_9_1-a" severity="2" />
  <category description="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" id="AUTOSAR-A18_9_2" />
  <clone id="CODSTA-MCPP-13_b" newId="AUTOSAR-A18_9_2-a" severity="2" />
  <clone id="CODSTA-MCPP-13_d" newId="AUTOSAR-A18_9_2-b" severity="2" />
  <category description="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" id="AUTOSAR-A18_9_3" />
  <clone id="CODSTA-MCPP-53" newId="AUTOSAR-A18_9_3-a" severity="2" />
  <category description="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" id="AUTOSAR-A18_9_4" />
  <clone id="BD-PB-SUBSEQFRWD" newId="AUTOSAR-A18_9_4-a" severity="2" />
  <category description="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="AUTOSAR-A2_10_1" />
  <clone id="MISRA2004-5_2_a" newId="AUTOSAR-A2_10_1-a" severity="2" />
  <clone id="MISRA2004-5_2_b" newId="AUTOSAR-A2_10_1-b" severity="2" />
  <clone id="CODSTA-CPP-83" newId="AUTOSAR-A2_10_1-c" severity="2" />
  <clone id="CODSTA-CPP-84" newId="AUTOSAR-A2_10_1-d" severity="2" />
  <clone id="CODSTA-CPP-85" newId="AUTOSAR-A2_10_1-e" severity="2" />
  <category description="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4" />
  <clone id="GLOBAL-REUSEDQUALGLOBVAR" newId="AUTOSAR-A2_10_4-a" severity="2" />
  <clone id="GLOBAL-REUSEDQUALSTATFUN" newId="AUTOSAR-A2_10_4-b" severity="2" />
  <category description="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" id="AUTOSAR-A2_10_5" />
  <clone id="GLOBAL-REUSEDEXTVAR" newId="AUTOSAR-A2_10_5-a" severity="4" />
  <clone id="GLOBAL-REUSEDEXTFUN" newId="AUTOSAR-A2_10_5-b" severity="4" />
  <clone id="GLOBAL-REUSEDSTATVAR" newId="AUTOSAR-A2_10_5-c" severity="4" />
  <clone id="GLOBAL-REUSEDSTATFUN" newId="AUTOSAR-A2_10_5-d" severity="4" />
  <category description="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" id="AUTOSAR-A2_10_6" />
  <clone id="CODSTA-CPP-87_c" newId="AUTOSAR-A2_10_6-a" severity="2" />
  <clone id="CODSTA-CPP-87_b" newId="AUTOSAR-A2_10_6-b" severity="2" />
  <clone id="CODSTA-CPP-87_a" newId="AUTOSAR-A2_10_6-c" severity="2" />
  <category description="AUTOSAR A2-11-1 Volatile keyword shall not be used" id="AUTOSAR-A2_11_1" />
  <clone id="MISRA-046_a" newId="AUTOSAR-A2_11_1-a" severity="2" />
  <category description="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1" />
  <clone id="CODSTA-CPP-60_b" newId="AUTOSAR-A2_13_1-a" severity="2" />
  <category description="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2" />
  <clone id="PB-38_b" newId="AUTOSAR-A2_13_2-a" severity="2" />
  <category description="AUTOSAR A2-13-3 Type wchar_t shall not be used" id="AUTOSAR-A2_13_3" />
  <clone id="PORT-33" newId="AUTOSAR-A2_13_3-a" severity="2" />
  <category description="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" id="AUTOSAR-A2_13_4" />
  <clone id="PB-27" newId="AUTOSAR-A2_13_4-a" severity="2" />
  <category description="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" id="AUTOSAR-A2_13_5" />
  <clone id="CODSTA-50" newId="AUTOSAR-A2_13_5-a" severity="4" />
  <category description="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6" />
  <clone id="NAMING-52" newId="AUTOSAR-A2_13_6-a" severity="2" />
  <category description="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" id="AUTOSAR-A2_3_1" />
  <clone id="MISRA-005" newId="AUTOSAR-A2_3_1-a" severity="2" />
  <category description="AUTOSAR A2-5-1 Trigraphs shall not be used" id="AUTOSAR-A2_5_1" />
  <clone id="MISRA2004-4_2" newId="AUTOSAR-A2_5_1-a" severity="2" />
  <category description="AUTOSAR A2-5-2 Digraphs shall not be used" id="AUTOSAR-A2_5_2" />
  <clone id="CODSTA-48" newId="AUTOSAR-A2_5_2-a" severity="2" />
  <category description="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" id="AUTOSAR-A2_7_1" />
  <clone id="COMMENT-13" newId="AUTOSAR-A2_7_1-a" severity="2" />
  <category description="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2" />
  <clone id="MISRA2004-2_4" newId="AUTOSAR-A2_7_2-a" severity="2" />
  <category description="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" id="AUTOSAR-A2_7_3" />
  <clone id="COMMENT-14" newId="AUTOSAR-A2_7_3-a" severity="2" />
  <clone id="COMMENT-14_b" newId="AUTOSAR-A2_7_3-b" severity="2" />
  <category description="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" id="AUTOSAR-A2_8_1" />
  <clone id="NAMING-32" newId="AUTOSAR-A2_8_1-a" severity="2" />
  <category description="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" id="AUTOSAR-A20_8_1" />
  <clone id="BD-PB-PTRVALUE" newId="AUTOSAR-A20_8_1-a" severity="2" />
  <category description="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" id="AUTOSAR-A20_8_2" />
  <clone id="CODSTA-MCPP-29" newId="AUTOSAR-A20_8_2-a" severity="2" />
  <category description="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" id="AUTOSAR-A20_8_3" />
  <clone id="CODSTA-MCPP-29" newId="AUTOSAR-A20_8_3-a" severity="2" />
  <category description="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" id="AUTOSAR-A20_8_4" />
  <clone id="CODSTA-MCPP-30" newId="AUTOSAR-A20_8_4-a" severity="2" />
  <category description="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" id="AUTOSAR-A20_8_5" />
  <clone id="CODSTA-MCPP-16_e" newId="AUTOSAR-A20_8_5-a" severity="2" />
  <category description="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" id="AUTOSAR-A20_8_6" />
  <clone id="CODSTA-MCPP-16_c" newId="AUTOSAR-A20_8_6-a" severity="2" />
  <category description="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" id="AUTOSAR-A20_8_7" />
  <clone id="BD-RES-CSP" newId="AUTOSAR-A20_8_7-a" severity="2" />
  <category description="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" id="AUTOSAR-A21_8_1" />
  <clone id="BD-API-CTYPE" newId="AUTOSAR-A21_8_1-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-A21_8_1-a-sensitiveMode=true
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" id="AUTOSAR-A23_0_1" />
  <clone id="CODSTA-MCPP-51" newId="AUTOSAR-A23_0_1-a" severity="2" />
  <category description="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" id="AUTOSAR-A23_0_2" />
  <clone id="BD-CO-ITMOD" newId="AUTOSAR-A23_0_2-a" severity="2" />
  <clone id="BD-CO-STRMOD" newId="AUTOSAR-A23_0_2-b" severity="2" />
  <category description="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" id="AUTOSAR-A25_1_1" />
  <clone id="STL-29" newId="AUTOSAR-A25_1_1-a" severity="2" />
  <category description="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" id="AUTOSAR-A25_4_1" />
  <clone id="STL-16" newId="AUTOSAR-A25_4_1-a" severity="2" />
  <category description="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" id="AUTOSAR-A26_5_1" />
  <clone id="SECURITY-02_b" newId="AUTOSAR-A26_5_1-a" severity="2" />
  <category description="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" id="AUTOSAR-A26_5_2" />
  <clone id="BD-SECURITY-RAND" newId="AUTOSAR-A26_5_2-a" severity="2" />
  <category description="AUTOSAR A27-0-1 Inputs from independent components shall be validated" id="AUTOSAR-A27_0_1" />
  <clone id="SECURITY-05" newId="AUTOSAR-A27_0_1-a" severity="2" />
  <clone id="BD-SECURITY-ARRAY" newId="AUTOSAR-A27_0_1-b" severity="2" />
  <clone id="BD-SECURITY-BUFWRITE" newId="AUTOSAR-A27_0_1-c" severity="2" />
  <clone id="BD-SECURITY-OVERFFMT" newId="AUTOSAR-A27_0_1-d" severity="2" />
  <clone id="BD-SECURITY-OVERFRD" newId="AUTOSAR-A27_0_1-e" severity="2" />
  <clone id="BD-SECURITY-OVERFWR" newId="AUTOSAR-A27_0_1-f" severity="2" />
  <clone id="BD-SECURITY-TDCMD" newId="AUTOSAR-A27_0_1-g" severity="2" />
  <clone id="BD-SECURITY-TDINPUT" newId="AUTOSAR-A27_0_1-h" severity="2" />
  <category description="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" id="AUTOSAR-A27_0_2" />
  <clone id="BD-PB-OVERFNZT" newId="AUTOSAR-A27_0_2-a" severity="2" />
  <clone id="BD-PB-OVERFWR" newId="AUTOSAR-A27_0_2-b" severity="2" />
  <clone id="SECURITY-51" newId="AUTOSAR-A27_0_2-c" severity="2" />
  <clone id="BD-SECURITY-BUFWRITE" newId="AUTOSAR-A27_0_2-e" severity="2" />
  <clone id="BD-SECURITY-OVERFWR" newId="AUTOSAR-A27_0_2-f" severity="2" />
  <category description="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" id="AUTOSAR-A27_0_3" />
  <clone id="BD-PB-STREAMINOUT" newId="AUTOSAR-A27_0_3-a" severity="2" />
  <category description="AUTOSAR A27-0-4 C-style strings shall not be used" id="AUTOSAR-A27_0_4" />
  <clone id="SECURITY-07" newId="AUTOSAR-A27_0_4-a" severity="2" />
  <clone id="SECURITY-13" newId="AUTOSAR-A27_0_4-b" severity="2" />
  <clone id="SECURITY-51" newId="AUTOSAR-A27_0_4-c" severity="2" />
  <clone id="PB-76" newId="AUTOSAR-A27_0_4-d" severity="2" />
  <clone id="SECURITY-54" newId="AUTOSAR-A27_0_4-e" severity="2" />
  <category description="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="AUTOSAR-A3_1_1" />
  <clone id="PFO-01" newId="AUTOSAR-A3_1_1-a" severity="2" />
  <clone id="PFO-01_b" newId="AUTOSAR-A3_1_1-b" severity="2" />
  <category description="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2" />
  <clone id="NAMING-53" newId="AUTOSAR-A3_1_2-a" severity="2" />
  <category description="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3" />
  <clone id="NAMING-49" newId="AUTOSAR-A3_1_3-a" severity="4" />
  <category description="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" id="AUTOSAR-A3_1_4" />
  <clone id="MISRA2004-8_12" newId="AUTOSAR-A3_1_4-a" severity="2" />
  <category description="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" id="AUTOSAR-A3_1_5" />
  <clone id="CODSTA-CPP-32" newId="AUTOSAR-A3_1_5-a" severity="2" />
  <category description="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6" />
  <clone id="OPT-23" newId="AUTOSAR-A3_1_6-a" severity="4" />
  <category description="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" id="AUTOSAR-A3_3_1" />
  <clone id="MISRA-023" newId="AUTOSAR-A3_3_1-a" severity="2" />
  <clone id="PFO-01" newId="AUTOSAR-A3_3_1-b" severity="2" />
  <category description="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2" />
  <clone id="CODSTA-MCPP-32" newId="AUTOSAR-A3_3_2-a" severity="2" />
  <category description="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" id="AUTOSAR-A3_8_1" />
  <clone id="BD-RES-FREE" newId="AUTOSAR-A3_8_1-a" severity="2" />
  <clone id="MISRA2004-17_6_a" newId="AUTOSAR-A3_8_1-b" severity="2" />
  <clone id="MISRA2004-17_6_b" newId="AUTOSAR-A3_8_1-c" severity="2" />
  <clone id="BD-PB-WRAPESC" newId="AUTOSAR-A3_8_1-d" severity="2" />
  <category description="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1" />
  <clone id="CODSTA-223" newId="AUTOSAR-A3_9_1-b" severity="2" />
  <category description="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" id="AUTOSAR-A4_10_1" />
  <clone id="CODSTA-CPP-111" newId="AUTOSAR-A4_10_1-a" severity="2" />
  <clone id="CODSTA-MCPP-04" newId="AUTOSAR-A4_10_1-b" severity="2" />
  <category description="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=" id="AUTOSAR-A4_5_1" />
  <clone id="CODSTA-70" newId="AUTOSAR-A4_5_1-a" severity="2" />
  <category description="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" id="AUTOSAR-A4_7_1" />
  <clone id="PB-56" newId="AUTOSAR-A4_7_1-a" severity="2" />
  <clone id="MISRA-043_d" newId="AUTOSAR-A4_7_1-b" severity="2" />
  <clone id="PORT-28" newId="AUTOSAR-A4_7_1-c" severity="2" />
  <clone id="MISRA-043" newId="AUTOSAR-A4_7_1-d" severity="2" />
  <clone id="MISRA2004-10_2_b" newId="AUTOSAR-A4_7_1-e" severity="2" />
  <clone id="MISRA2004-10_2_a" newId="AUTOSAR-A4_7_1-f" severity="2" />
  <clone id="MISRA-043_c" newId="AUTOSAR-A4_7_1-g" severity="2" />
  <clone id="BD-PB-INTWRAP" newId="AUTOSAR-A4_7_1-h" severity="2" />
  <clone id="BD-PB-INTDL" newId="AUTOSAR-A4_7_1-i" severity="2" />
  <clone id="BD-PB-INTUB" newId="AUTOSAR-A4_7_1-j" severity="2" />
  <clone id="BD-PB-INTVC" newId="AUTOSAR-A4_7_1-k" severity="2" />
  <category description="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1" />
  <clone id="MISRA2004-12_2_g" newId="AUTOSAR-A5_0_1-a" severity="2" />
  <clone id="MISRA2004-12_2_f" newId="AUTOSAR-A5_0_1-b" severity="2" />
  <clone id="MISRA2004-12_2_e" newId="AUTOSAR-A5_0_1-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="AUTOSAR-A5_0_1-d" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="AUTOSAR-A5_0_1-e" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="AUTOSAR-A5_0_1-f" severity="2" />
  <clone id="MISRA2004-12_2_a" newId="AUTOSAR-A5_0_1-g" severity="2" />
  <category description="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" id="AUTOSAR-A5_0_2" />
  <clone id="CODSTA-CPP-64" newId="AUTOSAR-A5_0_2-a" severity="2" />
  <category description="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" id="AUTOSAR-A5_0_3" />
  <clone id="MISRA2004-17_5" newId="AUTOSAR-A5_0_3-a" severity="2" />
  <category description="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" id="AUTOSAR-A5_0_4" />
  <clone id="PB-10" newId="AUTOSAR-A5_0_4-a" severity="2" />
  <clone id="PB-57" newId="AUTOSAR-A5_0_4-b" severity="2" />
  <clone id="BD-PB-POLARR" newId="AUTOSAR-A5_0_4-c" severity="2" />
  <category description="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" id="AUTOSAR-A5_1_1" />
  <clone id="CODSTA-26" newId="AUTOSAR-A5_1_1-a" severity="2" />
  <category description="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" id="AUTOSAR-A5_1_2" />
  <clone id="CODSTA-MCPP-15_a" newId="AUTOSAR-A5_1_2-a" severity="2" />
  <category description="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" id="AUTOSAR-A5_1_3" />
  <clone id="CODSTA-MCPP-46" newId="AUTOSAR-A5_1_3-a" severity="2" />
  <category description="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" id="AUTOSAR-A5_1_4" />
  <clone id="CODSTA-MCPP-17" newId="AUTOSAR-A5_1_4-a" severity="2" />
  <clone id="CODSTA-MCPP-17_b" newId="AUTOSAR-A5_1_4-b" severity="2" />
  <clone id="CODSTA-MCPP-17_c" newId="AUTOSAR-A5_1_4-c" severity="2" />
  <category description="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6" />
  <clone id="CODSTA-MCPP-45" newId="AUTOSAR-A5_1_6-a" severity="4" />
  <category description="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" id="AUTOSAR-A5_1_7" />
  <clone id="CODSTA-MCPP-28" newId="AUTOSAR-A5_1_7-a" severity="2" />
  <category description="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8" />
  <clone id="CODSTA-MCPP-44" newId="AUTOSAR-A5_1_8-a" severity="4" />
  <category description="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1" />
  <clone id="CODSTA-MCPP-26" newId="AUTOSAR-A5_10_1-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-A5_10_1-a-reportPotentiallyVirtualPointers=false
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" id="AUTOSAR-A5_16_1" />
  <clone id="CODSTA-224" newId="AUTOSAR-A5_16_1-a" severity="2" />
  <category description="AUTOSAR A5-2-1 dynamic_cast should not be used" id="AUTOSAR-A5_2_1" />
  <clone id="CODSTA-CPP-35" newId="AUTOSAR-A5_2_1-a" severity="4" />
  <category description="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" id="AUTOSAR-A5_2_2" />
  <clone id="CODSTA-CPP-11" newId="AUTOSAR-A5_2_2-a" severity="2" />
  <category description="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3" />
  <clone id="MISRA2004-11_5" newId="AUTOSAR-A5_2_3-a" severity="2" />
  <category description="AUTOSAR A5-2-4 reinterpret_cast shall not be used" id="AUTOSAR-A5_2_4" />
  <clone id="CODSTA-CPP-09" newId="AUTOSAR-A5_2_4-a" severity="2" />
  <category description="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" id="AUTOSAR-A5_2_5" />
  <clone id="BD-PB-ARRAY" newId="AUTOSAR-A5_2_5-a" severity="2" />
  <clone id="BD-PB-OVERFARRAY" newId="AUTOSAR-A5_2_5-b" severity="2" />
  <clone id="BD-PB-PTRARR" newId="AUTOSAR-A5_2_5-c" severity="2" />
  <clone id="BD-SECURITY-ARRAY" newId="AUTOSAR-A5_2_5-d" severity="2" />
  <clone id="BD-PB-COOB" newId="AUTOSAR-A5_2_5-e" severity="2" />
  <category description="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="AUTOSAR-A5_2_6" />
  <clone id="CODSTA-104" newId="AUTOSAR-A5_2_6-a" severity="2" />
  <category description="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" id="AUTOSAR-A5_3_1" />
  <clone id="CODSTA-CPP-104" newId="AUTOSAR-A5_3_1-a" severity="2" />
  <clone id="CODSTA-CPP-104_b" newId="AUTOSAR-A5_3_1-b" severity="2" />
  <category description="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" id="AUTOSAR-A5_3_2" />
  <clone id="BD-PB-NP" newId="AUTOSAR-A5_3_2-a" severity="2" />
  <category description="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" id="AUTOSAR-A5_3_3" />
  <clone id="PB-55" newId="AUTOSAR-A5_3_3-a" severity="2" />
  <category description="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" id="AUTOSAR-A5_5_1" />
  <clone id="CODSTA-62" newId="AUTOSAR-A5_5_1-a" severity="2" />
  <category description="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" id="AUTOSAR-A5_6_1" />
  <clone id="BD-PB-ZERO" newId="AUTOSAR-A5_6_1-a" severity="2" />
  <category description="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" id="AUTOSAR-A6_2_1" />
  <clone id="MRM-56" newId="AUTOSAR-A6_2_1-a" severity="2" />
  <clone id="MRM-57" newId="AUTOSAR-A6_2_1-b" severity="2" />
  <category description="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2" />
  <clone id="PB-77" newId="AUTOSAR-A6_2_2-a" severity="2" />
  <category description="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" id="AUTOSAR-A6_4_1" />
  <clone id="CODSTA-54" newId="AUTOSAR-A6_4_1-a" severity="2" />
  <category description="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1" />
  <clone id="CODSTA-MCPP-50" newId="AUTOSAR-A6_5_1-a" severity="2" />
  <category description="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" id="AUTOSAR-A6_5_2" />
  <clone id="CODSTA-CPP-69" newId="AUTOSAR-A6_5_2-a" severity="2" />
  <category description="AUTOSAR A6-5-3 Do statements should not be used" id="AUTOSAR-A6_5_3" />
  <clone id="CODSTA-18_b" newId="AUTOSAR-A6_5_3-a" severity="4" />
  <category description="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" id="AUTOSAR-A6_5_4" />
  <clone id="CODSTA-52" newId="AUTOSAR-A6_5_4-a" severity="4" />
  <clone id="CODSTA-53" newId="AUTOSAR-A6_5_4-b" severity="4" />
  <category description="AUTOSAR A6-6-1 The goto statement shall not be used" id="AUTOSAR-A6_6_1" />
  <clone id="MISRA2004-14_4" newId="AUTOSAR-A6_6_1-a" severity="2" />
  <category description="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" id="AUTOSAR-A7_1_1" />
  <clone id="CODSTA-CPP-53" newId="AUTOSAR-A7_1_1-a" severity="2" />
  <clone id="CODSTA-CPP-53_b" newId="AUTOSAR-A7_1_1-b" severity="2" />
  <category description="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" id="AUTOSAR-A7_1_2" />
  <clone id="CODSTA-MCPP-11_a_cpp11" newId="AUTOSAR-A7_1_2-a" severity="2" />
  <category description="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3" />
  <clone id="FORMAT-47_b" newId="AUTOSAR-A7_1_3-a" severity="2" />
  <category description="AUTOSAR A7-1-4 The register keyword shall not be used" id="AUTOSAR-A7_1_4" />
  <clone id="MISRA-028" newId="AUTOSAR-A7_1_4-a" severity="2" />
  <category description="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" id="AUTOSAR-A7_1_5" />
  <clone id="CODSTA-MCPP-40" newId="AUTOSAR-A7_1_5-a" severity="2" />
  <category description="AUTOSAR A7-1-6 The typedef specifier shall not be used" id="AUTOSAR-A7_1_6" />
  <clone id="CODSTA-MCPP-02" newId="AUTOSAR-A7_1_6-a" severity="2" />
  <category description="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" id="AUTOSAR-A7_1_7" />
  <clone id="FORMAT-06" newId="AUTOSAR-A7_1_7-a" severity="2" />
  <clone id="FORMAT-29" newId="AUTOSAR-A7_1_7-b" severity="2" />
  <clone id="FORMAT-33" newId="AUTOSAR-A7_1_7-c" severity="2" />
  <category description="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" id="AUTOSAR-A7_1_8" />
  <clone id="HICPP-7_1_3-a" newId="AUTOSAR-A7_1_8-a" severity="2" />
  <category description="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" id="AUTOSAR-A7_1_9" />
  <clone id="CODSTA-CPP-56" newId="AUTOSAR-A7_1_9-a" severity="2" />
  <category description="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1" />
  <clone id="PB-70" newId="AUTOSAR-A7_2_1-a" severity="2" />
  <category description="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" id="AUTOSAR-A7_2_2" />
  <clone id="HICPP-7_2_1-a" newId="AUTOSAR-A7_2_2-a" severity="2" />
  <category description="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" id="AUTOSAR-A7_2_3" />
  <clone id="CODSTA-MCPP-03" newId="AUTOSAR-A7_2_3-a" severity="2" />
  <category description="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" id="AUTOSAR-A7_2_4" />
  <clone id="MISRA2004-9_3" newId="AUTOSAR-A7_2_4-a" severity="2" />
  <category description="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" id="AUTOSAR-A7_2_5" />
  <clone id="CODSTA-55" newId="AUTOSAR-A7_2_5-a" severity="4" />
  <category description="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" id="AUTOSAR-A7_3_1" />
  <clone id="OOP-53" newId="AUTOSAR-A7_3_1-a" severity="2" />
  <category description="AUTOSAR A7-4-1 The asm declaration shall not be used" id="AUTOSAR-A7_4_1" />
  <clone id="CODSTA-234" newId="AUTOSAR-A7_4_1-a" severity="2" />
  <category description="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" id="AUTOSAR-A7_5_1" />
  <clone id="PB-39_b" newId="AUTOSAR-A7_5_1-a" severity="2" />
  <category description="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2" />
  <clone id="BD-PB-RECFUN" newId="AUTOSAR-A7_5_2-a" severity="2" />
  <category description="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" id="AUTOSAR-A7_6_1" />
  <clone id="BD-PB-NORETURN" newId="AUTOSAR-A7_6_1-a" severity="2" />
  <category description="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" id="AUTOSAR-A8_2_1" />
  <clone id="TEMPL-17" newId="AUTOSAR-A8_2_1-a" severity="2" />
  <category description="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" id="AUTOSAR-A8_4_1" />
  <clone id="MISRA-069" newId="AUTOSAR-A8_4_1-a" severity="2" />
  <category description="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10" />
  <clone id="BD-PB-REFPARAM" newId="AUTOSAR-A8_4_10-a" severity="2" />
  <category description="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11" />
  <clone id="CODSTA-MCPP-34" newId="AUTOSAR-A8_4_11-a" severity="2" />
  <category description="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" id="AUTOSAR-A8_4_12" />
  <clone id="HICPP-8_2_4-a" newId="AUTOSAR-A8_4_12-a" severity="2" />
  <clone id="CODSTA-MCPP-34" newId="AUTOSAR-A8_4_12-b" severity="2" />
  <clone id="CODSTA-MCPP-35" newId="AUTOSAR-A8_4_12-c" severity="2" />
  <clone id="CODSTA-MCPP-36" newId="AUTOSAR-A8_4_12-d" severity="2" />
  <category description="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" id="AUTOSAR-A8_4_13" />
  <clone id="CODSTA-MCPP-34" newId="AUTOSAR-A8_4_13-a" severity="2" />
  <clone id="CODSTA-MCPP-35" newId="AUTOSAR-A8_4_13-b" severity="2" />
  <clone id="CODSTA-MCPP-36" newId="AUTOSAR-A8_4_13-c" severity="2" />
  <category description="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2" />
  <clone id="MISRA2004-16_8_b" newId="AUTOSAR-A8_4_2-a" severity="2" />
  <category description="AUTOSAR A8-4-3 Common ways of passing parameters should be used" id="AUTOSAR-A8_4_3" />
  <clone id="CODSTA-CPP-109" newId="AUTOSAR-A8_4_3-a" severity="4" />
  <clone id="CODSTA-CPP-43" newId="AUTOSAR-A8_4_3-b" severity="4" />
  <category description="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4" />
  <clone id="CODSTA-MCPP-48" newId="AUTOSAR-A8_4_4-a" severity="4" />
  <category description="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" id="AUTOSAR-A8_4_5" />
  <clone id="CODSTA-MCPP-13" newId="AUTOSAR-A8_4_5-a" severity="2" />
  <category description="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" id="AUTOSAR-A8_4_6" />
  <clone id="CODSTA-MCPP-13" newId="AUTOSAR-A8_4_6-a" severity="2" />
  <category description="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" id="AUTOSAR-A8_4_7" />
  <clone id="CODSTA-CPP-108" newId="AUTOSAR-A8_4_7-a" severity="2" />
  <category description="AUTOSAR A8-4-8 Output parameters shall not be used" id="AUTOSAR-A8_4_8" />
  <clone id="CODSTA-CPP-103" newId="AUTOSAR-A8_4_8-a" severity="2" />
  <category description="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" id="AUTOSAR-A8_4_9" />
  <clone id="CODSTA-CPP-43" newId="AUTOSAR-A8_4_9-a" severity="2" />
  <category description="AUTOSAR A8-5-0 All memory shall be initialized before it is read" id="AUTOSAR-A8_5_0" />
  <clone id="BD-PB-NOTINIT" newId="AUTOSAR-A8_5_0-a" severity="2" />
  <category description="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" id="AUTOSAR-A8_5_1" />
  <clone id="INIT-10" newId="AUTOSAR-A8_5_1-a" severity="2" />
  <category description="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2" />
  <clone id="CODSTA-MCPP-38" newId="AUTOSAR-A8_5_2-a" severity="2" />
  <category description="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" id="AUTOSAR-A8_5_3" />
  <clone id="CODSTA-MCPP-39" newId="AUTOSAR-A8_5_3-a" severity="2" />
  <category description="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" id="AUTOSAR-A8_5_4" />
  <clone id="CODSTA-MCPP-47" newId="AUTOSAR-A8_5_4-a" severity="4" />
  <category description="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" id="AUTOSAR-A9_3_1" />
  <clone id="OOP-36" newId="AUTOSAR-A9_3_1-a" severity="2" />
  <clone id="OOP-12" newId="AUTOSAR-A9_3_1-b" severity="2" />
  <category description="AUTOSAR A9-5-1 Unions shall not be used" id="AUTOSAR-A9_5_1" />
  <clone id="MISRA2004-18_4" newId="AUTOSAR-A9_5_1-a" severity="2" />
  <category description="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" id="AUTOSAR-A9_6_1" />
  <clone id="CODSTA-233" newId="AUTOSAR-A9_6_1-a" severity="2" />
  <category description="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" id="AUTOSAR-A9_6_2" />
  <clone id="CODSTA-02" newId="AUTOSAR-A9_6_2-a" severity="2" />
  <category description="AUTOSAR M0-1-1 A project shall not contain unreachable code" id="AUTOSAR-M0_1_1" />
  <clone id="MISRA2004-14_1_c" newId="AUTOSAR-M0_1_1-a" severity="2" />
  <clone id="MISRA2004-14_1_b" newId="AUTOSAR-M0_1_1-b" severity="2" />
  <clone id="MISRA2004-14_1_a" newId="AUTOSAR-M0_1_1-c" severity="2" />
  <clone id="MISRA2004-14_1_g" newId="AUTOSAR-M0_1_1-d" severity="2" />
  <clone id="MISRA2004-14_1_f" newId="AUTOSAR-M0_1_1-e" severity="2" />
  <clone id="MISRA2004-14_1_e" newId="AUTOSAR-M0_1_1-f" severity="2" />
  <clone id="MISRA2004-14_1_d" newId="AUTOSAR-M0_1_1-g" severity="2" />
  <category description="AUTOSAR M0-1-10 Every defined function should be called at least once" id="AUTOSAR-M0_1_10" />
  <clone id="GLOBAL-UNUSEDFUNC" newId="AUTOSAR-M0_1_10-a" severity="4" />
  <clone id="OPT-30" newId="AUTOSAR-M0_1_10-b" severity="4" />
  <category description="AUTOSAR M0-1-2 A project shall not contain infeasible paths" id="AUTOSAR-M0_1_2" />
  <clone id="MISRA2004-13_7_ab" newId="AUTOSAR-M0_1_2-a" severity="2" />
  <clone id="MISRA2004-13_7_v" newId="AUTOSAR-M0_1_2-b" severity="2" />
  <clone id="MISRA2004-13_7_z" newId="AUTOSAR-M0_1_2-c" severity="2" />
  <clone id="MISRA2004-13_7_n" newId="AUTOSAR-M0_1_2-d" severity="2" />
  <clone id="MISRA2004-13_7_s" newId="AUTOSAR-M0_1_2-e" severity="2" />
  <clone id="MISRA2004-13_7_t" newId="AUTOSAR-M0_1_2-f" severity="2" />
  <clone id="MISRA2004-13_7_u" newId="AUTOSAR-M0_1_2-g" severity="2" />
  <clone id="MISRA2004-13_7_j" newId="AUTOSAR-M0_1_2-h" severity="2" />
  <clone id="MISRA2004-13_7_l" newId="AUTOSAR-M0_1_2-i" severity="2" />
  <clone id="MISRA2004-13_7_m" newId="AUTOSAR-M0_1_2-j" severity="2" />
  <clone id="MISRA2004-13_7_w" newId="AUTOSAR-M0_1_2-k" severity="2" />
  <clone id="MISRA2004-13_7_x" newId="AUTOSAR-M0_1_2-l" severity="2" />
  <clone id="MISRA2004-13_7_y" newId="AUTOSAR-M0_1_2-m" severity="2" />
  <clone id="MISRA2004-13_7_ac" newId="AUTOSAR-M0_1_2-n" severity="2" />
  <clone id="MISRA2004-13_7_ad" newId="AUTOSAR-M0_1_2-o" severity="2" />
  <clone id="MISRA2004-13_7_ae" newId="AUTOSAR-M0_1_2-p" severity="2" />
  <clone id="MISRA2004-13_7_af" newId="AUTOSAR-M0_1_2-q" severity="2" />
  <clone id="MISRA2004-13_7_a" newId="AUTOSAR-M0_1_2-r" severity="2" />
  <clone id="MISRA2004-13_7_aa" newId="AUTOSAR-M0_1_2-s" severity="2" />
  <clone id="MISRA2004-13_7_ak" newId="AUTOSAR-M0_1_2-t" severity="2" />
  <clone id="MISRA2004-13_7_b" newId="AUTOSAR-M0_1_2-u" severity="2" />
  <clone id="MISRA2004-13_7_c" newId="AUTOSAR-M0_1_2-v" severity="2" />
  <clone id="MISRA2004-13_7_d" newId="AUTOSAR-M0_1_2-w" severity="2" />
  <clone id="MISRA2004-13_7_ag" newId="AUTOSAR-M0_1_2-x" severity="2" />
  <clone id="MISRA2004-13_7_ah" newId="AUTOSAR-M0_1_2-y" severity="2" />
  <clone id="MISRA2004-13_7_ai" newId="AUTOSAR-M0_1_2-z" severity="2" />
  <clone id="MISRA2004-13_7_aj" newId="AUTOSAR-M0_1_2-aa" severity="2" />
  <clone id="MISRA2004-13_7_k" newId="AUTOSAR-M0_1_2-ab" severity="2" />
  <clone id="BD-PB-CC" newId="AUTOSAR-M0_1_2-ac" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M0_1_2-ac-violateOnNoIf=false
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR M0-1-3 A project shall not contain unused variables" id="AUTOSAR-M0_1_3" />
  <clone id="OPT-05" newId="AUTOSAR-M0_1_3-c" severity="2" />
  <clone id="GLOBAL-UNUSEDEXTVAR" newId="AUTOSAR-M0_1_3-d" severity="2" />
  <clone id="OPT-02_b" newId="AUTOSAR-M0_1_3-f" severity="2" />
  <clone id="OPT-43_b" newId="AUTOSAR-M0_1_3-g" severity="2" />
  <category description="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4" />
  <clone id="GLOBAL-ONEUSEVAR" newId="AUTOSAR-M0_1_4-a" severity="2" />
  <category description="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8" />
  <clone id="OPT-32" newId="AUTOSAR-M0_1_8-a" severity="2" />
  <clone id="OPT-32_b" newId="AUTOSAR-M0_1_8-b" severity="2" />
  <category description="AUTOSAR M0-1-9 There shall be no dead code" id="AUTOSAR-M0_1_9" />
  <clone id="MISRA2004-14_2" newId="AUTOSAR-M0_1_9-a" severity="2" />
  <category description="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1" />
  <clone id="MISRA2004-18_2_b" newId="AUTOSAR-M0_2_1-a" severity="2" />
  <clone id="PB-42" newId="AUTOSAR-M0_2_1-b" severity="2" />
  <category description="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" id="AUTOSAR-M0_3_1" />
  <clone id="BD-PB-PTRSUB" newId="AUTOSAR-M0_3_1-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M0_3_1-a-aggressiveMode=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-OVERFWR" newId="AUTOSAR-M0_3_1-b" severity="2" />
  <clone id="BD-PB-PTRCMP" newId="AUTOSAR-M0_3_1-c" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M0_3_1-c-aggressiveMode=true
        AUTOSAR-M0_3_1-c-reportOnComparisonFunctions=false
        AUTOSAR-M0_3_1-c-reportOnRelationalOperators=true
        AUTOSAR-M0_3_1-c-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-ARRAY" newId="AUTOSAR-M0_3_1-d" severity="2" />
  <clone id="BD-PB-ZERO" newId="AUTOSAR-M0_3_1-e" severity="2" />
  <clone id="BD-PB-NP" newId="AUTOSAR-M0_3_1-f" severity="2" />
  <clone id="BD-PB-OVERFNZT" newId="AUTOSAR-M0_3_1-g" severity="2" />
  <clone id="BD-PB-OVERFFMT" newId="AUTOSAR-M0_3_1-h" severity="2" />
  <clone id="BD-PB-OVERFRD" newId="AUTOSAR-M0_3_1-i" severity="2" />
  <category description="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" id="AUTOSAR-M0_3_2" />
  <clone id="MISRA2004-16_10" newId="AUTOSAR-M0_3_2-a" severity="2" />
  <category description="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2" />
  <clone id="COMMENT-10" newId="AUTOSAR-M0_4_2-a" severity="2" />
  <category description="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1" />
  <clone id="OOP-47" newId="AUTOSAR-M10_1_1-a" severity="4" />
  <category description="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2" />
  <clone id="GLOBAL-VIRTBASECLASS" newId="AUTOSAR-M10_1_2-a" severity="2" />
  <category description="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3" />
  <clone id="OOP-41" newId="AUTOSAR-M10_1_3-a" severity="2" />
  <category description="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1" />
  <clone id="CODSTA-CPP-92" newId="AUTOSAR-M10_2_1-a" severity="4" />
  <category description="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3" />
  <clone id="OOP-43" newId="AUTOSAR-M10_3_3-a" severity="2" />
  <category description="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" id="AUTOSAR-M11_0_1" />
  <clone id="OOP-48" newId="AUTOSAR-M11_0_1-a" severity="2" />
  <category description="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" id="AUTOSAR-M12_1_1" />
  <clone id="BD-PB-VCTOR" newId="AUTOSAR-M12_1_1-a" severity="2" />
  <clone id="BD-PB-VDTOR" newId="AUTOSAR-M12_1_1-b" severity="2" />
  <category description="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3" />
  <clone id="TEMPL-11" newId="AUTOSAR-M14_5_3-a" severity="2" />
  <category description="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;" id="AUTOSAR-M14_6_1" />
  <clone id="TEMPL-12" newId="AUTOSAR-M14_6_1-a" severity="2" />
  <category description="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3" />
  <clone id="EXCEPT-10" newId="AUTOSAR-M15_0_3-a" severity="2" />
  <category description="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1" />
  <clone id="EXCEPT-11" newId="AUTOSAR-M15_1_1-a" severity="2" />
  <category description="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2" />
  <clone id="EXCEPT-12" newId="AUTOSAR-M15_1_2-a" severity="2" />
  <category description="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="AUTOSAR-M15_1_3" />
  <clone id="EXCEPT-07" newId="AUTOSAR-M15_1_3-a" severity="2" />
  <category description="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" id="AUTOSAR-M15_3_1" />
  <clone id="EXCEPT-08" newId="AUTOSAR-M15_3_1-a" severity="2" />
  <category description="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="AUTOSAR-M15_3_3" />
  <clone id="EXCEPT-16" newId="AUTOSAR-M15_3_3-a" severity="2" />
  <category description="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4" />
  <clone id="EXCEPT-18" newId="AUTOSAR-M15_3_4-a" severity="2" />
  <clone id="EXCEPT-13" newId="AUTOSAR-M15_3_4-b" severity="2" />
  <category description="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6" />
  <clone id="EXCEPT-17" newId="AUTOSAR-M15_3_6-a" severity="2" />
  <category description="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7" />
  <clone id="EXCEPT-24" newId="AUTOSAR-M15_3_7-a" severity="2" />
  <category description="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" id="AUTOSAR-M16_0_1" />
  <clone id="MISRA2004-19_1" newId="AUTOSAR-M16_0_1-a" severity="2" />
  <category description="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" id="AUTOSAR-M16_0_2" />
  <clone id="MISRA2004-19_5" newId="AUTOSAR-M16_0_2-a" severity="2" />
  <category description="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" id="AUTOSAR-M16_0_5" />
  <clone id="MISRA2004-19_9" newId="AUTOSAR-M16_0_5-a" severity="2" />
  <category description="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6" />
  <clone id="MISRA2004-19_10" newId="AUTOSAR-M16_0_6-a" severity="2" />
  <category description="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" id="AUTOSAR-M16_0_7" />
  <clone id="MISRA2004-19_11_b" newId="AUTOSAR-M16_0_7-a" severity="2" />
  <category description="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" id="AUTOSAR-M16_0_8" />
  <clone id="MISRA2004-19_16" newId="AUTOSAR-M16_0_8-a" severity="2" />
  <category description="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1" />
  <clone id="MISRA2004-19_14" newId="AUTOSAR-M16_1_1-a" severity="2" />
  <category description="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2" />
  <clone id="MISRA2004-19_17" newId="AUTOSAR-M16_1_2-a" severity="2" />
  <category description="AUTOSAR M16-2-3 Include guards shall be provided" id="AUTOSAR-M16_2_3" />
  <clone id="PFO-02" newId="AUTOSAR-M16_2_3-a" severity="2" />
  <category description="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" id="AUTOSAR-M16_3_1" />
  <clone id="MISRA2004-19_12" newId="AUTOSAR-M16_3_1-a" severity="2" />
  <category description="AUTOSAR M16-3-2 The # and ## operators should not be used" id="AUTOSAR-M16_3_2" />
  <clone id="MISRA2004-19_13" newId="AUTOSAR-M16_3_2-a" severity="4" />
  <category description="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2" />
  <clone id="CODSTA-92" newId="AUTOSAR-M17_0_2-a" severity="2" />
  <category description="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3" />
  <clone id="CODSTA-93" newId="AUTOSAR-M17_0_3-a" severity="2" />
  <category description="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" id="AUTOSAR-M17_0_5" />
  <clone id="MISRA2004-20_7" newId="AUTOSAR-M17_0_5-a" severity="2" />
  <clone id="MISRA2004-20_7_b" newId="AUTOSAR-M17_0_5-b" severity="2" />
  <category description="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used" id="AUTOSAR-M18_0_3" />
  <clone id="PB-75" newId="AUTOSAR-M18_0_3-a" severity="2" />
  <clone id="PB-75_b" newId="AUTOSAR-M18_0_3-b" severity="2" />
  <clone id="SECURITY-48_b" newId="AUTOSAR-M18_0_3-c" severity="2" />
  <clone id="SECURITY-52" newId="AUTOSAR-M18_0_3-d" severity="2" />
  <category description="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime&gt; shall not be used" id="AUTOSAR-M18_0_4" />
  <clone id="MISRA2004-20_12" newId="AUTOSAR-M18_0_4-a" severity="2" />
  <clone id="MISRA2004-20_12_b" newId="AUTOSAR-M18_0_4-b" severity="2" />
  <clone id="MISRA2004-20_12_c" newId="AUTOSAR-M18_0_4-c" severity="2" />
  <category description="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring&gt; shall not be used" id="AUTOSAR-M18_0_5" />
  <clone id="PB-37" newId="AUTOSAR-M18_0_5-a" severity="2" />
  <category description="AUTOSAR M18-2-1 The macro offsetof shall not be used" id="AUTOSAR-M18_2_1" />
  <clone id="MISRA2004-20_6" newId="AUTOSAR-M18_2_1-a" severity="2" />
  <category description="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal&gt; shall not be used" id="AUTOSAR-M18_7_1" />
  <clone id="MISRA2004-20_8_b" newId="AUTOSAR-M18_7_1-a" severity="2" />
  <clone id="MISRA2004-20_8" newId="AUTOSAR-M18_7_1-b" severity="2" />
  <category description="AUTOSAR M19-3-1 The error indicator errno shall not be used" id="AUTOSAR-M19_3_1" />
  <clone id="MISRA2004-20_5" newId="AUTOSAR-M19_3_1-a" severity="2" />
  <category description="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1" />
  <clone id="NAMING-47" newId="AUTOSAR-M2_10_1-a" severity="2" />
  <category description="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" id="AUTOSAR-M2_13_2" />
  <clone id="MISRA2004-7_1_a" newId="AUTOSAR-M2_13_2-a" severity="2" />
  <clone id="MISRA2004-7_1_b" newId="AUTOSAR-M2_13_2-b" severity="2" />
  <category description="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3" />
  <clone id="CODSTA-68" newId="AUTOSAR-M2_13_3-a" severity="2" />
  <category description="AUTOSAR M2-13-4 Literal suffixes shall be upper case" id="AUTOSAR-M2_13_4" />
  <clone id="CODSTA-51" newId="AUTOSAR-M2_13_4-a" severity="2" />
  <category description="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1" />
  <clone id="MISRA2004-2_3" newId="AUTOSAR-M2_7_1-a" severity="2" />
  <category description="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio&gt; shall not be used" id="AUTOSAR-M27_0_1" />
  <clone id="MISRA2004-20_9" newId="AUTOSAR-M27_0_1-a" severity="2" />
  <category description="AUTOSAR M3-1-2 Functions shall not be declared at block scope" id="AUTOSAR-M3_1_2" />
  <clone id="MISRA2004-8_6" newId="AUTOSAR-M3_1_2-a" severity="2" />
  <category description="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1" />
  <clone id="GLOBAL-COMPATDECLS" newId="AUTOSAR-M3_2_1-a" severity="2" />
  <category description="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2" />
  <clone id="GLOBAL-ONEDEFRULE" newId="AUTOSAR-M3_2_2-a" severity="2" />
  <category description="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3" />
  <clone id="GLOBAL-ONEFILEDECL" newId="AUTOSAR-M3_2_3-a" severity="2" />
  <category description="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" id="AUTOSAR-M3_2_4" />
  <clone id="GLOBAL-ONEEXTERNDEF" newId="AUTOSAR-M3_2_4-a" severity="2" />
  <clone id="GLOBAL-NOEXTERNDEF" newId="AUTOSAR-M3_2_4-b" severity="2" />
  <category description="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="AUTOSAR-M3_3_2" />
  <clone id="CODSTA-81" newId="AUTOSAR-M3_3_2-a" severity="2" />
  <category description="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="AUTOSAR-M3_4_1" />
  <clone id="OPT-01" newId="AUTOSAR-M3_4_1-a" severity="2" />
  <clone id="OPT-45" newId="AUTOSAR-M3_4_1-b" severity="2" />
  <category description="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1" />
  <clone id="CODSTA-67" newId="AUTOSAR-M3_9_1-a" severity="2" />
  <category description="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3" />
  <clone id="MISRA2004-12_12" newId="AUTOSAR-M3_9_3-a" severity="2" />
  <category description="AUTOSAR M4-10-1 NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1" />
  <clone id="CODSTA-CPP-62" newId="AUTOSAR-M4_10_1-a" severity="2" />
  <category description="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2" />
  <clone id="CODSTA-CPP-63" newId="AUTOSAR-M4_10_2-a" severity="2" />
  <category description="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="AUTOSAR-M4_5_1" />
  <clone id="MISRA2004-12_6_b" newId="AUTOSAR-M4_5_1-a" severity="2" />
  <category description="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="AUTOSAR-M4_5_3" />
  <clone id="CODSTA-69" newId="AUTOSAR-M4_5_3-a" severity="2" />
  <category description="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10" />
  <clone id="MISRA2004-10_5" newId="AUTOSAR-M5_0_10-a" severity="2" />
  <category description="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" id="AUTOSAR-M5_0_11" />
  <clone id="MISRA2004-6_1" newId="AUTOSAR-M5_0_11-a" severity="2" />
  <category description="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" id="AUTOSAR-M5_0_12" />
  <clone id="MISRA2004-6_2" newId="AUTOSAR-M5_0_12-a" severity="2" />
  <category description="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14" />
  <clone id="CODSTA-CPP-65" newId="AUTOSAR-M5_0_14-a" severity="2" />
  <category description="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" id="AUTOSAR-M5_0_15" />
  <clone id="MISRA2004-17_4" newId="AUTOSAR-M5_0_15-a" severity="2" />
  <category description="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16" />
  <clone id="BD-PB-ARRAY" newId="AUTOSAR-M5_0_16-a" severity="2" />
  <clone id="BD-PB-PTRARR" newId="AUTOSAR-M5_0_16-b" severity="2" />
  <category description="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="AUTOSAR-M5_0_17" />
  <clone id="BD-PB-PTRSUB" newId="AUTOSAR-M5_0_17-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M5_0_17-a-aggressiveMode=true
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR M5-0-18 &gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="AUTOSAR-M5_0_18" />
  <clone id="BD-PB-PTRCMP" newId="AUTOSAR-M5_0_18-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M5_0_18-a-aggressiveMode=true
        AUTOSAR-M5_0_18-a-reportOnComparisonFunctions=false
        AUTOSAR-M5_0_18-a-reportOnRelationalOperators=true
        AUTOSAR-M5_0_18-a-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <category description="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" id="AUTOSAR-M5_0_2" />
  <clone id="MISRA2004-12_1_a" newId="AUTOSAR-M5_0_2-a" severity="4" />
  <clone id="MISRA2004-12_1_b" newId="AUTOSAR-M5_0_2-b" severity="4" />
  <clone id="MISRA2004-12_1_c" newId="AUTOSAR-M5_0_2-c" severity="4" />
  <clone id="MISRA2004-12_1_d" newId="AUTOSAR-M5_0_2-d" severity="4" />
  <clone id="MISRA2004-12_1_e" newId="AUTOSAR-M5_0_2-e" severity="4" />
  <clone id="MISRA2004-12_1_f" newId="AUTOSAR-M5_0_2-f" severity="4" />
  <category description="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20" />
  <clone id="CODSTA-66" newId="AUTOSAR-M5_0_20-a" severity="2" />
  <category description="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21" />
  <clone id="CODSTA-63" newId="AUTOSAR-M5_0_21-a" severity="2" />
  <clone id="CODSTA-63_a" newId="AUTOSAR-M5_0_21-b" severity="2" />
  <category description="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" id="AUTOSAR-M5_0_3" />
  <clone id="MISRA2004-10_1_f" newId="AUTOSAR-M5_0_3-a" severity="2" />
  <clone id="MISRA2004-10_1_c" newId="AUTOSAR-M5_0_3-b" severity="2" />
  <clone id="MISRA2004-10_1_i" newId="AUTOSAR-M5_0_3-c" severity="2" />
  <category description="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" id="AUTOSAR-M5_0_4" />
  <clone id="MISRA2004-10_1_a" newId="AUTOSAR-M5_0_4-a" severity="2" />
  <category description="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" id="AUTOSAR-M5_0_5" />
  <clone id="MISRA2004-10_1_b" newId="AUTOSAR-M5_0_5-a" severity="2" />
  <clone id="MISRA2004-10_2_a" newId="AUTOSAR-M5_0_5-b" severity="2" />
  <category description="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="AUTOSAR-M5_0_6" />
  <clone id="CODSTA-222" newId="AUTOSAR-M5_0_6-a" severity="2" />
  <clone id="MISRA2004-10_2_b" newId="AUTOSAR-M5_0_6-b" severity="2" />
  <clone id="MISRA2004-10_2_d" newId="AUTOSAR-M5_0_6-c" severity="2" />
  <category description="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" id="AUTOSAR-M5_0_7" />
  <clone id="CODSTA-198_b" newId="AUTOSAR-M5_0_7-a" severity="2" />
  <clone id="MISRA2004-10_3" newId="AUTOSAR-M5_0_7-b" severity="2" />
  <category description="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="AUTOSAR-M5_0_8" />
  <clone id="MISRA2004-10_3" newId="AUTOSAR-M5_0_8-a" severity="2" />
  <clone id="CODSTA-198" newId="AUTOSAR-M5_0_8-b" severity="2" />
  <category description="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="AUTOSAR-M5_0_9" />
  <clone id="MISRA2004-10_3" newId="AUTOSAR-M5_0_9-a" severity="2" />
  <category description="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" id="AUTOSAR-M5_14_1" />
  <clone id="MISRA2004-12_4_a" newId="AUTOSAR-M5_14_1-a" severity="2" />
  <category description="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" id="AUTOSAR-M5_17_1" />
  <clone id="CODSTA-CPP-91" newId="AUTOSAR-M5_17_1-a" severity="2" />
  <category description="AUTOSAR M5-18-1 The comma operator shall not be used" id="AUTOSAR-M5_18_1" />
  <clone id="MISRA2004-12_10" newId="AUTOSAR-M5_18_1-a" severity="2" />
  <category description="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" id="AUTOSAR-M5_19_1" />
  <clone id="PB-66_b" newId="AUTOSAR-M5_19_1-a" severity="2" />
  <clone id="PB-66_a" newId="AUTOSAR-M5_19_1-b" severity="2" />
  <category description="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10" />
  <clone id="CODSTA-232" newId="AUTOSAR-M5_2_10-a" severity="2" />
  <category description="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" id="AUTOSAR-M5_2_11" />
  <clone id="CODSTA-CPP-80" newId="AUTOSAR-M5_2_11-a" severity="2" />
  <clone id="CODSTA-CPP-08" newId="AUTOSAR-M5_2_11-b" severity="2" />
  <category description="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12" />
  <clone id="PB-41" newId="AUTOSAR-M5_2_12-a" severity="2" />
  <category description="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2" />
  <clone id="OOP-50" newId="AUTOSAR-M5_2_2-a" severity="2" />
  <category description="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3" />
  <clone id="OOP-49" newId="AUTOSAR-M5_2_3-a" severity="4" />
  <category description="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6" />
  <clone id="CODSTA-62" newId="AUTOSAR-M5_2_6-a" severity="2" />
  <category description="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8" />
  <clone id="CODSTA-65" newId="AUTOSAR-M5_2_8-a" severity="2" />
  <category description="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9" />
  <clone id="MISRA2004-11_3_a" newId="AUTOSAR-M5_2_9-a" severity="2" />
  <category description="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1" />
  <clone id="CODSTA-CPP-67" newId="AUTOSAR-M5_3_1-a" severity="2" />
  <category description="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2" />
  <clone id="MISRA2004-12_9" newId="AUTOSAR-M5_3_2-a" severity="2" />
  <category description="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3" />
  <clone id="CODSTA-CPP-68" newId="AUTOSAR-M5_3_3-a" severity="2" />
  <category description="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" id="AUTOSAR-M5_3_4" />
  <clone id="MISRA2004-12_3" newId="AUTOSAR-M5_3_4-a" severity="2" />
  <clone id="MISRA2004-12_3_b" newId="AUTOSAR-M5_3_4-b" severity="2" />
  <clone id="MISRA2004-12_3_c" newId="AUTOSAR-M5_3_4-c" severity="2" />
  <category description="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="AUTOSAR-M5_8_1" />
  <clone id="BD-PB-BADSHIFT" newId="AUTOSAR-M5_8_1-a" severity="2">
    <defParameters>
      <![CDATA[
        AUTOSAR-M5_8_1-a-violateOnNegativeShifted=false
        AUTOSAR-M5_8_1-a-violateOnNegativeShift=true
        AUTOSAR-M5_8_1-a-violateOnTooBigShift=true
        AUTOSAR-M5_8_1-a-lhsBitSizeStrategy=MCPP
        AUTOSAR-M5_8_1-a-violateOnOverflow=false
        AUTOSAR-M5_8_1-a-violateOnUnsignedOverflow=false
      ]]>
    </defParameters>
  </clone>
  <clone id="CODSTA-302" newId="AUTOSAR-M5_8_1-b" severity="2" />
  <category description="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" id="AUTOSAR-M6_2_1" />
  <clone id="MISRA2004-13_1" newId="AUTOSAR-M6_2_1-a" severity="2" />
  <category description="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="AUTOSAR-M6_2_2" />
  <clone id="MISRA2004-13_3" newId="AUTOSAR-M6_2_2-a" severity="2" />
  <category description="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="AUTOSAR-M6_2_3" />
  <clone id="MISRA2004-14_3" newId="AUTOSAR-M6_2_3-a" severity="2" />
  <category description="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" id="AUTOSAR-M6_3_1" />
  <clone id="MISRA2004-14_8" newId="AUTOSAR-M6_3_1-a" severity="2" />
  <category description="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="AUTOSAR-M6_4_1" />
  <clone id="MISRA2004-14_9" newId="AUTOSAR-M6_4_1-a" severity="2" />
  <category description="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" id="AUTOSAR-M6_4_2" />
  <clone id="MISRA2004-14_10" newId="AUTOSAR-M6_4_2-a" severity="2" />
  <category description="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" id="AUTOSAR-M6_4_3" />
  <clone id="CODSTA-64" newId="AUTOSAR-M6_4_3-a" severity="2" />
  <clone id="CODSTA-61" newId="AUTOSAR-M6_4_3-b" severity="2" />
  <clone id="MISRA2004-15_1" newId="AUTOSAR-M6_4_3-c" severity="2" />
  <clone id="MISRA2004-15_5" newId="AUTOSAR-M6_4_3-d" severity="2" />
  <clone id="MISRA2004-15_4" newId="AUTOSAR-M6_4_3-e" severity="2" />
  <category description="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4" />
  <clone id="MISRA2004-15_1" newId="AUTOSAR-M6_4_4-a" severity="2" />
  <category description="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5" />
  <clone id="CODSTA-64" newId="AUTOSAR-M6_4_5-a" severity="2" />
  <category description="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" id="AUTOSAR-M6_4_6" />
  <clone id="CODSTA-61" newId="AUTOSAR-M6_4_6-a" severity="2" />
  <category description="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" id="AUTOSAR-M6_4_7" />
  <clone id="MISRA2004-15_4" newId="AUTOSAR-M6_4_7-a" severity="2" />
  <category description="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=" id="AUTOSAR-M6_5_2" />
  <clone id="CODSTA-CPP-70" newId="AUTOSAR-M6_5_2-a" severity="2" />
  <category description="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" id="AUTOSAR-M6_5_3" />
  <clone id="MISRA2004-13_6" newId="AUTOSAR-M6_5_3-a" severity="2" />
  <category description="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4" />
  <clone id="CODSTA-CPP-71" newId="AUTOSAR-M6_5_4-a" severity="2" />
  <category description="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5" />
  <clone id="CODSTA-CPP-72" newId="AUTOSAR-M6_5_5-a" severity="2" />
  <category description="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6" />
  <clone id="CODSTA-CPP-73" newId="AUTOSAR-M6_5_6-a" severity="2" />
  <category description="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1" />
  <clone id="CODSTA-78" newId="AUTOSAR-M6_6_1-a" severity="2" />
  <category description="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2" />
  <clone id="CODSTA-77" newId="AUTOSAR-M6_6_2-a" severity="2" />
  <category description="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" id="AUTOSAR-M6_6_3" />
  <clone id="CODSTA-80" newId="AUTOSAR-M6_6_3-a" severity="2" />
  <category description="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" id="AUTOSAR-M7_1_2" />
  <clone id="MISRA2004-16_7_b" newId="AUTOSAR-M7_1_2-a" severity="2" />
  <clone id="MISRA2004-16_7" newId="AUTOSAR-M7_1_2-b" severity="2" />
  <clone id="CODSTA-CPP-43" newId="AUTOSAR-M7_1_2-c" severity="2" />
  <category description="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="AUTOSAR-M7_3_1" />
  <clone id="CODSTA-CPP-36" newId="AUTOSAR-M7_3_1-a" severity="2" />
  <category description="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2" />
  <clone id="CODSTA-76" newId="AUTOSAR-M7_3_2-a" severity="2" />
  <category description="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3" />
  <clone id="CODSTA-CPP-74" newId="AUTOSAR-M7_3_3-a" severity="2" />
  <category description="AUTOSAR M7-3-4 Using-directives shall not be used" id="AUTOSAR-M7_3_4" />
  <clone id="CODSTA-CPP-75" newId="AUTOSAR-M7_3_4-a" severity="2" />
  <category description="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6" />
  <clone id="CODSTA-CPP-90" newId="AUTOSAR-M7_3_6-a" severity="2" />
  <category description="AUTOSAR M7-4-1 All usage of assembler shall be documented" id="AUTOSAR-M7_4_1" />
  <clone id="COMMENT-09" newId="AUTOSAR-M7_4_1-a" severity="2" />
  <category description="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2" />
  <clone id="CODSTA-73" newId="AUTOSAR-M7_4_2-a" severity="2" />
  <category description="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" id="AUTOSAR-M7_4_3" />
  <clone id="CODSTA-114" newId="AUTOSAR-M7_4_3-a" severity="2" />
  <category description="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="AUTOSAR-M7_5_1" />
  <clone id="MISRA2004-17_6_a" newId="AUTOSAR-M7_5_1-a" severity="2" />
  <category description="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2" />
  <clone id="MISRA2004-17_6_b" newId="AUTOSAR-M7_5_2-a" severity="2" />
  <category description="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="AUTOSAR-M8_0_1" />
  <clone id="FORMAT-33" newId="AUTOSAR-M8_0_1-a" severity="2" />
  <category description="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="AUTOSAR-M8_3_1" />
  <clone id="OOP-13" newId="AUTOSAR-M8_3_1-a" severity="2" />
  <category description="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="AUTOSAR-M8_4_2" />
  <clone id="MISRA2004-16_4" newId="AUTOSAR-M8_4_2-a" severity="2" />
  <category description="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" id="AUTOSAR-M8_4_4" />
  <clone id="MISRA2004-16_9" newId="AUTOSAR-M8_4_4-a" severity="2" />
  <category description="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="AUTOSAR-M8_5_2" />
  <clone id="INIT-16" newId="AUTOSAR-M8_5_2-a" severity="2" />
  <clone id="MISRA2004-9_2_b" newId="AUTOSAR-M8_5_2-b" severity="2" />
  <clone id="MISRA2004-9_2_c" newId="AUTOSAR-M8_5_2-c" severity="2" />
  <category description="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1" />
  <clone id="CODSTA-CPP-77" newId="AUTOSAR-M9_3_1-a" severity="2" />
  <category description="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3" />
  <clone id="CODSTA-CPP-78" newId="AUTOSAR-M9_3_3-a" severity="2" />
  <category description="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4" />
  <clone id="CODSTA-71" newId="AUTOSAR-M9_6_4-a" severity="2" />
  <!-- AUTOSAR end -->
  <!-- CERT C begin -->
  <category description="SEI CERT C" id="CERT_C" />
  <category description="CERT-API00_C (REC) Functions should validate their parameters" id="CERT_C-API00" />
  <clone id="CODSTA-86" newId="CERT_C-API00-a" severity="3" />
  <category description="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" id="CERT_C-API01" />
  <clone id="BD-PB-OVERFWR" newId="CERT_C-API01-a" severity="3" />
  <clone id="SECURITY-12" newId="CERT_C-API01-b" severity="3" />
  <category description="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" id="CERT_C-API02" />
  <clone id="SECURITY-12" newId="CERT_C-API02-a" severity="2" />
  <clone id="SECURITY-07" newId="CERT_C-API02-b" severity="2" />
  <category description="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" id="CERT_C-ARR01" />
  <clone id="PB-32" newId="CERT_C-ARR01-a" severity="1" />
  <category description="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" id="CERT_C-ARR02" />
  <clone id="CODSTA-200" newId="CERT_C-ARR02-a" severity="2" />
  <category description="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" id="CERT_C-ARR30" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-ARR30-a" severity="2" />
  <category description="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" id="CERT_C-ARR32" />
  <clone id="BD-PB-VLASIZE" newId="CERT_C-ARR32-a" severity="2" />
  <category description="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" id="CERT_C-ARR36" />
  <clone id="BD-PB-PTRSUB" newId="CERT_C-ARR36-a" severity="2">
    <defParameters>
      <![CDATA[
        CERT_C-ARR36-a-aggressiveMode=false
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-PTRCMP" newId="CERT_C-ARR36-b" severity="2">
    <defParameters>
      <![CDATA[
        CERT_C-ARR36-b-aggressiveMode=false
        CERT_C-ARR36-b-reportOnComparisonFunctions=false
        CERT_C-ARR36-b-reportOnRelationalOperators=true
        CERT_C-ARR36-b-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <category description="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" id="CERT_C-ARR37" />
  <clone id="PB-51" newId="CERT_C-ARR37-a" severity="2" />
  <category description="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" id="CERT_C-ARR38" />
  <clone id="BD-PB-OVERFRD" newId="CERT_C-ARR38-a" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="CERT_C-ARR38-b" severity="1" />
  <clone id="BD-PB-OVERFFMT" newId="CERT_C-ARR38-c" severity="1" />
  <clone id="BD-PB-OVERFNZT" newId="CERT_C-ARR38-d" severity="1" />
  <category description="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-ARR39-a" severity="2" />
  <clone id="MISRA-101" newId="CERT_C-ARR39-b" severity="2" />
  <clone id="CODSTA-189" newId="CERT_C-ARR39-c" severity="2" />
  <category description="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" id="CERT_C-CON01" />
  <clone id="BD-TRS-LOCK" newId="CERT_C-CON01-a" severity="3" />
  <category description="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" id="CERT_C-CON02" />
  <clone id="MISRA-046_a" newId="CERT_C-CON02-a" severity="2" />
  <category description="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" id="CERT_C-CON05" />
  <clone id="BD-TRS-TSHL" newId="CERT_C-CON05-a" severity="3" />
  <category description="CERT-CON30_C (RULE) Clean up thread-specific storage" id="CERT_C-CON30" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-CON30-a" severity="3" />
  <category description="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" id="CERT_C-CON31" />
  <clone id="BD-TRS-DSTRLOCK" newId="CERT_C-CON31-a" severity="3" />
  <clone id="BD-RES-FREE" newId="CERT_C-CON31-b" severity="3" />
  <clone id="BD-RES-INVFREE" newId="CERT_C-CON31-c" severity="3" />
  <category description="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" id="CERT_C-CON32" />
  <clone id="BD-TRS-BITLOCK" newId="CERT_C-CON32-a" severity="2" />
  <category description="CERT-CON33_C (RULE) Avoid race conditions when using library functions" id="CERT_C-CON33" />
  <clone id="SECURITY-25" newId="CERT_C-CON33-a" severity="3" />
  <category description="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" id="CERT_C-CON34" />
  <clone id="BD-TRS-ARG" newId="CERT_C-CON34-a" severity="3" />
  <category description="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" id="CERT_C-CON35" />
  <clone id="BD-TRS-ORDER" newId="CERT_C-CON35-a" severity="3" />
  <category description="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36" />
  <clone id="CODSTA-191" newId="CERT_C-CON36-a" severity="3" />
  <category description="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" id="CERT_C-CON37" />
  <clone id="MISRA2004-20_8_b" newId="CERT_C-CON37-a" severity="2" />
  <category description="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" id="CERT_C-CON38" />
  <clone id="SECURITY-49" newId="CERT_C-CON38-a" severity="3" />
  <category description="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39" />
  <clone id="BD-TRS-JOINDETACH" newId="CERT_C-CON39-a" severity="2" />
  <category description="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40" />
  <clone id="CODSTA-195" newId="CERT_C-CON40-a" severity="2" />
  <category description="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41" />
  <clone id="CODSTA-194" newId="CERT_C-CON41-a" severity="3" />
  <category description="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" id="CERT_C-CON43" />
  <clone id="BD-TRS-MLOCK" newId="CERT_C-CON43-a" severity="3" />
  <category description="CERT-DCL00_C (REC) Const-qualify immutable objects" id="CERT_C-DCL00" />
  <clone id="CODSTA-CPP-53" newId="CERT_C-DCL00-a" severity="3" />
  <clone id="CODSTA-CPP-53_b" newId="CERT_C-DCL00-b" severity="3" />
  <category description="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" id="CERT_C-DCL01" />
  <clone id="MISRA2004-5_2_a" newId="CERT_C-DCL01-a" severity="3" />
  <clone id="MISRA2004-5_2_b" newId="CERT_C-DCL01-b" severity="3" />
  <category description="CERT-DCL02_C (REC) Use visually distinct identifiers" id="CERT_C-DCL02" />
  <clone id="NAMING-54" newId="CERT_C-DCL02-a" severity="3" />
  <category description="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" id="CERT_C-DCL04" />
  <clone id="FORMAT-33" newId="CERT_C-DCL04-a" severity="3" />
  <category description="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" id="CERT_C-DCL05" />
  <clone id="MISRA2004-16_7_b" newId="CERT_C-DCL05-a" severity="3" />
  <category description="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" id="CERT_C-DCL06" />
  <clone id="CODSTA-29" newId="CERT_C-DCL06-a" severity="3" />
  <category description="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" id="CERT_C-DCL10" />
  <clone id="PB-50" newId="CERT_C-DCL10-a" severity="2" />
  <category description="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" id="CERT_C-DCL11" />
  <clone id="PB-45" newId="CERT_C-DCL11-a" severity="2" />
  <clone id="PB-46" newId="CERT_C-DCL11-b" severity="2" />
  <clone id="PB-47" newId="CERT_C-DCL11-c" severity="2" />
  <clone id="PB-48" newId="CERT_C-DCL11-d" severity="2" />
  <clone id="PB-49" newId="CERT_C-DCL11-e" severity="2" />
  <clone id="PB-50" newId="CERT_C-DCL11-f" severity="2" />
  <category description="CERT-DCL12_C (REC) Implement abstract data types using opaque types" id="CERT_C-DCL12" />
  <clone id="CODSTA-115" newId="CERT_C-DCL12-a" severity="3" />
  <category description="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" id="CERT_C-DCL13" />
  <clone id="MISRA2004-16_7" newId="CERT_C-DCL13-a" severity="3" />
  <category description="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" id="CERT_C-DCL15" />
  <clone id="MISRA-023" newId="CERT_C-DCL15-a" severity="3" />
  <category description="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" id="CERT_C-DCL16" />
  <clone id="PORT-01_b" newId="CERT_C-DCL16-a" severity="3" />
  <category description="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" id="CERT_C-DCL18" />
  <clone id="CODSTA-117" newId="CERT_C-DCL18-a" severity="3" />
  <clone id="MISRA2004-7_1_a" newId="CERT_C-DCL18-b" severity="3" />
  <category description="CERT-DCL19_C (REC) Minimize the scope of variables and functions" id="CERT_C-DCL19" />
  <clone id="OPT-01" newId="CERT_C-DCL19-a" severity="3" />
  <category description="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" id="CERT_C-DCL20" />
  <clone id="MISRA2004-16_6" newId="CERT_C-DCL20-a" severity="1" />
  <category description="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" id="CERT_C-DCL22" />
  <clone id="BD-PB-VOVR" newId="CERT_C-DCL22-a" severity="3">
    <defParameters>
      <![CDATA[
        CERT_C-DCL22-a-reportOnVariableDefaultDeclarations=false
      ]]>
    </defParameters>
  </clone>
  <category description="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" id="CERT_C-DCL30" />
  <clone id="MISRA2004-17_6_a" newId="CERT_C-DCL30-a" severity="2" />
  <clone id="MISRA2004-17_6_b" newId="CERT_C-DCL30-b" severity="2" />
  <category description="CERT-DCL31_C (RULE) Declare identifiers before using them" id="CERT_C-DCL31" />
  <clone id="MISRA-020" newId="CERT_C-DCL31-a" severity="3" />
  <category description="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" id="CERT_C-DCL36" />
  <clone id="MISRA-024" newId="CERT_C-DCL36-a" severity="2" />
  <category description="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" id="CERT_C-DCL37" />
  <clone id="NAMING-33_d" newId="CERT_C-DCL37-b" severity="3" />
  <clone id="NAMING-33_e" newId="CERT_C-DCL37-c" severity="3" />
  <clone id="CODSTA-92_c" newId="CERT_C-DCL37-d" severity="3" />
  <clone id="CODSTA-92_d" newId="CERT_C-DCL37-e" severity="3" />
  <clone id="CODSTA-92_e" newId="CERT_C-DCL37-f" severity="3" />
  <clone id="NAMING-33_c" newId="CERT_C-DCL37-g" severity="3" />
  <category description="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" id="CERT_C-DCL38" />
  <clone id="CODSTA-192" newId="CERT_C-DCL38-a" severity="3" />
  <category description="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" id="CERT_C-DCL39" />
  <clone id="SECURITY-46" newId="CERT_C-DCL39-a" severity="3" />
  <category description="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" id="CERT_C-DCL40" />
  <clone id="GLOBAL-COMPATDECLS" newId="CERT_C-DCL40-a" severity="3" />
  <clone id="MISRA2004-8_4" newId="CERT_C-DCL40-b" severity="3" />
  <category description="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" id="CERT_C-DCL41" />
  <clone id="MISRA2004-15_0_b" newId="CERT_C-DCL41-a" severity="3" />
  <category description="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" id="CERT_C-ENV01" />
  <clone id="SECURITY-07" newId="CERT_C-ENV01-a" severity="1" />
  <clone id="SECURITY-12" newId="CERT_C-ENV01-b" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="CERT_C-ENV01-c" severity="1" />
  <category description="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" id="CERT_C-ENV02" />
  <clone id="SECURITY-03" newId="CERT_C-ENV02-a" severity="3" />
  <category description="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" id="CERT_C-ENV30" />
  <clone id="CODSTA-185_a" newId="CERT_C-ENV30-a" severity="3" />
  <category description="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31" />
  <clone id="BD-PB-INVENV" newId="CERT_C-ENV31-a" severity="3" />
  <category description="CERT-ENV32_C (RULE) All exit handlers must return normally" id="CERT_C-ENV32" />
  <clone id="BD-PB-EXITHAN" newId="CERT_C-ENV32-a" severity="1" />
  <category description="CERT-ENV33_C (RULE) Do not call system()" id="CERT_C-ENV33" />
  <clone id="SECURITY-48" newId="CERT_C-ENV33-a" severity="1" />
  <category description="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" id="CERT_C-ENV34" />
  <clone id="BD-PB-INVRET" newId="CERT_C-ENV34-a" severity="3" />
  <category description="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" id="CERT_C-ERR01" />
  <clone id="MISRA2004-20_5" newId="CERT_C-ERR01-a" severity="2" />
  <category description="CERT-ERR02_C (REC) Avoid in-band error indicators" id="CERT_C-ERR02" />
  <clone id="CODSTA-110" newId="CERT_C-ERR02-a" severity="3" />
  <category description="CERT-ERR04_C (REC) Choose an appropriate termination strategy" id="CERT_C-ERR04" />
  <clone id="PB-75" newId="CERT_C-ERR04-a" severity="3" />
  <clone id="PB-75_b" newId="CERT_C-ERR04-b" severity="3" />
  <clone id="PB-75_c" newId="CERT_C-ERR04-c" severity="3" />
  <category description="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" id="CERT_C-ERR05" />
  <clone id="PB-75" newId="CERT_C-ERR05-a" severity="3" />
  <clone id="PB-75_b" newId="CERT_C-ERR05-b" severity="3" />
  <clone id="PB-75_c" newId="CERT_C-ERR05-c" severity="3" />
  <category description="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" id="CERT_C-ERR06" />
  <clone id="CODSTA-199" newId="CERT_C-ERR06-a" severity="3" />
  <category description="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" id="CERT_C-ERR07" />
  <clone id="MISRA2004-20_10" newId="CERT_C-ERR07-a" severity="2" />
  <clone id="CODSTA-235" newId="CERT_C-ERR07-b" severity="2" />
  <category description="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" id="CERT_C-ERR30" />
  <clone id="BD-PB-ERRNO" newId="CERT_C-ERR30-a" severity="2" />
  <category description="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" id="CERT_C-ERR32" />
  <clone id="BD-PB-SIGHAN" newId="CERT_C-ERR32-b" severity="3" />
  <category description="CERT-ERR33_C (RULE) Detect and handle standard library errors" id="CERT_C-ERR33" />
  <clone id="CODSTA-226_a" newId="CERT_C-ERR33-a" severity="1" />
  <clone id="BD-PB-CHECKRETGEN" newId="CERT_C-ERR33-d" severity="1">
    <defParameters>
      <![CDATA[
        CERT_C-ERR33-d-libraryMethods=true
        CERT_C-ERR33-d-reportUnvalidatedViolations=false
        CERT_C-ERR33-d-userMethods=active\=true|name\=aligned_alloc|type\=*|defsInSubClasses\=false|;active\=true|name\=asctime_s|type\=*|defsInSubClasses\=false|;active\=true|name\=at_quick_exit|type\=*|defsInSubClasses\=false|;active\=true|name\=atexit|type\=*|defsInSubClasses\=false|;active\=true|name\=bsearch|type\=*|defsInSubClasses\=false|;active\=true|name\=bsearch_s|type\=*|defsInSubClasses\=false|;active\=true|name\=btowc,c16rtomb|type\=*|defsInSubClasses\=false|;active\=true|name\=c32rtomb|type\=*|defsInSubClasses\=false|;active\=true|name\=calloc|type\=*|defsInSubClasses\=false|;active\=true|name\=clock|type\=*|defsInSubClasses\=false|;active\=true|name\=cnd_broadcast|type\=*|defsInSubClasses\=false|;active\=true|name\=cnd_init|type\=*|defsInSubClasses\=false|;active\=true|name\=cnd_signal|type\=*|defsInSubClasses\=false|;active\=true|name\=cnd_timedwait|type\=*|defsInSubClasses\=false|;active\=true|name\=cnd_wait|type\=*|defsInSubClasses\=false|;active\=true|name\=ctime_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fclose|type\=*|defsInSubClasses\=false|;active\=true|name\=fflush|type\=*|defsInSubClasses\=false|;active\=true|name\=fgetc|type\=*|defsInSubClasses\=false|;active\=true|name\=fgetpos|type\=*|defsInSubClasses\=false|;active\=true|name\=fgets,fgetwc|type\=*|defsInSubClasses\=false|;active\=true|name\=fopen|type\=*|defsInSubClasses\=false|;active\=true|name\=fopen_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=fprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fputc|type\=*|defsInSubClasses\=false|;active\=true|name\=fputs|type\=*|defsInSubClasses\=false|;active\=true|name\=fputwc|type\=*|defsInSubClasses\=false|;active\=true|name\=fputws|type\=*|defsInSubClasses\=false|;active\=true|name\=fread|type\=*|defsInSubClasses\=false|;active\=true|name\=freopen|type\=*|defsInSubClasses\=false|;active\=true|name\=freopen_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=fscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fseek|type\=*|defsInSubClasses\=false|;active\=true|name\=fsetpos|type\=*|defsInSubClasses\=false|;active\=true|name\=ftell|type\=*|defsInSubClasses\=false|;active\=true|name\=fwprintf,fwprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=fwrite|type\=*|defsInSubClasses\=false|;active\=true|name\=fwscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=fwscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=getc|type\=*|defsInSubClasses\=false|;active\=true|name\=getchar|type\=*|defsInSubClasses\=false|;active\=true|name\=getenv|type\=*|defsInSubClasses\=false|;active\=true|name\=getenv_s|type\=*|defsInSubClasses\=false|;active\=true|name\=gets_s|type\=*|defsInSubClasses\=false|;active\=true|name\=getwc|type\=*|defsInSubClasses\=false|;active\=true|name\=getwchar|type\=*|defsInSubClasses\=false|;active\=true|name\=gmtime|type\=*|defsInSubClasses\=false|;active\=true|name\=gmtime_s|type\=*|defsInSubClasses\=false|;active\=true|name\=localtime|type\=*|defsInSubClasses\=false|;active\=true|name\=localtime_s|type\=*|defsInSubClasses\=false|;active\=true|name\=malloc,mblen|type\=*|defsInSubClasses\=false|;active\=true|name\=mbrlen|type\=*|defsInSubClasses\=false|;active\=true|name\=mbrtoc16|type\=*|defsInSubClasses\=false|;active\=true|name\=mbrtoc32|type\=*|defsInSubClasses\=false|;active\=true|name\=mbrtowc|type\=*|defsInSubClasses\=false|;active\=true|name\=mbsrtowcs|type\=*|defsInSubClasses\=false|;active\=true|name\=mbsrtowcs_s|type\=*|defsInSubClasses\=false|;active\=true|name\=mbstowcs|type\=*|defsInSubClasses\=false|;active\=true|name\=mbstowcs_s|type\=*|defsInSubClasses\=false|;active\=true|name\=mbtowc|type\=*|defsInSubClasses\=false|;active\=true|name\=memchr|type\=*|defsInSubClasses\=false|;active\=true|name\=mktime|type\=*|defsInSubClasses\=false|;active\=true|name\=mtx_init|type\=*|defsInSubClasses\=false|;active\=true|name\=mtx_lock|type\=*|defsInSubClasses\=false|;active\=true|name\=mtx_timedlock|type\=*|defsInSubClasses\=false|;active\=true|name\=rename,mtx_trylock|type\=*|defsInSubClasses\=false|;active\=true|name\=mtx_unlock|type\=*|defsInSubClasses\=false|;active\=true|name\=printf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=putc|type\=*|defsInSubClasses\=false|;active\=true|name\=putwc|type\=*|defsInSubClasses\=false|;active\=true|name\=raise|type\=*|defsInSubClasses\=false|;active\=true|name\=realloc|type\=*|defsInSubClasses\=false|;active\=true|name\=remove|type\=*|defsInSubClasses\=false|;active\=true|name\=setlocale|type\=*|defsInSubClasses\=false|;active\=true|name\=setvbuf|type\=*|defsInSubClasses\=false|;active\=true|name\=scanf|type\=*|defsInSubClasses\=false|;active\=true|name\=scanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=signal|type\=*|defsInSubClasses\=false|;active\=true|name\=snprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=snprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=sprintf,sprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=sscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=sscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=strchr|type\=*|defsInSubClasses\=false|;active\=true|name\=strerror_s|type\=*|defsInSubClasses\=false|;active\=true|name\=strftime|type\=*|defsInSubClasses\=false|;active\=true|name\=strpbrk|type\=*|defsInSubClasses\=false|;active\=true|name\=strrchr|type\=*|defsInSubClasses\=false|;active\=true|name\=strstr|type\=*|defsInSubClasses\=false|;active\=true|name\=strtod|type\=*|defsInSubClasses\=false|;active\=true|name\=strtof|type\=*|defsInSubClasses\=false|;active\=true|name\=strtoimax|type\=*|defsInSubClasses\=false|;active\=true|name\=strtok|type\=*|defsInSubClasses\=false|;active\=true|name\=strtok_s|type\=*|defsInSubClasses\=false|;active\=true|name\=strtol|type\=*|defsInSubClasses\=false|;active\=true|name\=strtold|type\=*|defsInSubClasses\=false|;active\=true|name\=strtoll,strtoumax|type\=*|defsInSubClasses\=false|;active\=true|name\=strtoul|type\=*|defsInSubClasses\=false|;active\=true|name\=strtoull|type\=*|defsInSubClasses\=false|;active\=true|name\=strxfrm|type\=*|defsInSubClasses\=false|;active\=true|name\=swprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=swprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=swscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=time|type\=*|defsInSubClasses\=false|;active\=true|name\=swscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=thrd_create|type\=*|defsInSubClasses\=false|;active\=true|name\=thrd_detach|type\=*|defsInSubClasses\=false|;active\=true|name\=thrd_join|type\=*|defsInSubClasses\=false|;active\=true|name\=thrd_sleep|type\=*|defsInSubClasses\=false|;active\=true|name\=timespec_get,tmpfile|type\=*|defsInSubClasses\=false|;active\=true|name\=tmpfile_s|type\=*|defsInSubClasses\=false|;active\=true|name\=tmpnam|type\=*|defsInSubClasses\=false|;active\=true|name\=tmpnam_s|type\=*|defsInSubClasses\=false|;active\=true|name\=tss_create|type\=*|defsInSubClasses\=false|;active\=true|name\=tss_get|type\=*|defsInSubClasses\=false|;active\=true|name\=tss_set|type\=*|defsInSubClasses\=false|;active\=true|name\=ungetc|type\=*|defsInSubClasses\=false|;active\=true|name\=ungetwc|type\=*|defsInSubClasses\=false|;active\=true|name\=vfprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=vfprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vfscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=vfscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vfwprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=vfwprintf_s,vfwscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=vfwscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=vscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vsnprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=vsnprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vsprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=vsprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vsscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=vsscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vswprintf|type\=*|defsInSubClasses\=false|;active\=true|name\=vswprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vswscanf,vswscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vwprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=vwscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=vwscanf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wcrtomb|type\=*|defsInSubClasses\=false|;active\=true|name\=wcschr|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsftime|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstok|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsrchr|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsrtombs|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsrtombs_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsstr|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstod|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstof|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstoimax|type\=*|defsInSubClasses\=false|;active\=true|name\=wcspbrk,wcstok_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstol|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstold|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstoll|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstombs|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstombs_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstoumax|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstoul|type\=*|defsInSubClasses\=false|;active\=true|name\=wcstoull|type\=*|defsInSubClasses\=false|;active\=true|name\=wcsxfrm|type\=*|defsInSubClasses\=false|;active\=true|name\=wctob|type\=*|defsInSubClasses\=false|;active\=true|name\=wctomb|type\=*|defsInSubClasses\=false|;active\=true|name\=wctomb_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wctrans|type\=*|defsInSubClasses\=false|;active\=true|name\=wctype|type\=*|defsInSubClasses\=false|;active\=true|name\=wmemchr,wprintf_s|type\=*|defsInSubClasses\=false|;active\=true|name\=wscanf|type\=*|defsInSubClasses\=false|;active\=true|name\=wscanf_s|type\=*|defsInSubClasses\=false|;
        CERT_C-ERR33-d-validatingMethods=active\=true|name\=validate*|type\=*|defsInSubClasses\=true|;active\=true|name\=operator>|type\=*|defsInSubClasses\=true|;active\=true|name\=operator<|type\=*|defsInSubClasses\=true|;active\=true|name\=operator*\=|type\=*|defsInSubClasses\=true|;
      ]]>
    </defParameters>
  </clone>
  <clone id="MRM-39" newId="CERT_C-ERR33-e" severity="1" />
  <category description="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" id="CERT_C-ERR34" />
  <clone id="MISRA2004-20_10" newId="CERT_C-ERR34-a" severity="3" />
  <category description="CERT-EXP00_C (REC) Use parentheses for precedence of operation" id="CERT_C-EXP00" />
  <clone id="CODSTA-97" newId="CERT_C-EXP00-a" severity="3" />
  <category description="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" id="CERT_C-EXP02" />
  <clone id="MISRA2004-12_4_a" newId="CERT_C-EXP02-a" severity="3" />
  <category description="CERT-EXP05_C (REC) Do not cast away a const qualification" id="CERT_C-EXP05" />
  <clone id="MISRA2004-11_5" newId="CERT_C-EXP05-a" severity="2" />
  <category description="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" id="CERT_C-EXP08" />
  <clone id="MISRA-101" newId="CERT_C-EXP08-a" severity="2" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-EXP08-b" severity="2" />
  <category description="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" id="CERT_C-EXP10" />
  <clone id="MISRA2004-12_2_a" newId="CERT_C-EXP10-a" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="CERT_C-EXP10-b" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="CERT_C-EXP10-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="CERT_C-EXP10-d" severity="2" />
  <category description="CERT-EXP12_C (REC) Do not ignore values returned by functions" id="CERT_C-EXP12" />
  <clone id="CODSTA-122_a" newId="CERT_C-EXP12-a" severity="3" />
  <clone id="CODSTA-122_b" newId="CERT_C-EXP12-b" severity="3" />
  <category description="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" id="CERT_C-EXP14" />
  <clone id="MISRA-043_b" newId="CERT_C-EXP14-a" severity="3" />
  <category description="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" id="CERT_C-EXP15" />
  <clone id="CODSTA-57" newId="CERT_C-EXP15-a" severity="3" />
  <category description="CERT-EXP16_C (REC) Do not compare function pointers to constant values" id="CERT_C-EXP16" />
  <clone id="PB-63" newId="CERT_C-EXP16-a" severity="2" />
  <category description="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" id="CERT_C-EXP19" />
  <clone id="MISRA2004-14_8" newId="CERT_C-EXP19-a" severity="2" />
  <category description="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" id="CERT_C-EXP20" />
  <clone id="CODSTA-60" newId="CERT_C-EXP20-a" severity="1" />
  <clone id="MISRA2004-13_2" newId="CERT_C-EXP20-b" severity="1" />
  <category description="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" id="CERT_C-EXP30" />
  <clone id="MISRA2004-12_2_a" newId="CERT_C-EXP30-a" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="CERT_C-EXP30-b" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="CERT_C-EXP30-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="CERT_C-EXP30-d" severity="2" />
  <category description="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" id="CERT_C-EXP32" />
  <clone id="MISRA2004-11_5" newId="CERT_C-EXP32-a" severity="2" />
  <category description="CERT-EXP33_C (RULE) Do not read uninitialized memory" id="CERT_C-EXP33" />
  <clone id="BD-PB-NOTINIT" newId="CERT_C-EXP33-a" severity="1" />
  <category description="CERT-EXP34_C (RULE) Do not dereference null pointers" id="CERT_C-EXP34" />
  <clone id="BD-PB-NP" newId="CERT_C-EXP34-a" severity="1" />
  <category description="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" id="CERT_C-EXP35" />
  <clone id="CODSTA-196" newId="CERT_C-EXP35-a" severity="3" />
  <category description="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" id="CERT_C-EXP36" />
  <clone id="CODSTA-230" newId="CERT_C-EXP36-a" severity="3" />
  <category description="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" id="CERT_C-EXP37" />
  <clone id="CODSTA-124_b" newId="CERT_C-EXP37-a" severity="3" />
  <clone id="SECURITY-42" newId="CERT_C-EXP37-b" severity="3" />
  <clone id="MISRA-071_b" newId="CERT_C-EXP37-d" severity="3" />
  <category description="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" id="CERT_C-EXP39" />
  <clone id="MISRA2004-10_1_b" newId="CERT_C-EXP39-a" severity="3" />
  <clone id="MISRA2004-11_4" newId="CERT_C-EXP39-b" severity="3" />
  <clone id="BD-PB-OVERFARRAY" newId="CERT_C-EXP39-c" severity="3" />
  <clone id="BD-SECURITY-OVERFFMT" newId="CERT_C-EXP39-d" severity="3" />
  <clone id="BD-SECURITY-OVERFRD" newId="CERT_C-EXP39-e" severity="3" />
  <clone id="BD-SECURITY-OVERFWR" newId="CERT_C-EXP39-f" severity="3" />
  <category description="CERT-EXP40_C (RULE) Do not modify constant objects" id="CERT_C-EXP40" />
  <clone id="MISRA2004-11_5" newId="CERT_C-EXP40-a" severity="3" />
  <category description="CERT-EXP42_C (RULE) Do not compare padding data" id="CERT_C-EXP42" />
  <clone id="MRM-07" newId="CERT_C-EXP42-a" severity="2" />
  <category description="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" id="CERT_C-EXP43" />
  <clone id="CODSTA-121" newId="CERT_C-EXP43-a" severity="3" />
  <category description="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" id="CERT_C-EXP44" />
  <clone id="MISRA2004-12_3_b" newId="CERT_C-EXP44-a" severity="3" />
  <clone id="MISRA2004-12_3_c" newId="CERT_C-EXP44-b" severity="3" />
  <category description="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" id="CERT_C-EXP45" />
  <clone id="PB-35" newId="CERT_C-EXP45-b" severity="2" />
  <clone id="MISRA2004-13_1" newId="CERT_C-EXP45-d" severity="2" />
  <category description="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" id="CERT_C-EXP46" />
  <clone id="MISRA2004-12_6_b" newId="CERT_C-EXP46-b" severity="2" />
  <category description="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47" />
  <clone id="PB-72" newId="CERT_C-EXP47-a" severity="2" />
  <category description="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" id="CERT_C-FIO01" />
  <clone id="SECURITY-27" newId="CERT_C-FIO01-a" severity="1" />
  <clone id="SECURITY-55" newId="CERT_C-FIO01-c" severity="1" />
  <category description="CERT-FIO21_C (REC) Do not create temporary files in shared directories" id="CERT_C-FIO21" />
  <clone id="SECURITY-39" newId="CERT_C-FIO21-b" severity="2" />
  <category description="CERT-FIO22_C (REC) Close files before spawning processes" id="CERT_C-FIO22" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-FIO22-a" severity="3" />
  <category description="CERT-FIO24_C (REC) Do not open a file that is already open" id="CERT_C-FIO24" />
  <clone id="BD-TRS-FRC" newId="CERT_C-FIO24-a" severity="3" />
  <category description="CERT-FIO30_C (RULE) Exclude user input from format strings" id="CERT_C-FIO30" />
  <clone id="SECURITY-05" newId="CERT_C-FIO30-a" severity="1" />
  <clone id="SECURITY-08" newId="CERT_C-FIO30-b" severity="1" />
  <clone id="SECURITY-36" newId="CERT_C-FIO30-c" severity="1" />
  <category description="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" id="CERT_C-FIO32" />
  <clone id="BD-SECURITY-TDFNAMES" newId="CERT_C-FIO32-a" severity="3" />
  <category description="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" id="CERT_C-FIO34" />
  <clone id="BD-PB-EOFCOMP" newId="CERT_C-FIO34-a" severity="1" />
  <category description="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" id="CERT_C-FIO37" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-FIO37-a" severity="1" />
  <category description="CERT-FIO38_C (RULE) Do not copy a FILE object" id="CERT_C-FIO38" />
  <clone id="CODSTA-166_a" newId="CERT_C-FIO38-a" severity="3" />
  <category description="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39" />
  <clone id="BD-PB-STREAMINOUT" newId="CERT_C-FIO39-a" severity="2" />
  <category description="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40" />
  <clone id="BD-PB-FGETS" newId="CERT_C-FIO40-a" severity="3" />
  <category description="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" id="CERT_C-FIO41" />
  <clone id="CODSTA-228_a" newId="CERT_C-FIO41-a" severity="3" />
  <clone id="CODSTA-228_b" newId="CERT_C-FIO41-b" severity="3" />
  <category description="CERT-FIO42_C (RULE) Close files when they are no longer needed" id="CERT_C-FIO42" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-FIO42-a" severity="3" />
  <category description="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44" />
  <clone id="BD-PB-FSETPOS" newId="CERT_C-FIO44-a" severity="3" />
  <category description="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" id="CERT_C-FIO45" />
  <clone id="BD-TRS-FRC" newId="CERT_C-FIO45-a" severity="2" />
  <category description="CERT-FIO46_C (RULE) Do not access a closed file" id="CERT_C-FIO46" />
  <clone id="BD-RES-FREE" newId="CERT_C-FIO46-a" severity="3" />
  <category description="CERT-FIO47_C (RULE) Use valid format strings" id="CERT_C-FIO47" />
  <clone id="PB-45" newId="CERT_C-FIO47-a" severity="2" />
  <clone id="PB-46" newId="CERT_C-FIO47-b" severity="2" />
  <clone id="PB-47" newId="CERT_C-FIO47-c" severity="2" />
  <clone id="PB-48" newId="CERT_C-FIO47-d" severity="2" />
  <clone id="PB-49" newId="CERT_C-FIO47-e" severity="2" />
  <clone id="PB-50" newId="CERT_C-FIO47-f" severity="2" />
  <category description="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" id="CERT_C-FLP00" />
  <clone id="MISRA2004-13_3" newId="CERT_C-FLP00-a" severity="3" />
  <category description="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" id="CERT_C-FLP02" />
  <clone id="MISRA2004-13_3" newId="CERT_C-FLP02-a" severity="3" />
  <category description="CERT-FLP03_C (REC) Detect and handle floating-point errors" id="CERT_C-FLP03" />
  <clone id="BD-PB-ZERO" newId="CERT_C-FLP03-a" severity="3" />
  <clone id="MISRA2004-10_2_b" newId="CERT_C-FLP03-b" severity="3" />
  <clone id="MISRA2004-10_2_c" newId="CERT_C-FLP03-c" severity="3" />
  <clone id="MISRA2004-10_2_d" newId="CERT_C-FLP03-d" severity="3" />
  <category description="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" id="CERT_C-FLP06" />
  <clone id="MISRA-043_c" newId="CERT_C-FLP06-a" severity="2" />
  <clone id="MISRA-043_d" newId="CERT_C-FLP06-b" severity="2" />
  <category description="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" id="CERT_C-FLP30" />
  <clone id="MISRA-065" newId="CERT_C-FLP30-a" severity="2" />
  <category description="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" id="CERT_C-FLP32" />
  <clone id="BD-API-VALPARAM" newId="CERT_C-FLP32-a" severity="2" />
  <category description="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" id="CERT_C-FLP34" />
  <clone id="MISRA2004-10_2_b" newId="CERT_C-FLP34-a" severity="3" />
  <clone id="MISRA2004-10_2_d" newId="CERT_C-FLP34-b" severity="3" />
  <category description="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" id="CERT_C-FLP36" />
  <clone id="MISRA-043_c" newId="CERT_C-FLP36-a" severity="3" />
  <clone id="MISRA-043_d" newId="CERT_C-FLP36-b" severity="3" />
  <category description="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" id="CERT_C-FLP37" />
  <clone id="CODSTA-190" newId="CERT_C-FLP37-c" severity="3" />
  <category description="CERT-INT02_C (REC) Understand integer conversion rules" id="CERT_C-INT02" />
  <clone id="MISRA-043" newId="CERT_C-INT02-a" severity="2" />
  <clone id="MISRA-043_b" newId="CERT_C-INT02-b" severity="2" />
  <category description="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" id="CERT_C-INT04" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="CERT_C-INT04-a" severity="2" />
  <clone id="BD-SECURITY-OVERFRD" newId="CERT_C-INT04-b" severity="2" />
  <clone id="BD-SECURITY-OVERFWR" newId="CERT_C-INT04-c" severity="2" />
  <category description="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" id="CERT_C-INT05" />
  <clone id="SECURITY-13" newId="CERT_C-INT05-a" severity="3" />
  <category description="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" id="CERT_C-INT07" />
  <clone id="MISRA2004-6_1" newId="CERT_C-INT07-a" severity="2" />
  <clone id="MISRA2004-6_2" newId="CERT_C-INT07-b" severity="2" />
  <category description="CERT-INT08_C (REC) Verify that all integer values are in range" id="CERT_C-INT08" />
  <clone id="BD-PB-INTDL" newId="CERT_C-INT08-a" severity="3" />
  <clone id="BD-PB-INTUB" newId="CERT_C-INT08-b" severity="3" />
  <clone id="BD-PB-INTVC" newId="CERT_C-INT08-c" severity="3" />
  <clone id="BD-PB-INTWRAP" newId="CERT_C-INT08-d" severity="3" />
  <category description="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" id="CERT_C-INT09" />
  <clone id="MISRA2004-9_3" newId="CERT_C-INT09-a" severity="3" />
  <category description="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" id="CERT_C-INT10" />
  <clone id="CODSTA-229" newId="CERT_C-INT10-a" severity="3" />
  <category description="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" id="CERT_C-INT12" />
  <clone id="MISRA2004-6_4" newId="CERT_C-INT12-a" severity="3" />
  <category description="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" id="CERT_C-INT13" />
  <clone id="CODSTA-307" newId="CERT_C-INT13-a" severity="2" />
  <clone id="CODSTA-308" newId="CERT_C-INT13-b" severity="2" />
  <category description="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15" />
  <clone id="PB-78" newId="CERT_C-INT15-a" severity="2" />
  <category description="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" id="CERT_C-INT16" />
  <clone id="CODSTA-63" newId="CERT_C-INT16-a" severity="3" />
  <clone id="CODSTA-63_a" newId="CERT_C-INT16-b" severity="3" />
  <category description="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" id="CERT_C-INT18" />
  <clone id="PB-65" newId="CERT_C-INT18-a" severity="1" />
  <clone id="PB-65_b" newId="CERT_C-INT18-b" severity="1" />
  <clone id="MISRA-048_a" newId="CERT_C-INT18-c" severity="1" />
  <category description="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" id="CERT_C-INT30" />
  <clone id="BD-PB-INTWRAP" newId="CERT_C-INT30-a" severity="2" />
  <clone id="PB-66_a" newId="CERT_C-INT30-b" severity="2" />
  <clone id="PB-66_b" newId="CERT_C-INT30-c" severity="2" />
  <category description="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" id="CERT_C-INT31" />
  <clone id="CODSTA-161_a" newId="CERT_C-INT31-a" severity="2" />
  <clone id="CODSTA-161_b" newId="CERT_C-INT31-b" severity="2" />
  <clone id="CODSTA-161_c" newId="CERT_C-INT31-c" severity="2" />
  <clone id="CODSTA-161_d" newId="CERT_C-INT31-d" severity="2" />
  <clone id="CODSTA-161_e" newId="CERT_C-INT31-e" severity="2" />
  <clone id="CODSTA-161_f" newId="CERT_C-INT31-f" severity="2" />
  <clone id="CODSTA-161_g" newId="CERT_C-INT31-g" severity="2" />
  <clone id="CODSTA-163_a" newId="CERT_C-INT31-h" severity="2" />
  <clone id="CODSTA-163_b" newId="CERT_C-INT31-i" severity="2" />
  <clone id="CODSTA-164_a" newId="CERT_C-INT31-j" severity="2" />
  <clone id="CODSTA-164_b" newId="CERT_C-INT31-k" severity="2" />
  <clone id="CODSTA-157" newId="CERT_C-INT31-l" severity="2" />
  <clone id="CODSTA-156_a" newId="CERT_C-INT31-m" severity="2" />
  <clone id="CODSTA-156_b" newId="CERT_C-INT31-n" severity="2" />
  <clone id="BD-PB-INTDL" newId="CERT_C-INT31-o" severity="2" />
  <clone id="BD-PB-INTVC" newId="CERT_C-INT31-p" severity="2" />
  <category description="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" id="CERT_C-INT32" />
  <clone id="BD-PB-INTUB" newId="CERT_C-INT32-a" severity="2" />
  <clone id="PB-66_a" newId="CERT_C-INT32-b" severity="2" />
  <clone id="PB-66_b" newId="CERT_C-INT32-c" severity="2" />
  <category description="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" id="CERT_C-INT33" />
  <clone id="BD-PB-ZERO" newId="CERT_C-INT33-a" severity="2" />
  <category description="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" id="CERT_C-INT34" />
  <clone id="BD-PB-BADSHIFT" newId="CERT_C-INT34-a" severity="3" />
  <category description="CERT-INT35_C (RULE) Use correct integer precisions" id="CERT_C-INT35" />
  <clone id="SECURITY-47" newId="CERT_C-INT35-a" severity="3" />
  <category description="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" id="CERT_C-INT36" />
  <clone id="CODSTA-127_b" newId="CERT_C-INT36-b" severity="3" />
  <category description="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" id="CERT_C-MEM00" />
  <clone id="MRM-18" newId="CERT_C-MEM00-a" severity="1" />
  <clone id="MRM-19" newId="CERT_C-MEM00-b" severity="1" />
  <clone id="MRM-20" newId="CERT_C-MEM00-c" severity="1" />
  <clone id="BD-RES-FREE" newId="CERT_C-MEM00-d" severity="1" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-MEM00-e" severity="1" />
  <category description="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" id="CERT_C-MEM01" />
  <clone id="BD-RES-FREE" newId="CERT_C-MEM01-a" severity="2" />
  <clone id="MRM-09" newId="CERT_C-MEM01-b" severity="2" />
  <clone id="MRM-10" newId="CERT_C-MEM01-c" severity="2" />
  <clone id="MRM-11" newId="CERT_C-MEM01-d" severity="2" />
  <category description="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" id="CERT_C-MEM02" />
  <clone id="MRM-58_a" newId="CERT_C-MEM02-a" severity="3" />
  <clone id="MRM-58_b" newId="CERT_C-MEM02-b" severity="3" />
  <category description="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" id="CERT_C-MEM03" />
  <clone id="BD-SECURITY-SENSFREE" newId="CERT_C-MEM03-a" severity="3" />
  <category description="CERT-MEM04_C (REC) Beware of zero-length allocations" id="CERT_C-MEM04" />
  <clone id="MISRA2004-20_3" newId="CERT_C-MEM04-a" severity="2" />
  <category description="CERT-MEM05_C (REC) Avoid large stack allocations" id="CERT_C-MEM05" />
  <clone id="BD-PB-RECFUN" newId="CERT_C-MEM05-a" severity="2" />
  <clone id="BD-PB-VLASIZE" newId="CERT_C-MEM05-b" severity="2" />
  <category description="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" id="CERT_C-MEM07" />
  <clone id="MISRA2004-20_3" newId="CERT_C-MEM07-a" severity="2" />
  <category description="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" id="CERT_C-MEM12" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-MEM12-a" severity="3" />
  <category description="CERT-MEM30_C (RULE) Do not access freed memory" id="CERT_C-MEM30" />
  <clone id="BD-RES-FREE" newId="CERT_C-MEM30-a" severity="1" />
  <category description="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" id="CERT_C-MEM31" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-MEM31-a" severity="2" />
  <category description="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" id="CERT_C-MEM33" />
  <clone id="CODSTA-193" newId="CERT_C-MEM33-a" severity="3" />
  <clone id="PB-71" newId="CERT_C-MEM33-b" severity="3" />
  <category description="CERT-MEM34_C (RULE) Only free memory allocated dynamically" id="CERT_C-MEM34" />
  <clone id="BD-RES-INVFREE" newId="CERT_C-MEM34-a" severity="1" />
  <category description="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" id="CERT_C-MEM35" />
  <clone id="MRM-45" newId="CERT_C-MEM35-a" severity="2" />
  <category description="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36" />
  <clone id="BD-PB-DNMPTR" newId="CERT_C-MEM36-a" severity="3" />
  <category description="CERT-MSC01_C (REC) Strive for logical completeness" id="CERT_C-MSC01" />
  <clone id="MISRA2004-14_10" newId="CERT_C-MSC01-a" severity="2" />
  <clone id="MISRA2004-15_3" newId="CERT_C-MSC01-b" severity="2" />
  <category description="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" id="CERT_C-MSC04" />
  <clone id="MISRA2004-2_3" newId="CERT_C-MSC04-a" severity="3" />
  <clone id="COMMENT-11" newId="CERT_C-MSC04-b" severity="3" />
  <clone id="COMMENT-12" newId="CERT_C-MSC04-c" severity="3" />
  <clone id="COMMENT-13" newId="CERT_C-MSC04-d" severity="3" />
  <category description="CERT-MSC06_C (REC) Beware of compiler optimizations" id="CERT_C-MSC06" />
  <clone id="BD-PB-MEMOPT" newId="CERT_C-MSC06-a" severity="2" />
  <category description="CERT-MSC07_C (REC) Detect and remove dead code" id="CERT_C-MSC07" />
  <clone id="MISRA2004-14_1_a" newId="CERT_C-MSC07-a" severity="3" />
  <clone id="MISRA2004-14_1_b" newId="CERT_C-MSC07-b" severity="3" />
  <clone id="MISRA2004-14_1_c" newId="CERT_C-MSC07-c" severity="3" />
  <clone id="MISRA2004-14_1_d" newId="CERT_C-MSC07-d" severity="3" />
  <clone id="MISRA2004-14_1_e" newId="CERT_C-MSC07-e" severity="3" />
  <clone id="MISRA2004-14_1_f" newId="CERT_C-MSC07-f" severity="3" />
  <clone id="MISRA2004-14_1_g" newId="CERT_C-MSC07-g" severity="3" />
  <clone id="BD-PB-SWITCH" newId="CERT_C-MSC07-h" severity="3" />
  <clone id="BD-PB-UCMETH" newId="CERT_C-MSC07-i" severity="3">
    <defParameters>
      <![CDATA[
        CERT_C-MSC07-i-global=false
        CERT_C-MSC07-i-ignore_template=false
        CERT_C-MSC07-i-internal_linkage=true
        CERT_C-MSC07-i-isTransitive=false
        CERT_C-MSC07-i-public=false
        CERT_C-MSC07-i-protected=false
        CERT_C-MSC07-i-private=true
      ]]>
    </defParameters>
  </clone>
  <category description="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" id="CERT_C-MSC09" />
  <clone id="MISRA-005" newId="CERT_C-MSC09-a" severity="3" />
  <category description="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" id="CERT_C-MSC11" />
  <clone id="CODSTA-11" newId="CERT_C-MSC11-a" severity="3" />
  <category description="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" id="CERT_C-MSC12" />
  <clone id="MISRA2004-14_1_a" newId="CERT_C-MSC12-a" severity="3" />
  <clone id="MISRA2004-14_1_b" newId="CERT_C-MSC12-b" severity="3" />
  <clone id="MISRA2004-14_1_c" newId="CERT_C-MSC12-c" severity="3" />
  <clone id="MISRA2004-14_1_d" newId="CERT_C-MSC12-d" severity="3" />
  <clone id="MISRA2004-14_1_e" newId="CERT_C-MSC12-e" severity="3" />
  <clone id="MISRA2004-14_1_f" newId="CERT_C-MSC12-f" severity="3" />
  <clone id="MISRA2004-14_1_g" newId="CERT_C-MSC12-g" severity="3" />
  <clone id="BD-PB-SWITCH" newId="CERT_C-MSC12-h" severity="3" />
  <clone id="BD-PB-UCMETH" newId="CERT_C-MSC12-i" severity="3">
    <defParameters>
      <![CDATA[
        CERT_C-MSC12-i-global=false
        CERT_C-MSC12-i-ignore_template=false
        CERT_C-MSC12-i-internal_linkage=true
        CERT_C-MSC12-i-isTransitive=false
        CERT_C-MSC12-i-public=false
        CERT_C-MSC12-i-protected=false
        CERT_C-MSC12-i-private=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-CC" newId="CERT_C-MSC12-j" severity="3">
    <defParameters>
      <![CDATA[
        CERT_C-MSC12-j-violateOnNoIf=false
      ]]>
    </defParameters>
  </clone>
  <clone id="MISRA2004-14_2" newId="CERT_C-MSC12-k" severity="3" />
  <category description="CERT-MSC13_C (REC) Detect and remove unused values" id="CERT_C-MSC13" />
  <clone id="OPT-06" newId="CERT_C-MSC13-a" severity="3" />
  <category description="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" id="CERT_C-MSC14" />
  <clone id="PB-73" newId="CERT_C-MSC14-a" severity="3" />
  <clone id="PB-73_b" newId="CERT_C-MSC14-b" severity="3" />
  <category description="CERT-MSC15_C (REC) Do not depend on undefined behavior" id="CERT_C-MSC15" />
  <clone id="PB-73" newId="CERT_C-MSC15-a" severity="1" />
  <clone id="PB-73_b" newId="CERT_C-MSC15-b" severity="1" />
  <category description="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" id="CERT_C-MSC17" />
  <clone id="CODSTA-149" newId="CERT_C-MSC17-a" severity="1" />
  <category description="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" id="CERT_C-MSC19" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-MSC19-a" severity="3" />
  <clone id="BD-PB-NP" newId="CERT_C-MSC19-b" severity="3" />
  <category description="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" id="CERT_C-MSC22" />
  <clone id="MISRA2004-20_7" newId="CERT_C-MSC22-a" severity="3" />
  <category description="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" id="CERT_C-MSC24" />
  <clone id="MISRA2004-20_10" newId="CERT_C-MSC24-a" severity="3" />
  <clone id="SECURITY-52" newId="CERT_C-MSC24-b" severity="3" />
  <clone id="SECURITY-12" newId="CERT_C-MSC24-c" severity="3" />
  <clone id="SECURITY-07" newId="CERT_C-MSC24-d" severity="3" />
  <category description="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30" />
  <clone id="SECURITY-02_b" newId="CERT_C-MSC30-a" severity="2" />
  <category description="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" id="CERT_C-MSC32" />
  <clone id="BD-SECURITY-RAND" newId="CERT_C-MSC32-d" severity="1" />
  <category description="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" id="CERT_C-MSC33" />
  <clone id="SECURITY-01" newId="CERT_C-MSC33-a" severity="1" />
  <category description="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" id="CERT_C-MSC37" />
  <clone id="MISRA2004-16_8_b" newId="CERT_C-MSC37-a" severity="2" />
  <category description="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" id="CERT_C-MSC38" />
  <clone id="MISRA2004-19_8" newId="CERT_C-MSC38-a" severity="3" />
  <category description="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" id="CERT_C-MSC39" />
  <clone id="BD-PB-VARARGS" newId="CERT_C-MSC39-a" severity="3" />
  <category description="CERT-MSC40_C (RULE) Do not violate constraints" id="CERT_C-MSC40" />
  <clone id="CODSTA-202" newId="CERT_C-MSC40-a" severity="3" />
  <category description="CERT-MSC41_C (RULE) Never hard code sensitive information" id="CERT_C-MSC41" />
  <clone id="CODSTA-203" newId="CERT_C-MSC41-a" severity="1" />
  <category description="CERT-POS30_C (RULE) Use the readlink() function properly" id="CERT_C-POS30" />
  <clone id="BD-PB-OVERFNZT" newId="CERT_C-POS30-a" severity="1" />
  <clone id="CODSTA-144" newId="CERT_C-POS30-b" severity="1" />
  <clone id="CODSTA-145" newId="CERT_C-POS30-c" severity="1" />
  <category description="CERT-POS33_C (RULE) Do not use vfork()" id="CERT_C-POS33" />
  <clone id="SECURITY-10" newId="CERT_C-POS33-a" severity="2" />
  <category description="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34" />
  <clone id="SECURITY-03" newId="CERT_C-POS34-a" severity="2" />
  <clone id="BD-PB-PUTENV" newId="CERT_C-POS34-b" severity="2" />
  <category description="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35" />
  <clone id="BD-TRS-SYMLINK" newId="CERT_C-POS35-b" severity="1" />
  <category description="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36" />
  <clone id="SECURITY-44" newId="CERT_C-POS36-a" severity="1" />
  <category description="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" id="CERT_C-POS37" />
  <clone id="SECURITY-45" newId="CERT_C-POS37-a" severity="1" />
  <category description="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" id="CERT_C-POS38" />
  <clone id="BD-TRS-FORKFILE" newId="CERT_C-POS38-a" severity="3" />
  <category description="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39" />
  <clone id="BD-PB-BYTEORD" newId="CERT_C-POS39-a" severity="1" />
  <category description="CERT-POS44_C (RULE) Do not use signals to terminate threads" id="CERT_C-POS44" />
  <clone id="SECURITY-53" newId="CERT_C-POS44-a" severity="2" />
  <category description="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" id="CERT_C-POS47" />
  <clone id="SECURITY-43" newId="CERT_C-POS47-a" severity="1" />
  <category description="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" id="CERT_C-POS48" />
  <clone id="BD-TRS-DSTRLOCK" newId="CERT_C-POS48-a" severity="3" />
  <clone id="BD-TRS-REVLOCK" newId="CERT_C-POS48-b" severity="3" />
  <category description="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" id="CERT_C-POS49" />
  <clone id="BD-TRS-BITLOCK" newId="CERT_C-POS49-a" severity="2" />
  <category description="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50" />
  <clone id="BD-TRS-ARG" newId="CERT_C-POS50-a" severity="3" />
  <category description="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" id="CERT_C-POS51" />
  <clone id="BD-TRS-ORDER" newId="CERT_C-POS51-a" severity="3" />
  <category description="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" id="CERT_C-POS52" />
  <clone id="BD-TRS-TSHL" newId="CERT_C-POS52-a" severity="3" />
  <category description="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53" />
  <clone id="GLOBAL-CONDMUTEXVAR" newId="CERT_C-POS53-a" severity="3" />
  <category description="CERT-POS54_C (RULE) Detect and handle POSIX library errors" id="CERT_C-POS54" />
  <clone id="CODSTA-227" newId="CERT_C-POS54-a" severity="1" />
  <category description="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" id="CERT_C-PRE00" />
  <clone id="MISRA2004-19_7" newId="CERT_C-PRE00-a" severity="3" />
  <category description="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" id="CERT_C-PRE01" />
  <clone id="MISRA2004-19_10" newId="CERT_C-PRE01-a" severity="1" />
  <category description="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" id="CERT_C-PRE02" />
  <clone id="MISRA-096" newId="CERT_C-PRE02-a" severity="1" />
  <category description="CERT-PRE06_C (REC) Enclose header files in an include guard" id="CERT_C-PRE06" />
  <clone id="PFO-02" newId="CERT_C-PRE06-a" severity="3" />
  <category description="CERT-PRE07_C (REC) Avoid using repeated question marks" id="CERT_C-PRE07" />
  <clone id="MISRA2004-4_2" newId="CERT_C-PRE07-a" severity="3" />
  <category description="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" id="CERT_C-PRE30" />
  <clone id="PREPROC-21" newId="CERT_C-PRE30-a" severity="3" />
  <category description="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31" />
  <clone id="CODSTA-150" newId="CERT_C-PRE31-b" severity="3" />
  <clone id="CODSTA-150_b" newId="CERT_C-PRE31-c" severity="3" />
  <clone id="CODSTA-150_c" newId="CERT_C-PRE31-d" severity="3" />
  <category description="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" id="CERT_C-PRE32" />
  <clone id="MISRA2004-19_9" newId="CERT_C-PRE32-a" severity="3" />
  <category description="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" id="CERT_C-SIG00" />
  <clone id="MISRA2004-20_8_b" newId="CERT_C-SIG00-a" severity="2" />
  <category description="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" id="CERT_C-SIG01" />
  <clone id="MISRA2004-20_8_b" newId="CERT_C-SIG01-a" severity="3" />
  <category description="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" id="CERT_C-SIG02" />
  <clone id="MISRA2004-20_8_b" newId="CERT_C-SIG02-a" severity="1" />
  <category description="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" id="CERT_C-SIG30" />
  <clone id="BD-PB-SIGHAN" newId="CERT_C-SIG30-a" severity="1" />
  <category description="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" id="CERT_C-SIG31" />
  <clone id="BD-PB-SIGHAN" newId="CERT_C-SIG31-a" severity="2" />
  <category description="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" id="CERT_C-SIG34" />
  <clone id="BD-PB-SIGHAN" newId="CERT_C-SIG34-a" severity="3">
    <defParameters>
      <![CDATA[
        CERT_C-SIG34-a-reportOnSignal=true
      ]]>
    </defParameters>
  </clone>
  <category description="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" id="CERT_C-SIG35" />
  <clone id="BD-PB-SIGRETURN" newId="CERT_C-SIG35-a" severity="3" />
  <category description="CERT-STR00_C (REC) Represent characters using an appropriate type" id="CERT_C-STR00" />
  <clone id="MISRA2004-6_1" newId="CERT_C-STR00-a" severity="1" />
  <category description="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" id="CERT_C-STR02" />
  <clone id="BD-SECURITY-TDCMD" newId="CERT_C-STR02-a" severity="1" />
  <clone id="BD-SECURITY-TDFNAMES" newId="CERT_C-STR02-b" severity="1" />
  <clone id="BD-SECURITY-TDSQL" newId="CERT_C-STR02-c" severity="1" />
  <category description="CERT-STR03_C (REC) Do not inadvertently truncate a string" id="CERT_C-STR03" />
  <clone id="BD-PB-OVERFNZT" newId="CERT_C-STR03-a" severity="2" />
  <category description="CERT-STR04_C (REC) Use plain char for characters in the basic character set" id="CERT_C-STR04" />
  <clone id="MISRA2004-6_1" newId="CERT_C-STR04-a" severity="3" />
  <category description="CERT-STR05_C (REC) Use pointers to const when referring to string literals" id="CERT_C-STR05" />
  <clone id="PB-27" newId="CERT_C-STR05-a" severity="3" />
  <category description="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" id="CERT_C-STR07" />
  <clone id="SECURITY-13" newId="CERT_C-STR07-a" severity="1" />
  <category description="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" id="CERT_C-STR09" />
  <clone id="CODSTA-69" newId="CERT_C-STR09-a" severity="3" />
  <category description="CERT-STR10_C (REC) Do not concatenate different type of string literals" id="CERT_C-STR10" />
  <clone id="PB-38" newId="CERT_C-STR10-a" severity="3" />
  <category description="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11" />
  <clone id="CODSTA-197" newId="CERT_C-STR11-a" severity="2" />
  <category description="CERT-STR30_C (RULE) Do not attempt to modify string literals" id="CERT_C-STR30" />
  <clone id="PB-27" newId="CERT_C-STR30-a" severity="2" />
  <clone id="BD-PB-MODSTR" newId="CERT_C-STR30-b" severity="2" />
  <category description="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" id="CERT_C-STR31" />
  <clone id="BD-PB-ARRAY" newId="CERT_C-STR31-a" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="CERT_C-STR31-b" severity="1" />
  <clone id="BD-SECURITY-BUFWRITE" newId="CERT_C-STR31-c" severity="1" />
  <clone id="BD-SECURITY-OVERFWR" newId="CERT_C-STR31-d" severity="1" />
  <clone id="SECURITY-12" newId="CERT_C-STR31-e" severity="1" />
  <category description="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" id="CERT_C-STR32" />
  <clone id="BD-PB-OVERFNZT" newId="CERT_C-STR32-a" severity="1" />
  <category description="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34" />
  <clone id="CODSTA-187_a" newId="CERT_C-STR34-b" severity="2" />
  <clone id="CODSTA-187_b" newId="CERT_C-STR34-c" severity="2" />
  <clone id="CODSTA-187_c" newId="CERT_C-STR34-d" severity="2" />
  <category description="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" id="CERT_C-STR37" />
  <clone id="BD-API-CTYPE" newId="CERT_C-STR37-a" severity="3" />
  <category description="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38" />
  <clone id="CODSTA-188" newId="CERT_C-STR38-a" severity="1" />
  <category description="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" id="CERT_C-WIN00" />
  <clone id="SECURITY-04" newId="CERT_C-WIN00-a" severity="2" />
  <category description="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" id="CERT_C-WIN30" />
  <clone id="BD-RES-LEAKS" newId="CERT_C-WIN30-a" severity="2" />
  <!-- CERT C end -->
  <!-- CERT CPP begin -->
  <category description="SEI CERT C++" id="CERT_CPP" />
  <category description="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" id="CERT_CPP-CON50" />
  <clone id="BD-TRS-DSTRLOCK" newId="CERT_CPP-CON50-a" severity="3" />
  <category description="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" id="CERT_CPP-CON51" />
  <clone id="CODSTA-MCPP-21" newId="CERT_CPP-CON51-a" severity="2" />
  <category description="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" id="CERT_CPP-CON52" />
  <clone id="BD-TRS-BITLOCK" newId="CERT_CPP-CON52-a" severity="2" />
  <category description="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" id="CERT_CPP-CON53" />
  <clone id="BD-TRS-ORDER" newId="CERT_CPP-CON53-a" severity="3" />
  <category description="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54" />
  <clone id="CODSTA-191" newId="CERT_CPP-CON54-a" severity="3" />
  <category description="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" id="CERT_CPP-CON55" />
  <clone id="SECURITY-50" newId="CERT_CPP-CON55-a" severity="3" />
  <category description="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" id="CERT_CPP-CON56" />
  <clone id="BD-TRS-DLOCK" newId="CERT_CPP-CON56-a" severity="3" />
  <category description="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" id="CERT_CPP-CTR50" />
  <clone id="BD-PB-VALRANGE" newId="CERT_CPP-CTR50-a" severity="2" />
  <category description="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" id="CERT_CPP-CTR51" />
  <clone id="BD-CO-ITMOD" newId="CERT_CPP-CTR51-a" severity="2" />
  <category description="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" id="CERT_CPP-CTR52" />
  <clone id="BD-CO-EMPCON" newId="CERT_CPP-CTR52-a" severity="1" />
  <category description="CERT-CTR53_CPP (RULE) Use valid iterator ranges" id="CERT_CPP-CTR53" />
  <clone id="STL-36" newId="CERT_CPP-CTR53-a" severity="2" />
  <clone id="BD-CO-ITINVCOMP" newId="CERT_CPP-CTR53-b" severity="2" />
  <category description="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" id="CERT_CPP-CTR54" />
  <clone id="BD-CO-ITINVCOMP" newId="CERT_CPP-CTR54-a" severity="2" />
  <clone id="BD-PB-PTRCMP" newId="CERT_CPP-CTR54-b" severity="2">
    <defParameters>
      <![CDATA[
        CERT_CPP-CTR54-b-aggressiveMode=false
        CERT_CPP-CTR54-b-reportOnComparisonFunctions=true
        CERT_CPP-CTR54-b-reportOnRelationalOperators=true
        CERT_CPP-CTR54-b-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-PTRSUB" newId="CERT_CPP-CTR54-c" severity="2">
    <defParameters>
      <![CDATA[
        CERT_CPP-CTR54-c-aggressiveMode=false
      ]]>
    </defParameters>
  </clone>
  <category description="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" id="CERT_CPP-CTR55" />
  <clone id="PB-74" newId="CERT_CPP-CTR55-a" severity="1" />
  <category description="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" id="CERT_CPP-CTR56" />
  <clone id="PB-10" newId="CERT_CPP-CTR56-a" severity="2" />
  <clone id="PB-57" newId="CERT_CPP-CTR56-b" severity="2" />
  <clone id="BD-PB-POLARR" newId="CERT_CPP-CTR56-c" severity="2" />
  <category description="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" id="CERT_CPP-CTR57" />
  <clone id="STL-16" newId="CERT_CPP-CTR57-a" severity="3" />
  <category description="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" id="CERT_CPP-CTR58" />
  <clone id="STL-29" newId="CERT_CPP-CTR58-a" severity="3" />
  <category description="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" id="CERT_CPP-DCL50" />
  <clone id="MISRA2004-16_1" newId="CERT_CPP-DCL50-a" severity="1" />
  <category description="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" id="CERT_CPP-DCL51" />
  <clone id="MISRA2004-20_1_a" newId="CERT_CPP-DCL51-a" severity="3" />
  <clone id="MISRA2004-20_1_b" newId="CERT_CPP-DCL51-b" severity="3" />
  <clone id="MISRA2004-20_1_e" newId="CERT_CPP-DCL51-c" severity="3" />
  <clone id="MISRA2004-20_2" newId="CERT_CPP-DCL51-d" severity="3" />
  <clone id="MISRA2004-20_2_a" newId="CERT_CPP-DCL51-e" severity="3" />
  <clone id="MISRA2004-20_2_b" newId="CERT_CPP-DCL51-f" severity="3" />
  <category description="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" id="CERT_CPP-DCL52" />
  <clone id="CODSTA-CPP-97" newId="CERT_CPP-DCL52-a" severity="3" />
  <category description="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" id="CERT_CPP-DCL53" />
  <clone id="FORMAT-48" newId="CERT_CPP-DCL53-a" severity="3" />
  <clone id="FORMAT-49" newId="CERT_CPP-DCL53-b" severity="3" />
  <clone id="PB-79" newId="CERT_CPP-DCL53-c" severity="3" />
  <category description="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" id="CERT_CPP-DCL54" />
  <clone id="MRM-28" newId="CERT_CPP-DCL54-a" severity="2" />
  <category description="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" id="CERT_CPP-DCL55" />
  <clone id="SECURITY-46" newId="CERT_CPP-DCL55-a" severity="3" />
  <category description="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" id="CERT_CPP-DCL56" />
  <clone id="INIT-12" newId="CERT_CPP-DCL56-a" severity="3" />
  <category description="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" id="CERT_CPP-DCL57" />
  <clone id="EXCEPT-01" newId="CERT_CPP-DCL57-a" severity="2" />
  <clone id="BD-PB-EXCEPT" newId="CERT_CPP-DCL57-b" severity="2" />
  <category description="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" id="CERT_CPP-DCL58" />
  <clone id="CODSTA-CPP-95" newId="CERT_CPP-DCL58-a" severity="2" />
  <category description="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" id="CERT_CPP-DCL59" />
  <clone id="CODSTA-CPP-74" newId="CERT_CPP-DCL59-a" severity="3" />
  <category description="CERT-DCL60_CPP (RULE) Obey the one-definition rule" id="CERT_CPP-DCL60" />
  <clone id="GLOBAL-ONEDEFRULE" newId="CERT_CPP-DCL60-a" severity="3" />
  <category description="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" id="CERT_CPP-ERR50" />
  <clone id="PB-44" newId="CERT_CPP-ERR50-a" severity="3" />
  <clone id="EXCEPT-01" newId="CERT_CPP-ERR50-b" severity="3" />
  <clone id="EXCEPT-03" newId="CERT_CPP-ERR50-c" severity="3" />
  <clone id="EXCEPT-06" newId="CERT_CPP-ERR50-d" severity="3" />
  <clone id="EXCEPT-07" newId="CERT_CPP-ERR50-e" severity="3" />
  <clone id="EXCEPT-08" newId="CERT_CPP-ERR50-f" severity="3" />
  <clone id="EXCEPT-13" newId="CERT_CPP-ERR50-g" severity="3" />
  <clone id="EXCEPT-14" newId="CERT_CPP-ERR50-h" severity="3" />
  <clone id="EXCEPT-18" newId="CERT_CPP-ERR50-i" severity="3" />
  <clone id="BD-PB-EXCEPT" newId="CERT_CPP-ERR50-j" severity="3" />
  <clone id="BD-PB-EXITHAN" newId="CERT_CPP-ERR50-k" severity="3" />
  <clone id="PB-75" newId="CERT_CPP-ERR50-l" severity="3" />
  <clone id="BD-PB-NOEXCEPT" newId="CERT_CPP-ERR50-m" severity="3" />
  <clone id="PB-75_c" newId="CERT_CPP-ERR50-n" severity="3" />
  <category description="CERT-ERR51_CPP (RULE) Handle all exceptions" id="CERT_CPP-ERR51" />
  <clone id="BD-PB-EXCEPT" newId="CERT_CPP-ERR51-a" severity="3" />
  <clone id="EXCEPT-13" newId="CERT_CPP-ERR51-b" severity="3" />
  <category description="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" id="CERT_CPP-ERR52" />
  <clone id="MISRA2004-20_7" newId="CERT_CPP-ERR52-a" severity="3" />
  <clone id="MISRA2004-20_7_b" newId="CERT_CPP-ERR52-b" severity="3" />
  <category description="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" id="CERT_CPP-ERR53" />
  <clone id="EXCEPT-16" newId="CERT_CPP-ERR53-a" severity="3" />
  <category description="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" id="CERT_CPP-ERR54" />
  <clone id="EXCEPT-17" newId="CERT_CPP-ERR54-a" severity="1" />
  <category description="CERT-ERR55_CPP (RULE) Honor exception specifications" id="CERT_CPP-ERR55" />
  <clone id="EXCEPT-14" newId="CERT_CPP-ERR55-a" severity="2" />
  <category description="CERT-ERR56_CPP (RULE) Guarantee exception safety" id="CERT_CPP-ERR56" />
  <clone id="BD-PB-EXCEPT" newId="CERT_CPP-ERR56-a" severity="2" />
  <clone id="EXCEPT-25" newId="CERT_CPP-ERR56-b" severity="2" />
  <category description="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" id="CERT_CPP-ERR57" />
  <clone id="BD-RES-LEAKS" newId="CERT_CPP-ERR57-a" severity="3" />
  <category description="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" id="CERT_CPP-ERR58" />
  <clone id="EXCEPT-08" newId="CERT_CPP-ERR58-a" severity="2" />
  <category description="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59" />
  <clone id="PORT-30" newId="CERT_CPP-ERR59-a" severity="1" />
  <category description="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60" />
  <clone id="EXCEPT-19" newId="CERT_CPP-ERR60-a" severity="3" />
  <clone id="EXCEPT-20" newId="CERT_CPP-ERR60-b" severity="3" />
  <category description="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" id="CERT_CPP-ERR61" />
  <clone id="EXCEPT-15" newId="CERT_CPP-ERR61-a" severity="3" />
  <clone id="EXCEPT-02" newId="CERT_CPP-ERR61-b" severity="3" />
  <category description="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" id="CERT_CPP-ERR62" />
  <clone id="MISRA2004-20_10" newId="CERT_CPP-ERR62-a" severity="3" />
  <category description="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" id="CERT_CPP-EXP50" />
  <clone id="MISRA2004-12_2_a" newId="CERT_CPP-EXP50-a" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="CERT_CPP-EXP50-b" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="CERT_CPP-EXP50-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="CERT_CPP-EXP50-d" severity="2" />
  <clone id="MISRA2004-12_2_e" newId="CERT_CPP-EXP50-e" severity="2" />
  <clone id="MISRA2004-12_2_g" newId="CERT_CPP-EXP50-f" severity="2" />
  <category description="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" id="CERT_CPP-EXP51" />
  <clone id="BD-PB-POLARR" newId="CERT_CPP-EXP51-a" severity="3" />
  <category description="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" id="CERT_CPP-EXP52" />
  <clone id="MISRA2004-12_3" newId="CERT_CPP-EXP52-a" severity="3" />
  <clone id="MISRA2004-12_3_b" newId="CERT_CPP-EXP52-b" severity="3" />
  <clone id="MISRA2004-12_3_c" newId="CERT_CPP-EXP52-c" severity="3" />
  <clone id="CODSTA-CPP-104" newId="CERT_CPP-EXP52-d" severity="3" />
  <clone id="CODSTA-CPP-104_b" newId="CERT_CPP-EXP52-e" severity="3" />
  <category description="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" id="CERT_CPP-EXP53" />
  <clone id="BD-PB-NOTINIT" newId="CERT_CPP-EXP53-a" severity="1" />
  <category description="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" id="CERT_CPP-EXP54" />
  <clone id="BD-RES-FREE" newId="CERT_CPP-EXP54-a" severity="2" />
  <clone id="MISRA2004-17_6_a" newId="CERT_CPP-EXP54-b" severity="2" />
  <clone id="MISRA2004-17_6_b" newId="CERT_CPP-EXP54-c" severity="2" />
  <category description="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" id="CERT_CPP-EXP55" />
  <clone id="MISRA2004-11_5" newId="CERT_CPP-EXP55-a" severity="2" />
  <category description="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56" />
  <clone id="CODSTA-CPP-96" newId="CERT_CPP-EXP56-a" severity="3" />
  <category description="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" id="CERT_CPP-EXP57" />
  <clone id="PB-55" newId="CERT_CPP-EXP57-a" severity="3" />
  <clone id="CODSTA-125" newId="CERT_CPP-EXP57-b" severity="3" />
  <category description="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" id="CERT_CPP-EXP58" />
  <clone id="BD-PB-VARARGS" newId="CERT_CPP-EXP58-a" severity="3" />
  <category description="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" id="CERT_CPP-EXP59" />
  <clone id="CODSTA-CPP-99" newId="CERT_CPP-EXP59-a" severity="3" />
  <category description="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60" />
  <clone id="PORT-31" newId="CERT_CPP-EXP60-a" severity="1" />
  <category description="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" id="CERT_CPP-EXP61" />
  <clone id="CODSTA-MCPP-17" newId="CERT_CPP-EXP61-a" severity="2" />
  <clone id="CODSTA-MCPP-17_b" newId="CERT_CPP-EXP61-b" severity="2" />
  <clone id="CODSTA-MCPP-17_c" newId="CERT_CPP-EXP61-c" severity="2" />
  <category description="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" id="CERT_CPP-EXP62" />
  <clone id="CODSTA-CPP-100" newId="CERT_CPP-EXP62-a" severity="2" />
  <category description="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63" />
  <clone id="BD-PB-SUBSEQMOVE" newId="CERT_CPP-EXP63-a" severity="2" />
  <category description="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" id="CERT_CPP-FIO50" />
  <clone id="BD-PB-STREAMINOUT" newId="CERT_CPP-FIO50-a" severity="2" />
  <category description="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" id="CERT_CPP-FIO51" />
  <clone id="BD-RES-LEAKS" newId="CERT_CPP-FIO51-a" severity="3" />
  <category description="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" id="CERT_CPP-INT50" />
  <clone id="PB-70" newId="CERT_CPP-INT50-a" severity="3" />
  <category description="CERT-MEM50_CPP (RULE) Do not access freed memory" id="CERT_CPP-MEM50" />
  <clone id="BD-RES-FREE" newId="CERT_CPP-MEM50-a" severity="1" />
  <category description="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51" />
  <clone id="MRM-06" newId="CERT_CPP-MEM51-a" severity="1" />
  <clone id="MRM-36" newId="CERT_CPP-MEM51-b" severity="1" />
  <clone id="MRM-40_d" newId="CERT_CPP-MEM51-c" severity="1" />
  <clone id="BD-RES-BADDEALLOC" newId="CERT_CPP-MEM51-d" severity="1" />
  <category description="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" id="CERT_CPP-MEM52" />
  <clone id="MRM-34" newId="CERT_CPP-MEM52-a" severity="1" />
  <clone id="MRM-01" newId="CERT_CPP-MEM52-b" severity="1" />
  <category description="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" id="CERT_CPP-MEM53" />
  <clone id="MRM-08" newId="CERT_CPP-MEM53-a" severity="1" />
  <category description="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" id="CERT_CPP-MEM54" />
  <clone id="MRM-55" newId="CERT_CPP-MEM54-a" severity="1" />
  <clone id="MRM-55_b" newId="CERT_CPP-MEM54-b" severity="1" />
  <category description="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" id="CERT_CPP-MEM55" />
  <clone id="MRM-53" newId="CERT_CPP-MEM55-a" severity="1" />
  <category description="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56" />
  <clone id="BD-PB-PTRVALUE" newId="CERT_CPP-MEM56-a" severity="1" />
  <category description="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" id="CERT_CPP-MEM57" />
  <clone id="MRM-54" newId="CERT_CPP-MEM57-a" severity="2" />
  <category description="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" id="CERT_CPP-MSC50" />
  <clone id="SECURITY-02_b" newId="CERT_CPP-MSC50-a" severity="2" />
  <category description="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" id="CERT_CPP-MSC51" />
  <clone id="BD-SECURITY-RAND" newId="CERT_CPP-MSC51-a" severity="1" />
  <category description="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" id="CERT_CPP-MSC52" />
  <clone id="MISRA2004-16_8_b" newId="CERT_CPP-MSC52-a" severity="2" />
  <category description="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" id="CERT_CPP-MSC53" />
  <clone id="BD-PB-NORETURN" newId="CERT_CPP-MSC53-a" severity="3" />
  <category description="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" id="CERT_CPP-MSC54" />
  <clone id="BD-PB-SIGHAN" newId="CERT_CPP-MSC54-a" severity="2" />
  <category description="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" id="CERT_CPP-OOP50" />
  <clone id="OOP-16" newId="CERT_CPP-OOP50-a" severity="3" />
  <clone id="OOP-16_b" newId="CERT_CPP-OOP50-b" severity="3" />
  <clone id="BD-PB-VCTOR" newId="CERT_CPP-OOP50-c" severity="3" />
  <clone id="BD-PB-VDTOR" newId="CERT_CPP-OOP50-d" severity="3" />
  <category description="CERT-OOP51_CPP (RULE) Do not slice derived objects" id="CERT_CPP-OOP51" />
  <clone id="PB-20" newId="CERT_CPP-OOP51-a" severity="3" />
  <category description="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" id="CERT_CPP-OOP52" />
  <clone id="OOP-22" newId="CERT_CPP-OOP52-a" severity="2" />
  <category description="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" id="CERT_CPP-OOP53" />
  <clone id="INIT-10" newId="CERT_CPP-OOP53-a" severity="3" />
  <category description="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" id="CERT_CPP-OOP54" />
  <clone id="OOP-34" newId="CERT_CPP-OOP54-a" severity="3" />
  <category description="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" id="CERT_CPP-OOP55" />
  <clone id="CODSTA-62" newId="CERT_CPP-OOP55-a" severity="2" />
  <category description="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" id="CERT_CPP-OOP56" />
  <clone id="BD-PB-TERMHAN" newId="CERT_CPP-OOP56-a" severity="3" />
  <clone id="BD-PB-UNEXPHAN" newId="CERT_CPP-OOP56-b" severity="3" />
  <clone id="BD-PB-NEWHAN" newId="CERT_CPP-OOP56-c" severity="3" />
  <category description="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" id="CERT_CPP-OOP57" />
  <clone id="CODSTA-CPP-93" newId="CERT_CPP-OOP57-a" severity="2" />
  <clone id="CODSTA-CPP-94" newId="CERT_CPP-OOP57-b" severity="2" />
  <category description="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" id="CERT_CPP-OOP58" />
  <clone id="CODSTA-CPP-98" newId="CERT_CPP-OOP58-a" severity="2" />
  <category description="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" id="CERT_CPP-STR50" />
  <clone id="BD-PB-OVERFNZT" newId="CERT_CPP-STR50-b" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="CERT_CPP-STR50-c" severity="1" />
  <clone id="BD-SECURITY-BUFWRITE" newId="CERT_CPP-STR50-e" severity="1" />
  <clone id="BD-SECURITY-OVERFWR" newId="CERT_CPP-STR50-f" severity="1" />
  <clone id="SECURITY-51" newId="CERT_CPP-STR50-g" severity="1" />
  <category description="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" id="CERT_CPP-STR51" />
  <clone id="BD-PB-NP" newId="CERT_CPP-STR51-a" severity="1" />
  <category description="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52" />
  <clone id="BD-CO-STRMOD" newId="CERT_CPP-STR52-a" severity="2" />
  <category description="CERT-STR53_CPP (RULE) Range check element access" id="CERT_CPP-STR53" />
  <clone id="BD-PB-VALRANGE" newId="CERT_CPP-STR53-a" severity="2" />
  <!-- CERT CPP end -->
  <!-- HIC++ begin -->
  <category description="High Integrity C++" id="HICPP" />
  <category description="HIC++ 1.2.1 Ensure that all statements are reachable" id="HICPP-1_2_1" />
  <clone id="MISRA2004-14_1_a" newId="HICPP-1_2_1-a" />
  <clone id="MISRA2004-14_1_b" newId="HICPP-1_2_1-b" />
  <clone id="MISRA2004-14_1_c" newId="HICPP-1_2_1-c" />
  <clone id="MISRA2004-14_1_d" newId="HICPP-1_2_1-d" />
  <clone id="MISRA2004-14_1_e" newId="HICPP-1_2_1-e" />
  <clone id="MISRA2004-14_1_f" newId="HICPP-1_2_1-f" />
  <clone id="MISRA2004-14_1_g" newId="HICPP-1_2_1-g" />
  <clone id="BD-PB-UCMETH" newId="HICPP-1_2_1-h" />
  <clone id="BD-PB-CC" newId="HICPP-1_2_1-i">
    <defParameters>
      <![CDATA[
        HICPP-1_2_1-i-violateOnNoIf=false
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-SWITCH" newId="HICPP-1_2_1-j" />
  <category description="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" id="HICPP-1_2_2" />
  <clone id="MISRA2004-14_2" newId="HICPP-1_2_2-a" />
  <category description="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" id="HICPP-1_3_1" />
  <clone id="CODSTA-MCPP-42" newId="HICPP-1_3_1-a" />
  <category description="HIC++ 1.3.2 Do not use the register keyword" id="HICPP-1_3_2" />
  <clone id="MISRA-028" newId="HICPP-1_3_2-a" />
  <category description="HIC++ 1.3.3 Do not use the C Standard Library .h headers" id="HICPP-1_3_3" />
  <clone id="CODSTA-CPP-59" newId="HICPP-1_3_3-a" />
  <category description="HIC++ 1.3.4 Do not use deprecated STL library features" id="HICPP-1_3_4" />
  <category description="HIC++ 1.3.5 Do not use throw exception specifications" id="HICPP-1_3_5" />
  <clone id="EXCEPT-23" newId="HICPP-1_3_5-a" />
  <category description="HIC++ 2.1.1 Do not use tab characters in source files" id="HICPP-2_1_1" />
  <clone id="FORMAT-01" newId="HICPP-2_1_1-a" />
  <category description="HIC++ 2.2.1 Do not use digraphs or trigraphs" id="HICPP-2_2_1" />
  <clone id="CODSTA-48" newId="HICPP-2_2_1-a" />
  <clone id="MISRA2004-4_2" newId="HICPP-2_2_1-b" />
  <category description="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" id="HICPP-2_3_1" />
  <clone id="COMMENT-01" newId="HICPP-2_3_1-a" />
  <category description="HIC++ 2.3.2 Do not comment out code" id="HICPP-2_3_2" />
  <category description="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" id="HICPP-2_4_1" />
  <clone id="NAMING-47" newId="HICPP-2_4_1-a" />
  <category description="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" id="HICPP-2_5_1" />
  <clone id="PB-38_b" newId="HICPP-2_5_1-a" />
  <category description="HIC++ 2.5.2 Do not use octal constants (other than zero)" id="HICPP-2_5_2" />
  <clone id="MISRA2004-7_1_a" newId="HICPP-2_5_2-a" />
  <category description="HIC++ 2.5.3 Use nullptr for the null pointer constant" id="HICPP-2_5_3" />
  <clone id="CODSTA-MCPP-04" newId="HICPP-2_5_3-a" />
  <category description="HIC++ 3.1.1 Do not hide declarations" id="HICPP-3_1_1" />
  <clone id="MISRA2004-5_2_a" newId="HICPP-3_1_1-a" />
  <clone id="MISRA2004-5_2_b" newId="HICPP-3_1_1-b" />
  <clone id="CODSTA-CPP-83" newId="HICPP-3_1_1-c" />
  <clone id="CODSTA-CPP-84" newId="HICPP-3_1_1-d" />
  <clone id="CODSTA-CPP-85" newId="HICPP-3_1_1-e" />
  <category description="HIC++ 3.2.1 Do not declare functions at block scope" id="HICPP-3_2_1" />
  <clone id="MISRA2004-8_6" newId="HICPP-3_2_1-a" />
  <category description="HIC++ 3.3.1 Do not use variables with static storage duration" id="HICPP-3_3_1" />
  <category description="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" id="HICPP-3_4_1" />
  <clone id="MISRA2004-17_6_a" newId="HICPP-3_4_1-a" />
  <category description="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" id="HICPP-3_4_2" />
  <clone id="MISRA2004-17_6_b" newId="HICPP-3_4_2-a" />
  <category description="HIC++ 3.4.3 Use RAII for resources" id="HICPP-3_4_3" />
  <clone id="CODSTA-MCPP-20" newId="HICPP-3_4_3-a" />
  <clone id="CODSTA-MCPP-21" newId="HICPP-3_4_3-b" />
  <clone id="MRM-52" newId="HICPP-3_4_3-c" />
  <category description="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" id="HICPP-3_5_1" />
  <clone id="MISRA2004-18_4" newId="HICPP-3_5_1-a" />
  <clone id="MISRA2004-6_3_b" newId="HICPP-3_5_1-b" />
  <clone id="BD-PB-PTRSUB" newId="HICPP-3_5_1-c">
    <defParameters>
      <![CDATA[
        HICPP-3_5_1-c-aggressiveMode=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-PTRCMP" newId="HICPP-3_5_1-d">
    <defParameters>
      <![CDATA[
        HICPP-3_5_1-d-aggressiveMode=true
        HICPP-3_5_1-d-reportOnComparisonFunctions=false
        HICPP-3_5_1-d-reportOnRelationalOperators=true
        HICPP-3_5_1-d-treatPointersToFieldsOfTheSameStructRelated=true
      ]]>
    </defParameters>
  </clone>
  <category description="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" id="HICPP-4_1_1" />
  <clone id="PB-41" newId="HICPP-4_1_1-a" />
  <category description="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" id="HICPP-4_2_1" />
  <category description="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" id="HICPP-4_2_2" />
  <clone id="MISRA2004-12_8" newId="HICPP-4_2_2-a" />
  <clone id="CODSTA-31" newId="HICPP-4_2_2-b" />
  <clone id="PB-66_a" newId="HICPP-4_2_2-c" />
  <clone id="PB-66_b" newId="HICPP-4_2_2-d" />
  <clone id="BD-PB-INTWRAP" newId="HICPP-4_2_2-e" />
  <clone id="BD-PB-BADSHIFT" newId="HICPP-4_2_2-f" />
  <clone id="BD-PB-INTDL" newId="HICPP-4_2_2-g" />
  <clone id="BD-PB-INTUB" newId="HICPP-4_2_2-h" />
  <clone id="BD-PB-INTVC" newId="HICPP-4_2_2-i" />
  <category description="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" id="HICPP-4_3_1" />
  <clone id="MISRA2004-10_2_b" newId="HICPP-4_3_1-a" />
  <clone id="MISRA2004-10_2_d" newId="HICPP-4_3_1-b" />
  <category description="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" id="HICPP-4_4_1" />
  <clone id="MISRA2004-10_2_a" newId="HICPP-4_4_1-a" />
  <category description="HIC++ 5.1.1 Use symbolic names instead of literal values in code" id="HICPP-5_1_1" />
  <clone id="CODSTA-26" newId="HICPP-5_1_1-a" />
  <category description="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" id="HICPP-5_1_2" />
  <clone id="MISRA2004-12_2_a" newId="HICPP-5_1_2-a" />
  <clone id="MISRA2004-12_2_b" newId="HICPP-5_1_2-b" />
  <clone id="MISRA2004-12_2_c" newId="HICPP-5_1_2-c" />
  <clone id="MISRA2004-12_2_d" newId="HICPP-5_1_2-d" />
  <clone id="MISRA2004-12_2_e" newId="HICPP-5_1_2-e" />
  <clone id="MISRA2004-12_2_f" newId="HICPP-5_1_2-f" />
  <clone id="MISRA2004-12_2_g" newId="HICPP-5_1_2-g" />
  <clone id="MISRA2004-12_13" newId="HICPP-5_1_2-h" />
  <clone id="MISRA2004-12_10" newId="HICPP-5_1_2-i" />
  <clone id="CODSTA-138" newId="HICPP-5_1_2-j" />
  <category description="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" id="HICPP-5_1_3" />
  <clone id="MISRA2004-12_1_e" newId="HICPP-5_1_3-a" />
  <clone id="MISRA2004-12_5" newId="HICPP-5_1_3-b" />
  <category description="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" id="HICPP-5_1_4" />
  <category description="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" id="HICPP-5_1_5" />
  <clone id="CODSTA-MCPP-46" newId="HICPP-5_1_5-a" />
  <category description="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" id="HICPP-5_1_6" />
  <clone id="MISRA2004-12_3" newId="HICPP-5_1_6-a" />
  <clone id="MISRA2004-12_3_b" newId="HICPP-5_1_6-b" />
  <clone id="MISRA2004-12_3_c" newId="HICPP-5_1_6-c" />
  <clone id="MISRA2004-12_4_a" newId="HICPP-5_1_6-d" />
  <clone id="CODSTA-CPP-104" newId="HICPP-5_1_6-e" />
  <clone id="CODSTA-CPP-104_b" newId="HICPP-5_1_6-f" />
  <category description="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" id="HICPP-5_2_1" />
  <clone id="BD-PB-ARRAY" newId="HICPP-5_2_1-a" />
  <clone id="BD-PB-OVERFARRAY" newId="HICPP-5_2_1-b" />
  <clone id="BD-PB-NP" newId="HICPP-5_2_1-c" />
  <category description="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" id="HICPP-5_2_2" />
  <clone id="MISRA2004-16_2" newId="HICPP-5_2_2-a" />
  <clone id="BD-PB-RECFUN" newId="HICPP-5_2_2-b" />
  <category description="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" id="HICPP-5_3_1" />
  <clone id="MISRA2004-12_9" newId="HICPP-5_3_1-a" />
  <category description="HIC++ 5.3.2 Allocate memory using new and release it using delete" id="HICPP-5_3_2" />
  <clone id="MRM-46" newId="HICPP-5_3_2-a" />
  <category description="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" id="HICPP-5_3_3" />
  <clone id="MRM-35" newId="HICPP-5_3_3-a" />
  <clone id="MRM-36" newId="HICPP-5_3_3-b" />
  <clone id="BD-RES-BADDEALLOC" newId="HICPP-5_3_3-c" />
  <category description="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" id="HICPP-5_4_1" />
  <clone id="CODSTA-CPP-11" newId="HICPP-5_4_1-a" />
  <clone id="CODSTA-CPP-09" newId="HICPP-5_4_1-b" />
  <clone id="MISRA2004-11_5" newId="HICPP-5_4_1-c" />
  <category description="HIC++ 5.4.2 Do not cast an expression to an enumeration type" id="HICPP-5_4_2" />
  <category description="HIC++ 5.4.3 Do not convert from a base class to a derived class" id="HICPP-5_4_3" />
  <clone id="OOP-35" newId="HICPP-5_4_3-a" />
  <category description="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" id="HICPP-5_5_1" />
  <clone id="BD-PB-ZERO" newId="HICPP-5_5_1-a" />
  <category description="HIC++ 5.6.1 Do not use bitwise operators with signed operands" id="HICPP-5_6_1" />
  <clone id="CODSTA-63" newId="HICPP-5_6_1-a" />
  <clone id="CODSTA-63_a" newId="HICPP-5_6_1-b" />
  <category description="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" id="HICPP-5_7_1" />
  <clone id="MISRA2004-13_3" newId="HICPP-5_7_1-a" />
  <category description="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" id="HICPP-5_7_2" />
  <clone id="CODSTA-MCPP-26" newId="HICPP-5_7_2-a">
    <defParameters>
      <![CDATA[
        HICPP-5_7_2-a-reportPotentiallyVirtualPointers=false
      ]]>
    </defParameters>
  </clone>
  <category description="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" id="HICPP-5_8_1" />
  <clone id="CODSTA-224" newId="HICPP-5_8_1-a" />
  <category description="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" id="HICPP-6_1_1" />
  <clone id="MISRA2004-14_8" newId="HICPP-6_1_1-a" />
  <clone id="MISRA2004-14_9" newId="HICPP-6_1_1-b" />
  <category description="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" id="HICPP-6_1_2" />
  <clone id="MISRA2004-14_10" newId="HICPP-6_1_2-a" />
  <clone id="MISRA2004-15_3" newId="HICPP-6_1_2-b" />
  <category description="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" id="HICPP-6_1_3" />
  <clone id="CODSTA-64_b" newId="HICPP-6_1_3-a" />
  <category description="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" id="HICPP-6_1_4" />
  <clone id="CODSTA-54" newId="HICPP-6_1_4-a" />
  <clone id="MISRA2004-15_4" newId="HICPP-6_1_4-b" />
  <category description="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" id="HICPP-6_2_1" />
  <clone id="CODSTA-MCPP-50" newId="HICPP-6_2_1-a" />
  <category description="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" id="HICPP-6_2_2" />
  <clone id="CODSTA-168" newId="HICPP-6_2_2-a" />
  <category description="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" id="HICPP-6_2_3" />
  <clone id="MISRA2004-13_6" newId="HICPP-6_2_3-a" />
  <category description="HIC++ 6.2.4 Only modify a for loop counter in the for expression" id="HICPP-6_2_4" />
  <clone id="CODSTA-169_c" newId="HICPP-6_2_4-a" />
  <category description="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" id="HICPP-6_3_1" />
  <clone id="MISRA2004-15_1" newId="HICPP-6_3_1-a" />
  <clone id="CODSTA-77" newId="HICPP-6_3_1-b" />
  <clone id="CODSTA-78" newId="HICPP-6_3_1-c" />
  <category description="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" id="HICPP-6_3_2" />
  <clone id="MISRA2004-16_8_b" newId="HICPP-6_3_2-a" />
  <category description="HIC++ 6.4.1 Postpone variable definitions as long as possible" id="HICPP-6_4_1" />
  <clone id="OPT-01" newId="HICPP-6_4_1-a" />
  <clone id="OPT-20" newId="HICPP-6_4_1-b" />
  <category description="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" id="HICPP-7_1_1" />
  <clone id="FORMAT-29" newId="HICPP-7_1_1-a" />
  <clone id="FORMAT-33" newId="HICPP-7_1_1-b" />
  <category description="HIC++ 7.1.2 Use const whenever possible" id="HICPP-7_1_2" />
  <clone id="CODSTA-CPP-53" newId="HICPP-7_1_2-a" />
  <clone id="CODSTA-CPP-53_b" newId="HICPP-7_1_2-b" />
  <category description="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3" />
  <category description="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4" />
  <clone id="FORMAT-47_a" newId="HICPP-7_1_4-a" />
  <category description="HIC++ 7.1.5 Do not inline large functions" id="HICPP-7_1_5" />
  <category description="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6" />
  <clone id="MISRA2004-6_1" newId="HICPP-7_1_6-a" />
  <clone id="CODSTA-223_c" newId="HICPP-7_1_6-b" />
  <clone id="CODSTA-MCPP-62" newId="HICPP-7_1_6-c" />
  <category description="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" id="HICPP-7_1_7" />
  <clone id="TEMPL-17" newId="HICPP-7_1_7-a" />
  <category description="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" id="HICPP-7_1_8" />
  <category description="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9" />
  <category description="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" id="HICPP-7_1_10" />
  <category description="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1" />
  <category description="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" id="HICPP-7_2_2" />
  <category description="HIC++ 7.3.1 Do not use using directives" id="HICPP-7_3_1" />
  <clone id="CODSTA-CPP-75" newId="HICPP-7_3_1-a" />
  <category description="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" id="HICPP-7_4_1" />
  <clone id="CODSTA-CPP-50" newId="HICPP-7_4_1-a" />
  <category description="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" id="HICPP-7_4_2" />
  <clone id="GLOBAL-ONEDEFINLINE" newId="HICPP-7_4_2-a" />
  <clone id="GLOBAL-ONEDEFTEMPL" newId="HICPP-7_4_2-b" />
  <clone id="GLOBAL-ONEDEFTYPE" newId="HICPP-7_4_2-c" />
  <category description="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" id="HICPP-7_4_3" />
  <clone id="GLOBAL-ONEFILEDECL" newId="HICPP-7_4_3-a" />
  <category description="HIC++ 7.5.1 Do not use the asm declaration" id="HICPP-7_5_1" />
  <clone id="CODSTA-234" newId="HICPP-7_5_1-a" />
  <category description="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" id="HICPP-8_1_1" />
  <clone id="CODSTA-89" newId="HICPP-8_1_1-a" />
  <category description="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" id="HICPP-8_2_1" />
  <clone id="MISRA2004-16_4" newId="HICPP-8_2_1-a" />
  <category description="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" id="HICPP-8_2_2" />
  <clone id="METRICS-15" newId="HICPP-8_2_2-a" />
  <category description="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3" />
  <clone id="CODSTA-CPP-108_b" newId="HICPP-8_2_3-a" />
  <category description="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" id="HICPP-8_2_4" />
  <category description="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" id="HICPP-8_3_1" />
  <clone id="METRICS-18" newId="HICPP-8_3_1-a" />
  <category description="HIC++ 8.3.3 Do not use default arguments" id="HICPP-8_3_3" />
  <category description="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" id="HICPP-8_3_4" />
  <clone id="CODSTA-MCPP-61" newId="HICPP-8_3_4-a" />
  <category description="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" id="HICPP-8_4_1" />
  <clone id="BD-PB-NOTINIT" newId="HICPP-8_4_1-a" />
  <clone id="BD-RES-FREE" newId="HICPP-8_4_1-b" />
  <clone id="MISRA-030" newId="HICPP-8_4_1-c" />
  <category description="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" id="HICPP-8_4_2" />
  <clone id="INIT-16" newId="HICPP-8_4_2-a" />
  <category description="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" id="HICPP-9_1_1" />
  <clone id="CODSTA-CPP-78" newId="HICPP-9_1_1-a" />
  <category description="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" id="HICPP-9_1_2" />
  <clone id="OOP-13" newId="HICPP-9_1_2-a" />
  <category description="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" id="HICPP-9_1_3" />
  <clone id="CODSTA-CPP-77" newId="HICPP-9_1_3-a" />
  <category description="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" id="HICPP-9_1_4" />
  <clone id="OOP-36" newId="HICPP-9_1_4-a" />
  <category description="HIC++ 9.1.5 Do not introduce virtual functions in a final class" id="HICPP-9_1_5" />
  <clone id="CODSTA-MCPP-52" newId="HICPP-9_1_5-a" />
  <category description="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" id="HICPP-9_2_1" />
  <clone id="CODSTA-96" newId="HICPP-9_2_1-a" />
  <category description="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" id="HICPP-10_1_1" />
  <clone id="OOP-06" newId="HICPP-10_1_1-a" />
  <category description="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" id="HICPP-10_2_1" />
  <clone id="CODSTA-MCPP-05" newId="HICPP-10_2_1-a" />
  <category description="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" id="HICPP-10_3_1" />
  <clone id="OOP-07_c" newId="HICPP-10_3_1-a" />
  <category description="HIC++ 11.1.1 Declare all data members private" id="HICPP-11_1_1" />
  <clone id="OOP-18" newId="HICPP-11_1_1-a" />
  <clone id="OOP-19" newId="HICPP-11_1_1-b" />
  <category description="HIC++ 11.2.1 Do not use friend declarations" id="HICPP-11_2_1" />
  <clone id="OOP-11" newId="HICPP-11_2_1-a" />
  <category description="HIC++ 12.1.1 Do not declare implicit user defined conversions" id="HICPP-12_1_1" />
  <clone id="CODSTA-CPP-04" newId="HICPP-12_1_1-a" />
  <clone id="CODSTA-MCPP-01" newId="HICPP-12_1_1-b" />
  <category description="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" id="HICPP-12_2_1" />
  <clone id="OOP-24" newId="HICPP-12_2_1-a" />
  <category description="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" id="HICPP-12_3_1" />
  <clone id="MRM-26" newId="HICPP-12_3_1-a" />
  <clone id="MRM-27" newId="HICPP-12_3_1-b" />
  <category description="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" id="HICPP-12_4_1" />
  <clone id="BD-PB-VCTOR" newId="HICPP-12_4_1-b" />
  <clone id="BD-PB-VDTOR" newId="HICPP-12_4_1-c" />
  <category description="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" id="HICPP-12_4_2" />
  <clone id="INIT-06" newId="HICPP-12_4_2-a" />
  <category description="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" id="HICPP-12_4_3" />
  <category description="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" id="HICPP-12_4_4" />
  <clone id="INIT-10" newId="HICPP-12_4_4-a" />
  <category description="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" id="HICPP-12_4_5" />
  <clone id="CODSTA-CPP-106" newId="HICPP-12_4_5-a" />
  <category description="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" id="HICPP-12_5_1" />
  <category description="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" id="HICPP-12_5_2" />
  <clone id="CODSTA-CPP-105" newId="HICPP-12_5_2-a" />
  <category description="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" id="HICPP-12_5_3" />
  <clone id="OOP-46" newId="HICPP-12_5_3-a" />
  <category description="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" id="HICPP-12_5_4" />
  <clone id="EXCEPT-21" newId="HICPP-12_5_4-a" />
  <category description="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" id="HICPP-12_5_6" />
  <clone id="CODSTA-MCPP-49" newId="HICPP-12_5_6-a" />
  <category description="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7" />
  <clone id="CODSTA-MCPP-19" newId="HICPP-12_5_7-a" />
  <category description="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" id="HICPP-12_5_8" />
  <clone id="OOP-42" newId="HICPP-12_5_8-a" />
  <category description="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" id="HICPP-13_1_1" />
  <clone id="OOP-53" newId="HICPP-13_1_1-a" />
  <category description="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" id="HICPP-13_1_2" />
  <clone id="CODSTA-MCPP-14" newId="HICPP-13_1_2-a" />
  <category description="HIC++ 13.2.1 Do not overload operators with special semantics" id="HICPP-13_2_1" />
  <clone id="CODSTA-CPP-08" newId="HICPP-13_2_1-a" />
  <clone id="CODSTA-CPP-80" newId="HICPP-13_2_1-b" />
  <category description="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" id="HICPP-13_2_2" />
  <clone id="CODSTA-CPP-101" newId="HICPP-13_2_2-a" />
  <clone id="CODSTA-CPP-102" newId="HICPP-13_2_2-b" />
  <category description="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3" />
  <category description="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" id="HICPP-13_2_4" />
  <category description="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" id="HICPP-13_2_5" />
  <clone id="CODSTA-CPP-91" newId="HICPP-13_2_5-a" />
  <category description="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" id="HICPP-14_1_1" />
  <clone id="MISRA-069" newId="HICPP-14_1_1-a" />
  <category description="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." id="HICPP-14_2_1" />
  <clone id="TEMPL-10" newId="HICPP-14_2_1-a" />
  <category description="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" id="HICPP-14_2_2" />
  <clone id="TEMPL-09" newId="HICPP-14_2_2-a" />
  <category description="HIC++ 14.2.3 Declare extern an explicitly instantiated template" id="HICPP-14_2_3" />
  <clone id="TEMPL-15" newId="HICPP-14_2_3-a" />
  <category description="HIC++ 15.1.1 Only use instances of std::exception for exceptions" id="HICPP-15_1_1" />
  <clone id="BD-PB-STDEXC" newId="HICPP-15_1_1-b" />
  <category description="HIC++ 15.2.1 Do not throw an exception from a destructor" id="HICPP-15_2_1" />
  <clone id="EXCEPT-03" newId="HICPP-15_2_1-a" />
  <category description="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" id="HICPP-15_3_1" />
  <clone id="EXCEPT-16" newId="HICPP-15_3_1-a" />
  <category description="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" id="HICPP-15_3_2" />
  <clone id="BD-PB-EXCEPT" newId="HICPP-15_3_2-a" />
  <clone id="EXCEPT-06" newId="HICPP-15_3_2-b" />
  <clone id="BD-PB-NOEXCEPT" newId="HICPP-15_3_2-c" />
  <category description="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" id="HICPP-16_1_1" />
  <clone id="PREPROC-01" newId="HICPP-16_1_1-a" />
  <clone id="PREPROC-10" newId="HICPP-16_1_1-b" />
  <clone id="PREPROC-11" newId="HICPP-16_1_1-c" />
  <clone id="PFO-02" newId="HICPP-16_1_1-d" />
  <clone id="PREPROC-10_b" newId="HICPP-16_1_1-e" />
  <clone id="PREPROC-10_c" newId="HICPP-16_1_1-f" />
  <clone id="PREPROC-22" newId="HICPP-16_1_1-g" />
  <clone id="PREPROC-23" newId="HICPP-16_1_1-h" />
  <clone id="PREPROC-25" newId="HICPP-16_1_1-i" />
  <category description="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" id="HICPP-16_1_2" />
  <clone id="PREPROC-06" newId="HICPP-16_1_2-a" />
  <clone id="NAMING-48" newId="HICPP-16_1_2-b" />
  <category description="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3" />
  <clone id="PREPROC-20" newId="HICPP-16_1_3-a" />
  <category description="HIC++ 16.1.4 Use &lt;&gt; brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4" />
  <clone id="PREPROC-29" newId="HICPP-16_1_4-a" />
  <category description="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" id="HICPP-16_1_5" />
  <clone id="CDD-DUPI" newId="HICPP-16_1_5-a" />
  <category description="HIC++ 17.1.1 Do not use std::vector&lt;bool&gt;" id="HICPP-17_1_1" />
  <clone id="STL-14" newId="HICPP-17_1_1-a" />
  <category description="HIC++ 17.2.1 Wrap use of the C Standard Library" id="HICPP-17_2_1" />
  <clone id="MISRA2004-20_5" newId="HICPP-17_2_1-b" />
  <category description="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" id="HICPP-17_3_1" />
  <clone id="CODSTA-MCPP-53" newId="HICPP-17_3_1-a" />
  <category description="HIC++ 17.3.2 Use std::forward to forward universal references" id="HICPP-17_3_2" />
  <clone id="CODSTA-MCPP-13_b" newId="HICPP-17_3_2-a" />
  <clone id="CODSTA-MCPP-13_c" newId="HICPP-17_3_2-b" />
  <clone id="CODSTA-MCPP-13_d" newId="HICPP-17_3_2-c" />
  <category description="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" id="HICPP-17_3_3" />
  <clone id="BD-PB-SUBSEQFRWD" newId="HICPP-17_3_3-a" />
  <category description="HIC++ 17.3.4 Do not create smart pointers of array type" id="HICPP-17_3_4" />
  <category description="HIC++ 17.3.5 Do not create an rvalue reference of std::array" id="HICPP-17_3_5" />
  <clone id="CODSTA-MCPP-54" newId="HICPP-17_3_5-a" />
  <category description="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" id="HICPP-17_4_1" />
  <clone id="CODSTA-MCPP-51" newId="HICPP-17_4_1-a" />
  <category description="HIC++ 17.4.2 Use API calls that construct objects in place" id="HICPP-17_4_2" />
  <clone id="CODSTA-MCPP-16_c" newId="HICPP-17_4_2-a" />
  <category description="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" id="HICPP-17_5_1" />
  <clone id="STL-23" newId="HICPP-17_5_1-a" />
  <category description="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" id="HICPP-18_1_1" />
  <category description="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" id="HICPP-18_2_1" />
  <category description="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" id="HICPP-18_2_2" />
  <clone id="BD-TRS-MLOCK" newId="HICPP-18_2_2-a" />
  <clone id="BD-TRS-CMF" newId="HICPP-18_2_2-b" />
  <category description="HIC++ 18.2.3 Do not share volatile data between threads" id="HICPP-18_2_3" />
  <category description="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4" />
  <clone id="CODSTA-MCPP-55" newId="HICPP-18_2_4-a" />
  <category description="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" id="HICPP-18_3_1" />
  <clone id="BD-TRS-DLOCK" newId="HICPP-18_3_1-a" />
  <category description="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" id="HICPP-18_3_2" />
  <clone id="BD-TRS-ORDER" newId="HICPP-18_3_2-a" />
  <category description="HIC++ 18.3.3 Do not use std::recursive mutex" id="HICPP-18_3_3" />
  <category description="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4" />
  <category description="HIC++ 18.3.5 Do not access the members of std::mutex directly" id="HICPP-18_3_5" />
  <category description="HIC++ 18.3.6 Do not use relaxed atomics" id="HICPP-18_3_6" />
  <category description="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" id="HICPP-18_4_1" />
  <!-- HIC++ end -->
  <!-- OWASP 2017 begin -->
  <category description="OWASP Top 10 Most Critical Web Application Security Risks (2017)" id="OWASP2017" />
  <category description="OWASP A1 Injection" id="OWASP2017-A1" />
  <clone id="BD-SECURITY-LOG" newId="OWASP2017-A1-a" />
  <clone id="BD-SECURITY-TDCMD" newId="OWASP2017-A1-b" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="OWASP2017-A1-c" />
  <clone id="BD-SECURITY-TDENV" newId="OWASP2017-A1-d" />
  <clone id="BD-SECURITY-TDINPUT" newId="OWASP2017-A1-e" />
  <clone id="BD-SECURITY-TDSQL" newId="OWASP2017-A1-f" />
  <category description="OWASP A2 Broken Authentication" id="OWASP2017-A2" />
  <clone id="SECURITY-37" newId="OWASP2017-A2-a" />
  <category description="OWASP A3 Sensitive Data Exposure" id="OWASP2017-A3" />
  <clone id="BD-SECURITY-RAND" newId="OWASP2017-A3-a" />
  <category description="OWASP A4 XML External Entities (XXE)" id="OWASP2017-A4" />
  <clone id="BD-SECURITY-XXEXRC" newId="OWASP2017-A4-a" />
  <category description="OWASP A5 Broken Access Control" id="OWASP2017-A5" />
  <clone id="BD-SECURITY-TDFNAMES" newId="OWASP2017-A5-a" />
  <clone id="SECURITY-44" newId="OWASP2017-A5-b" />
  <clone id="SECURITY-45" newId="OWASP2017-A5-c" />
  <category description="OWASP A6 Security Misconfiguration" id="OWASP2017-A6" />
  <clone id="EXCEPT-17" newId="OWASP2017-A6-a" />
  <clone id="EXCEPT-25" newId="OWASP2017-A6-b" />
  <clone id="BD-PB-ERRNO" newId="OWASP2017-A6-c" />
  <category description="OWASP A10 Insufficient Logging&amp;Monitoring" id="OWASP2017-A10" />
  <clone id="EXCEPT-04" newId="OWASP2017-A10-a" />
  <!-- OWASP 2017 end -->
  <!-- OWASP 2019 begin -->
  <category description="OWASP API Security Top 10 (2019)" id="OWASP2019" />
  <category description="OWASP API2 Broken User Authentication" id="OWASP2019-API2" />
  <clone id="SECURITY-37" newId="OWASP2019-API2-a" />
  <category description="OWASP API3 Excessive Data Exposure" id="OWASP2019-API3" />
  <clone id="BD-CO-EMPCON" newId="OWASP2019-API3-a" />
  <clone id="BD-PB-ARRAY" newId="OWASP2019-API3-b" />
  <clone id="BD-PB-OVERFARRAY" newId="OWASP2019-API3-c" />
  <clone id="BD-PB-OVERFFMT" newId="OWASP2019-API3-d" />
  <clone id="BD-PB-OVERFNZT" newId="OWASP2019-API3-e" />
  <clone id="BD-PB-OVERFRD" newId="OWASP2019-API3-f" />
  <clone id="BD-PB-OVERFWR" newId="OWASP2019-API3-g" />
  <clone id="BD-SECURITY-OVERFFMT" newId="OWASP2019-API3-h" />
  <clone id="BD-SECURITY-OVERFRD" newId="OWASP2019-API3-i" />
  <clone id="BD-SECURITY-OVERFWR" newId="OWASP2019-API3-j" />
  <clone id="BD-SECURITY-RAND" newId="OWASP2019-API3-k" />
  <clone id="BD-SECURITY-SENSLOG" newId="OWASP2019-API3-l" />
  <clone id="BD-TRS-SYMLINK" newId="OWASP2019-API3-m" />
  <clone id="SECURITY-03" newId="OWASP2019-API3-n" />
  <clone id="SECURITY-06" newId="OWASP2019-API3-o" />
  <clone id="SECURITY-15" newId="OWASP2019-API3-p" />
  <clone id="SECURITY-46" newId="OWASP2019-API3-q" />
  <clone id="BD-PB-COOB" newId="OWASP2019-API3-r" />
  <category description="OWASP API4 Lack of Resources &amp; Rate Limiting" id="OWASP2019-API4" />
  <clone id="BD-SECURITY-TDALLOC" newId="OWASP2019-API4-a" />
  <clone id="BD-RES-LEAKS" newId="OWASP2019-API4-b" />
  <category description="OWASP API7 Security Misconfiguration" id="OWASP2019-API7" />
  <clone id="BD-PB-ERRNO" newId="OWASP2019-API7-a" />
  <clone id="EXCEPT-17" newId="OWASP2019-API7-b" />
  <clone id="EXCEPT-25" newId="OWASP2019-API7-c" />
  <category description="OWASP API8 Injection" id="OWASP2019-API8" />
  <clone id="BD-SECURITY-TDCMD" newId="OWASP2019-API8-a" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="OWASP2019-API8-b" />
  <clone id="BD-SECURITY-TDENV" newId="OWASP2019-API8-c" />
  <clone id="BD-SECURITY-TDFNAMES" newId="OWASP2019-API8-d" />
  <clone id="BD-SECURITY-TDINPUT" newId="OWASP2019-API8-e" />
  <clone id="BD-SECURITY-TDSQL" newId="OWASP2019-API8-f" />
  <clone id="BD-SECURITY-XXEXRC" newId="OWASP2019-API8-g" />
  <clone id="SECURITY-04" newId="OWASP2019-API8-h" />
  <clone id="SECURITY-18" newId="OWASP2019-API8-i" />
  <clone id="SECURITY-20" newId="OWASP2019-API8-j" />
  <category description="OWASP API9 Improper Assets Management" id="OWASP2019-API9" />
  <clone id="CODSTA-11" newId="OWASP2019-API9-a" />
  <clone id="CODSTA-21" newId="OWASP2019-API9-b" />
  <clone id="COMMENT-09" newId="OWASP2019-API9-c" />
  <clone id="COMMENT-10" newId="OWASP2019-API9-d" />
  <clone id="MISRA-023" newId="OWASP2019-API9-e" />
  <clone id="MISRA-041" newId="OWASP2019-API9-f" />
  <clone id="MISRA2004-3_4" newId="OWASP2019-API9-g" />
  <category description="OWASP API10 Insufficient Logging &amp; Monitoring" id="OWASP2019-API10" />
  <clone id="EXCEPT-04" newId="OWASP2019-API10-a" />
  <clone id="SECURITY-21" newId="OWASP2019-API10-b" />
  <!-- OWASP 2019 end -->
  <!-- OWASP 2021 begin -->
  <category description="OWASP Top 10 Most Critical Web Application Security Risks (2021)" id="OWASP2021" />
  <category description="OWASP A1 Broken Access Control" id="OWASP2021-A1" />
  <clone id="BD-SECURITY-TDFNAMES" newId="OWASP2021-A1-a" />
  <clone id="SECURITY-44" newId="OWASP2021-A1-b" />
  <clone id="SECURITY-45" newId="OWASP2021-A1-c" />
  <category description="OWASP A2 Cryptographic Failures" id="OWASP2021-A2" />
  <clone id="BD-SECURITY-RAND" newId="OWASP2021-A2-a" />
  <category description="OWASP A3 Injection" id="OWASP2021-A3" />
  <clone id="BD-SECURITY-LOG" newId="OWASP2021-A3-a" />
  <clone id="BD-SECURITY-TDCMD" newId="OWASP2021-A3-b" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="OWASP2021-A3-c" />
  <clone id="BD-SECURITY-TDENV" newId="OWASP2021-A3-d" />
  <clone id="BD-SECURITY-TDINPUT" newId="OWASP2021-A3-e" />
  <clone id="BD-SECURITY-TDSQL" newId="OWASP2021-A3-f" />
  <category description="OWASP A4 Insecure Design" id="OWASP2021-A4" />
  <clone id="BD-SECURITY-SENSLOG" newId="OWASP2021-A4-a" />
  <category description="OWASP A5 Security Misconfiguration" id="OWASP2021-A5" />
  <clone id="EXCEPT-17" newId="OWASP2021-A5-a" />
  <clone id="EXCEPT-25" newId="OWASP2021-A5-b" />
  <clone id="BD-PB-ERRNO" newId="OWASP2021-A5-c" />
  <clone id="BD-SECURITY-XXEXRC" newId="OWASP2021-A5-d" />
  <category description="OWASP A7 Identification and Authentication Failures" id="OWASP2021-A7" />
  <clone id="SECURITY-37" newId="OWASP2021-A7-a" />
  <category description="OWASP A8 Software and Data Integrity Failures" id="OWASP2021-A8" />
  <clone id="SECURITY-04" newId="OWASP2021-A8-a" />
  <category description="OWASP A9 Security Logging and Monitoring Failures" id="OWASP2021-A9" />
  <clone id="EXCEPT-04" newId="OWASP2021-A9-a" />
  <!-- OWASP 2021 end -->
  <!-- OWASP 2023 begin -->
  <category description="OWASP API Security Top 10 (2023)" id="OWASP2023" />
  <category description="OWASP API2 Broken Authentication" id="OWASP2023-API2" />
  <clone id="SECURITY-37" newId="OWASP2023-API2-a" />
  <category description="OWASP API3 Broken Object Property Level Authorization" id="OWASP2023-API3" />
  <clone id="BD-SECURITY-SENSFREE" newId="OWASP2023-API3-a" />
  <clone id="BD-SECURITY-SENSLOG" newId="OWASP2023-API3-b" />
  <clone id="SECURITY-15" newId="OWASP2023-API3-c" />
  <category description="OWASP API4 Unrestricted Resource Consumption" id="OWASP2023-API4" />
  <clone id="BD-SECURITY-TDALLOC" newId="OWASP2023-API4-a" />
  <clone id="BD-SECURITY-TDLOOP" newId="OWASP2023-API4-b" />
  <clone id="BD-RES-STACKLIM" newId="OWASP2023-API4-c" />
  <clone id="BD-RES-LEAKS" newId="OWASP2023-API4-d" />
  <category description="OWASP API8 Security Misconfiguration" id="OWASP2023-API8" />
  <clone id="EXCEPT-17" newId="OWASP2023-API8-a" />
  <clone id="EXCEPT-25" newId="OWASP2023-API8-b" />
  <clone id="BD-PB-ERRNO" newId="OWASP2023-API8-c" />
  <category description="OWASP API9 Improper Inventory Management" id="OWASP2023-API9" />
  <clone id="COMMENT-09" newId="OWASP2023-API9-a" />
  <clone id="MISRA-023" newId="OWASP2023-API9-b" />
  <clone id="MISRA2004-3_4" newId="OWASP2023-API9-c" />
  <clone id="COMMENT-04" newId="OWASP2023-API9-d" />
  <category description="OWASP API10 Unsafe Consumption of APIs" id="OWASP2023-API10" />
  <clone id="BD-SECURITY-ARRAY" newId="OWASP2023-API10-a" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="OWASP2023-API10-b" />
  <clone id="BD-SECURITY-LOG" newId="OWASP2023-API10-c" />
  <clone id="BD-SECURITY-TDCMD" newId="OWASP2023-API10-d" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="OWASP2023-API10-e" />
  <clone id="BD-SECURITY-TDENV" newId="OWASP2023-API10-f" />
  <clone id="BD-SECURITY-TDINPUT" newId="OWASP2023-API10-g" />
  <clone id="BD-SECURITY-TDSQL" newId="OWASP2023-API10-h" />
  <clone id="BD-SECURITY-TDFNAMES" newId="OWASP2023-API10-i" />
  <clone id="SECURITY-38" newId="OWASP2023-API10-j" />
  <!-- OWASP 2023 end -->
  <!-- CWE begin -->
  <category description="Common Weakness Enumeration" id="CWE" />
  <category description="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" id="CWE-119" />
  <clone id="BD-PB-ARRAY" newId="CWE-119-a" />
  <clone id="BD-PB-OVERFARRAY" newId="CWE-119-b" />
  <clone id="BD-PB-OVERFFMT" newId="CWE-119-c" />
  <clone id="BD-PB-OVERFRD" newId="CWE-119-d" />
  <clone id="BD-PB-OVERFWR" newId="CWE-119-e" />
  <clone id="BD-SECURITY-ARRAY" newId="CWE-119-f" />
  <clone id="BD-SECURITY-BUFWRITE" newId="CWE-119-g" />
  <clone id="BD-SECURITY-OVERFRD" newId="CWE-119-h" />
  <clone id="BD-SECURITY-OVERFWR" newId="CWE-119-i" />
  <clone id="CODSTA-143" newId="CWE-119-j" />
  <clone id="BD-PB-PATHBUF" newId="CWE-119-k" />
  <clone id="BD-PB-COOB" newId="CWE-119-l" />
  <category description="CWE-20 Improper Input Validation" id="CWE-20" />
  <clone id="BD-SECURITY-ARRAY" newId="CWE-20-a" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="CWE-20-b" />
  <clone id="BD-SECURITY-LOG" newId="CWE-20-c" />
  <clone id="BD-SECURITY-TDCMD" newId="CWE-20-d" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="CWE-20-e" />
  <clone id="BD-SECURITY-TDENV" newId="CWE-20-f" />
  <clone id="BD-SECURITY-TDINPUT" newId="CWE-20-g" />
  <clone id="BD-SECURITY-TDSQL" newId="CWE-20-h" />
  <clone id="BD-SECURITY-TDFNAMES" newId="CWE-20-i" />
  <clone id="SECURITY-38" newId="CWE-20-j" />
  <category description="CWE-200 Information Exposure" id="CWE-200" />
  <clone id="SECURITY-15" newId="CWE-200-a" />
  <category description="CWE-125 Out-of-bounds Read" id="CWE-125" />
  <clone id="BD-PB-ARRAY" newId="CWE-125-a" />
  <clone id="BD-PB-OVERFARRAY" newId="CWE-125-b" />
  <clone id="BD-PB-OVERFRD" newId="CWE-125-c" />
  <clone id="BD-SECURITY-OVERFRD" newId="CWE-125-d" />
  <clone id="BD-SECURITY-ARRAY" newId="CWE-125-e" />
  <clone id="BD-PB-COOB" newId="CWE-125-f" />
  <category description="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" id="CWE-89" />
  <clone id="BD-SECURITY-TDSQL" newId="CWE-89-a" />
  <category description="CWE-416 Use After Free" id="CWE-416" />
  <clone id="BD-RES-FREE" newId="CWE-416-a" />
  <clone id="BD-PB-WRAPESC" newId="CWE-416-b" />
  <clone id="MRM-31" newId="CWE-416-c" />
  <category description="CWE-190 Integer Overflow or Wraparound" id="CWE-190" />
  <clone id="BD-PB-INTWRAP" newId="CWE-190-a" />
  <clone id="MISRA-048_a" newId="CWE-190-b" />
  <clone id="PB-65" newId="CWE-190-c" />
  <clone id="PB-65_b" newId="CWE-190-d" />
  <clone id="PB-66_a" newId="CWE-190-e" />
  <clone id="PB-66_b" newId="CWE-190-f" />
  <clone id="PB-73" newId="CWE-190-g" />
  <clone id="BD-PB-INTUB" newId="CWE-190-h" />
  <clone id="PB-73_b" newId="CWE-190-i" />
  <clone id="BD-PB-INTDL" newId="CWE-190-j" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="CWE-190-k" />
  <category description="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" id="CWE-22" />
  <clone id="BD-SECURITY-TDFNAMES" newId="CWE-22-a" />
  <category description="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" id="CWE-78" />
  <clone id="BD-SECURITY-TDCMD" newId="CWE-78-a" />
  <category description="CWE-787 Out-of-bounds Write" id="CWE-787" />
  <clone id="BD-PB-ARRAY" newId="CWE-787-a" />
  <clone id="BD-PB-OVERFARRAY" newId="CWE-787-b" />
  <clone id="BD-PB-OVERFFMT" newId="CWE-787-c" />
  <clone id="BD-PB-OVERFWR" newId="CWE-787-d" />
  <clone id="BD-SECURITY-BUFWRITE" newId="CWE-787-e" />
  <clone id="BD-SECURITY-OVERFWR" newId="CWE-787-f" />
  <clone id="BD-PB-PATHBUF" newId="CWE-787-g" />
  <clone id="BD-SECURITY-ARRAY" newId="CWE-787-h" />
  <clone id="BD-PB-COOB" newId="CWE-787-i" />
  <category description="CWE-287 Improper Authentication" id="CWE-287" />
  <clone id="SECURITY-37" newId="CWE-287-a" />
  <category description="CWE-476 NULL Pointer Dereference" id="CWE-476" />
  <clone id="BD-PB-NP" newId="CWE-476-a" />
  <category description="CWE-732 Incorrect Permission Assignment for Critical Resource" id="CWE-732" />
  <clone id="SECURITY-40" newId="CWE-732-a" />
  <clone id="SECURITY-42" newId="CWE-732-b" />
  <category description="CWE-611 Improper Restriction of XML External Entity Reference" id="CWE-611" />
  <clone id="BD-SECURITY-XXEXRC" newId="CWE-611-a" />
  <category description="CWE-798 Use of Hard-coded Credentials" id="CWE-798" />
  <clone id="CODSTA-203" newId="CWE-798-a" />
  <category description="CWE-400 Uncontrolled Resource Consumption" id="CWE-400" />
  <clone id="BD-RES-STACKLIM" newId="CWE-400-a" />
  <category description="CWE-772 Missing Release of Resource after Effective Lifetime" id="CWE-772" />
  <clone id="BD-RES-LEAKS" newId="CWE-772-a" />
  <clone id="OOP-22" newId="CWE-772-b" />
  <category description="CWE-426 Untrusted Search Path" id="CWE-426" />
  <clone id="SECURITY-04" newId="CWE-426-a" />
  <category description="CWE-269 Improper Privilege Management" id="CWE-269" />
  <clone id="SECURITY-44" newId="CWE-269-a" />
  <clone id="SECURITY-45" newId="CWE-269-b" />
  <category description="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" id="CWE-835" />
  <clone id="CODSTA-82" newId="CWE-835-a" />
  <category description="CWE-704 Incorrect Type Conversion or Cast" id="CWE-704" />
  <clone id="CODSTA-124_a" newId="CWE-704-a" />
  <clone id="CODSTA-124_b" newId="CWE-704-b" />
  <clone id="CODSTA-125" newId="CWE-704-c" />
  <clone id="CODSTA-126" newId="CWE-704-d" />
  <clone id="CODSTA-127_b" newId="CWE-704-e" />
  <clone id="CODSTA-128" newId="CWE-704-f" />
  <clone id="CODSTA-129_a" newId="CWE-704-g" />
  <clone id="CODSTA-129_b" newId="CWE-704-h" />
  <clone id="CODSTA-130" newId="CWE-704-i" />
  <clone id="MISRA-043" newId="CWE-704-j" />
  <clone id="MISRA-043_c" newId="CWE-704-k" />
  <clone id="MISRA-043_d" newId="CWE-704-l" />
  <category description="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" id="CWE-362" />
  <clone id="SECURITY-19" newId="CWE-362-a" />
  <clone id="BD-TRS-FRC" newId="CWE-362-b" />
  <clone id="BD-TRS-BITLOCK" newId="CWE-362-c" />
  <clone id="BD-TRS-FORKFILE" newId="CWE-362-d" />
  <clone id="BD-TRS-MLOCK" newId="CWE-362-e" />
  <category description="CWE-415 Double Free" id="CWE-415" />
  <clone id="BD-RES-FREE" newId="CWE-415-a" />
  <category description="CWE-863 Incorrect Authorization" id="CWE-863" />
  <clone id="SECURITY-31" newId="CWE-863-a" />
  <category description="CWE-532 Inclusion of Sensitive Information in Log Files" id="CWE-532" />
  <clone id="BD-SECURITY-SENSLOG" newId="CWE-532-a" />
  <category description="CWE-326 Inadequate Encryption Strength" id="CWE-326" />
  <clone id="SECURITY-37" newId="CWE-326-a" />
  <category description="CWE-770 Allocation of Resources Without Limits or Throttling" id="CWE-770" />
  <clone id="BD-SECURITY-TDALLOC" newId="CWE-770-a" />
  <category description="CWE-617 Reachable Assertion" id="CWE-617" />
  <clone id="CODSTA-199" newId="CWE-617-a" />
  <category description="CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')" id="CWE-77" />
  <clone id="BD-SECURITY-TDCMD" newId="CWE-77-a" />
  <category description="CWE-427: Uncontrolled Search Path Element" id="CWE-427" />
  <clone id="SECURITY-04" newId="CWE-427-a" />
  <category description="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')" id="CWE-843" />
  <clone id="MISRA2004-11_4" newId="CWE-843-a" />
  <category description="CWE-668: Exposure of Resource to Wrong Sphere" id="CWE-668" />
  <clone id="BD-SECURITY-TDFNAMES" newId="CWE-668-a" />
  <category description="CWE-401: Missing Release of Memory after Effective Lifetime" id="CWE-401" />
  <clone id="BD-RES-LEAKS" newId="CWE-401-a" />
  <category description="CWE-59: Improper Link Resolution Before File Access ('Link Following')" id="CWE-59" />
  <clone id="BD-TRS-SYMLINK" newId="CWE-59-a" />
  <category description="CWE-312: Cleartext Storage of Sensitive Information" id="CWE-312" />
  <clone id="BD-SECURITY-SENSLOG" newId="CWE-312-a" />
  <category description="CWE-390: Detection of Error Condition Without Action" id="CWE-390" />
  <clone id="EXCEPT-25" newId="CWE-390-a" />
  <clone id="OPT-51" newId="CWE-390-b" />
  <category description="CWE-366: Race Condition within a Thread" id="CWE-366" />
  <clone id="BD-TRS-THRDR" newId="CWE-366-a" />
  <!-- CWE end -->
  <!-- DISA ASD STIG begin -->
  <category description="DISA ASD STIG" id="APSC_DV" />
  <category description="APSC_DV-000060 The application must clear temporary storage and cookies when the session is terminated" id="APSC_DV-000060" />
  <clone id="SECURITY-39" newId="APSC_DV-000060-a" severity="2" />
  <clone id="SECURITY-40" newId="APSC_DV-000060-b" severity="2" />
  <category description="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." id="APSC_DV-000160" />
  <clone id="SECURITY-37" newId="APSC_DV-000160-a" severity="2" />
  <category description="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." id="APSC_DV-000170" />
  <clone id="SECURITY-37" newId="APSC_DV-000170-a" severity="2" />
  <category description="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." id="APSC_DV-000480" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-000480-a" severity="2" />
  <category description="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." id="APSC_DV-000500" />
  <clone id="SECURITY-44" newId="APSC_DV-000500-a" severity="2" />
  <category description="APSC_DV-000510 The application must execute without excessive account permissions" id="APSC_DV-000510" />
  <clone id="SECURITY-40" newId="APSC_DV-000510-a" severity="1" />
  <clone id="SECURITY-41" newId="APSC_DV-000510-b" severity="1" />
  <category description="APSC_DV-000650 The application must not write sensitive data into the application logs." id="APSC_DV-000650" />
  <clone id="SECURITY-15" newId="APSC_DV-000650-a" severity="2" />
  <category description="APSC_DV-001290 The application must protect audit information from unauthorized modification." id="APSC_DV-001290" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-001290-a" severity="2" />
  <clone id="SECURITY-38" newId="APSC_DV-001290-b" severity="2" />
  <clone id="SECURITY-20" newId="APSC_DV-001290-c" severity="2" />
  <clone id="SECURITY-11" newId="APSC_DV-001290-d" severity="2" />
  <category description="APSC_DV-001300 The application must protect audit information from unauthorized deletion." id="APSC_DV-001300" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-001300-a" severity="2" />
  <category description="APSC_DV-001350 The application must use cryptographic mechanisms to protect the integrity of audit information" id="APSC_DV-001350" />
  <clone id="SECURITY-37" newId="APSC_DV-001350-a" severity="2" />
  <category description="APSC_DV-001360 Application audit tools must be cryptographically hashed" id="APSC_DV-001360" />
  <clone id="SECURITY-37" newId="APSC_DV-001360-a" severity="2" />
  <category description="APSC_DV-001370 The integrity of the audit tools must be validated by checking the files for changes in the cryptographic hash value" id="APSC_DV-001370" />
  <clone id="SECURITY-28" newId="APSC_DV-001370-a" severity="2" />
  <clone id="SECURITY-37" newId="APSC_DV-001370-b" severity="2" />
  <category description="APSC_DV-001740 The application must only store cryptographic representations of passwords." id="APSC_DV-001740" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-001740-a" severity="1" />
  <category description="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." id="APSC_DV-001750" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-001750-a" severity="1" />
  <category description="APSC_DV-001850 The application must not display passwords/PINs as clear text." id="APSC_DV-001850" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-001850-a" severity="1" />
  <category description="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." id="APSC_DV-001860" />
  <clone id="SECURITY-37" newId="APSC_DV-001860-a" severity="2" />
  <category description="APSC_DV-001995 The application must not be vulnerable to race conditions." id="APSC_DV-001995" />
  <clone id="BD-TRS-FORKFILE" newId="APSC_DV-001995-a" severity="2" />
  <clone id="BD-TRS-SYMLINK" newId="APSC_DV-001995-b" severity="2" />
  <clone id="BD-TRS-FRC" newId="APSC_DV-001995-c" severity="2" />
  <clone id="BD-TRS-BITLOCK" newId="APSC_DV-001995-d" severity="2" />
  <clone id="BD-TRS-MLOCK" newId="APSC_DV-001995-e" severity="2" />
  <clone id="SECURITY-25" newId="APSC_DV-001995-f" severity="2" />
  <clone id="SECURITY-19" newId="APSC_DV-001995-g" severity="2" />
  <clone id="SECURITY-10" newId="APSC_DV-001995-h" severity="2" />
  <clone id="BD-PB-SIGHAN" newId="APSC_DV-001995-i" severity="2" />
  <category description="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." id="APSC_DV-002000" />
  <clone id="BD-RES-LEAKS" newId="APSC_DV-002000-a" severity="2" />
  <category description="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." id="APSC_DV-002010" />
  <clone id="SECURITY-37" newId="APSC_DV-002010-a" severity="2" />
  <category description="APSC_DV-002020 The application must utilize FIPS-validated cryptographic modules when signing application components" id="APSC_DV-002020" />
  <clone id="SECURITY-28" newId="APSC_DV-002020-a" severity="2" />
  <clone id="SECURITY-37" newId="APSC_DV-002020-b" severity="2" />
  <category description="APSC_DV-002030 The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes" id="APSC_DV-002030" />
  <clone id="SECURITY-28" newId="APSC_DV-002030-a" severity="2" />
  <clone id="SECURITY-37" newId="APSC_DV-002030-b" severity="2" />
  <category description="APSC_DV-002040 The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection" id="APSC_DV-002040" />
  <clone id="SECURITY-28" newId="APSC_DV-002040-a" severity="2" />
  <clone id="SECURITY-37" newId="APSC_DV-002040-b" severity="2" />
  <category description="APSC_DV-002050 Applications making SAML assertions must use FIPS-approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement" id="APSC_DV-002050" />
  <clone id="SECURITY-28" newId="APSC_DV-002050-a" severity="2" />
  <clone id="SECURITY-02" newId="APSC_DV-002050-b" severity="2" />
  <clone id="BD-SECURITY-RAND" newId="APSC_DV-002050-c" severity="2" />
  <category description="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." id="APSC_DV-002290" />
  <clone id="SECURITY-02_b" newId="APSC_DV-002290-a" severity="2" />
  <clone id="BD-SECURITY-RAND" newId="APSC_DV-002290-b" severity="2" />
  <clone id="CODSTA-MCPP-41" newId="APSC_DV-002290-c" severity="2" />
  <clone id="SECURITY-02" newId="APSC_DV-002290-d" severity="2" />
  <category description="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." id="APSC_DV-002350" />
  <clone id="SECURITY-37" newId="APSC_DV-002350-a" severity="2" />
  <category description="APSC_DV-002380 Applications must prevent unauthorized and unintended information transfer via shared system resources" id="APSC_DV-002380" />
  <clone id="SECURITY-46" newId="APSC_DV-002380-a" severity="2" />
  <category description="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." id="APSC_DV-002390" />
  <clone id="BD-SECURITY-XXEXRC" newId="APSC_DV-002390-a" severity="2" />
  <clone id="CODSTA-201" newId="APSC_DV-002390-b" severity="2" />
  <clone id="SECURITY-14" newId="APSC_DV-002390-c" severity="2" />
  <clone id="SECURITY-22" newId="APSC_DV-002390-d" severity="2" />
  <category description="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." id="APSC_DV-002400" />
  <clone id="BD-SECURITY-TDINPUT" newId="APSC_DV-002400-a" severity="2" />
  <clone id="PB-44" newId="APSC_DV-002400-b" severity="2" />
  <clone id="SECURITY-10" newId="APSC_DV-002400-c" severity="2" />
  <clone id="SECURITY-25" newId="APSC_DV-002400-d" severity="2" />
  <category description="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." id="APSC_DV-002440" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-002440-a" severity="1" />
  <category description="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." id="APSC_DV-002460" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-002460-a" severity="2" />
  <category description="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." id="APSC_DV-002470" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-002470-a" severity="2" />
  <category description="APSC_DV-002480 The application must not disclose unnecessary information to users." id="APSC_DV-002480" />
  <clone id="SECURITY-15" newId="APSC_DV-002480-a" severity="2" />
  <category description="APSC_DV-002485 The application must not store sensitive information in hidden fields" id="APSC_DV-002485" />
  <clone id="CODSTA-203" newId="APSC_DV-002485-a" severity="1" />
  <clone id="SECURITY-03" newId="APSC_DV-002485-b" severity="1" />
  <category description="APSC_DV-002510 The application must protect from command injection." id="APSC_DV-002510" />
  <clone id="BD-SECURITY-TDCMD" newId="APSC_DV-002510-a" severity="1" />
  <category description="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." id="APSC_DV-002520" />
  <clone id="BD-SECURITY-TDENV" newId="APSC_DV-002520-a" severity="2" />
  <clone id="BD-SECURITY-TDFNAMES" newId="APSC_DV-002520-b" severity="2" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-002520-c" severity="2" />
  <clone id="SECURITY-36" newId="APSC_DV-002520-d" severity="2" />
  <clone id="BD-SECURITY-ARRAY" newId="APSC_DV-002520-e" severity="2" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="APSC_DV-002520-f" severity="2" />
  <clone id="BD-SECURITY-LOG" newId="APSC_DV-002520-g" severity="2" />
  <clone id="BD-SECURITY-TDCMD" newId="APSC_DV-002520-h" severity="2" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="APSC_DV-002520-i" severity="2" />
  <clone id="BD-SECURITY-TDINPUT" newId="APSC_DV-002520-j" severity="2" />
  <clone id="SECURITY-38" newId="APSC_DV-002520-k" severity="2" />
  <category description="APSC_DV-002530 The application must validate all input." id="APSC_DV-002530" />
  <clone id="BD-SECURITY-TDENV" newId="APSC_DV-002530-a" severity="2" />
  <clone id="BD-SECURITY-TDFNAMES" newId="APSC_DV-002530-b" severity="2" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-002530-c" severity="2" />
  <clone id="SECURITY-36" newId="APSC_DV-002530-d" severity="2" />
  <clone id="BD-SECURITY-ARRAY" newId="APSC_DV-002530-e" severity="2" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="APSC_DV-002530-f" severity="2" />
  <clone id="BD-SECURITY-LOG" newId="APSC_DV-002530-g" severity="2" />
  <clone id="BD-SECURITY-TDCMD" newId="APSC_DV-002530-h" severity="2" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="APSC_DV-002530-i" severity="2" />
  <clone id="BD-SECURITY-TDINPUT" newId="APSC_DV-002530-j" severity="2" />
  <clone id="SECURITY-38" newId="APSC_DV-002530-k" severity="2" />
  <category description="APSC_DV-002540 The application must not be vulnerable to SQL Injection." id="APSC_DV-002540" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-002540-a" severity="1" />
  <category description="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." id="APSC_DV-002550" />
  <clone id="BD-SECURITY-TDENV" newId="APSC_DV-002550-a" severity="1" />
  <clone id="BD-SECURITY-TDFNAMES" newId="APSC_DV-002550-b" severity="1" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-002550-c" severity="1" />
  <clone id="SECURITY-36" newId="APSC_DV-002550-d" severity="1" />
  <clone id="BD-SECURITY-ARRAY" newId="APSC_DV-002550-e" severity="1" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="APSC_DV-002550-f" severity="1" />
  <clone id="BD-SECURITY-LOG" newId="APSC_DV-002550-g" severity="1" />
  <clone id="BD-SECURITY-TDCMD" newId="APSC_DV-002550-h" severity="1" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="APSC_DV-002550-i" severity="1" />
  <clone id="BD-SECURITY-TDINPUT" newId="APSC_DV-002550-j" severity="1" />
  <clone id="SECURITY-38" newId="APSC_DV-002550-k" severity="1" />
  <category description="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." id="APSC_DV-002560" />
  <clone id="BD-SECURITY-TDENV" newId="APSC_DV-002560-a" severity="1" />
  <clone id="BD-SECURITY-TDFNAMES" newId="APSC_DV-002560-b" severity="1" />
  <clone id="BD-SECURITY-TDSQL" newId="APSC_DV-002560-c" severity="1" />
  <clone id="SECURITY-36" newId="APSC_DV-002560-d" severity="1" />
  <clone id="BD-SECURITY-ARRAY" newId="APSC_DV-002560-e" severity="1" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="APSC_DV-002560-f" severity="1" />
  <clone id="BD-SECURITY-LOG" newId="APSC_DV-002560-g" severity="1" />
  <clone id="BD-SECURITY-TDCMD" newId="APSC_DV-002560-h" severity="1" />
  <clone id="BD-SECURITY-TDCONSOLE" newId="APSC_DV-002560-i" severity="1" />
  <clone id="BD-SECURITY-TDINPUT" newId="APSC_DV-002560-j" severity="1" />
  <clone id="SECURITY-38" newId="APSC_DV-002560-k" severity="1" />
  <category description="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." id="APSC_DV-002570" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-002570-a" severity="2" />
  <clone id="SECURITY-15" newId="APSC_DV-002570-b" severity="2" />
  <category description="APSC_DV-002580 The application must reveal error messages only to the ISSO, ISSM, or SA" id="APSC_DV-002580" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-002580-a" severity="2" />
  <clone id="SECURITY-15" newId="APSC_DV-002580-b" severity="2" />
  <category description="APSC_DV-002590 The application must not be vulnerable to overflow attacks." id="APSC_DV-002590" />
  <clone id="BD-PB-OVERFFMT" newId="APSC_DV-002590-a" severity="1" />
  <clone id="BD-PB-OVERFNZT" newId="APSC_DV-002590-b" severity="1" />
  <clone id="BD-PB-OVERFRD" newId="APSC_DV-002590-c" severity="1" />
  <clone id="BD-PB-OVERFWR" newId="APSC_DV-002590-d" severity="1" />
  <clone id="BD-PB-INTWRAP" newId="APSC_DV-002590-e" severity="1" />
  <clone id="BD-SECURITY-BUFWRITE" newId="APSC_DV-002590-f" severity="1" />
  <clone id="BD-SECURITY-TDINTOVERF" newId="APSC_DV-002590-g" severity="1" />
  <clone id="BD-SECURITY-OVERFFMT" newId="APSC_DV-002590-h" severity="1" />
  <clone id="BD-SECURITY-OVERFRD" newId="APSC_DV-002590-i" severity="1" />
  <clone id="BD-SECURITY-OVERFWR" newId="APSC_DV-002590-j" severity="1" />
  <clone id="BD-PB-PATHBUF" newId="APSC_DV-002590-k" severity="1" />
  <clone id="BD-PB-INTUB" newId="APSC_DV-002590-l" severity="1" />
  <category description="APSC_DV-003100 The application must use encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange" id="APSC_DV-003100" />
  <clone id="SECURITY-37" newId="APSC_DV-003100-a" severity="2" />
  <category description="APSC_DV-003110 The application must not contain embedded authentication data." id="APSC_DV-003110" />
  <clone id="CODSTA-203" newId="APSC_DV-003110-a" severity="1" />
  <category description="APSC_DV-003120 The application must have the capability to mark sensitive/classified output when required" id="APSC_DV-003120" />
  <clone id="BD-SECURITY-SENSLOG" newId="APSC_DV-003120-a" severity="1" />
  <clone id="SECURITY-15" newId="APSC_DV-003120-b" severity="1" />
  <clone id="SECURITY-46" newId="APSC_DV-003120-c" severity="1" />
  <category description="APSC_DV-003140 Application files must be cryptographically hashed prior to deploying to DoD operational networks" id="APSC_DV-003140" />
  <clone id="SECURITY-37" newId="APSC_DV-003140-a" severity="2" />
  <category description="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." id="APSC_DV-003235" />
  <clone id="CODSTA-227" newId="APSC_DV-003235-a" severity="2" />
  <clone id="EXCEPT-25" newId="APSC_DV-003235-b" severity="2" />
  <clone id="MISRA2004-16_10" newId="APSC_DV-003235-c" severity="2" />
  <clone id="EXCEPT-17" newId="APSC_DV-003235-d" severity="2" />
  <category description="APSC_DV-003280 Default passwords must be changed" id="APSC_DV-003280" />
  <clone id="CODSTA-203" newId="APSC_DV-003280-a" severity="1" />
  <category description="APSC_DV-003320 Protections against DoS attacks must be implemented" id="APSC_DV-003320" />
  <clone id="SECURITY-10" newId="APSC_DV-003320-a" severity="2" />
  <clone id="SECURITY-25" newId="APSC_DV-003320-b" severity="2" />
  <clone id="BD-SECURITY-TDALLOC" newId="APSC_DV-003320-c" severity="2" />
  <clone id="BD-SECURITY-TDLOOP" newId="APSC_DV-003320-d" severity="2" />
  <!-- DISA ASD STIG end -->
  <!-- MISRA C++ 2023 begin -->
  <category description="MISRA C++ 2023" id="MISRACPP2023" />
  <category description="Rule 0.0.1 (Required) A function shall not contain unreachable statements" id="MISRACPP2023-0_0_1" />
  <clone id="MISRA2004-14_1_a" newId="MISRACPP2023-0_0_1-a" severity="2" />
  <clone id="MISRA2004-14_1_b" newId="MISRACPP2023-0_0_1-b" severity="2" />
  <clone id="MISRA2004-14_1_c" newId="MISRACPP2023-0_0_1-c" severity="2" />
  <clone id="MISRA2004-14_1_d" newId="MISRACPP2023-0_0_1-d" severity="2" />
  <clone id="MISRA2004-14_1_e" newId="MISRACPP2023-0_0_1-e" severity="2" />
  <clone id="MISRA2004-14_1_f" newId="MISRACPP2023-0_0_1-f" severity="2" />
  <clone id="MISRA2004-14_1_g" newId="MISRACPP2023-0_0_1-g" severity="2" />
  <clone id="EXCEPT-17" newId="MISRACPP2023-0_0_1-h" severity="2" />
  <clone id="EXCEPT-24" newId="MISRACPP2023-0_0_1-i" severity="2" />
  <clone id="EXCEPT-27" newId="MISRACPP2023-0_0_1-j" severity="2" />
  <category description="Rule 0.0.2 (Advisory) Controlling expressions should not be invariant" id="MISRACPP2023-0_0_2" />
  <clone id="BD-PB-CC" newId="MISRACPP2023-0_0_2-a" severity="4">
    <defParameters>
      <![CDATA[
        MISRACPP2023-0_0_2-a-violateOnConstantCondition=true
        MISRACPP2023-0_0_2-a-violateOnNoIf=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 0.1.1 (Advisory) A value should not be unnecessarily written to a local object" id="MISRACPP2023-0_1_1" />
  <clone id="BD-PB-VOVR" newId="MISRACPP2023-0_1_1-a" severity="4">
    <defParameters>
      <![CDATA[
        MISRACPP2023-0_1_1-a-reportOnPrimitivesDeclarations=true
        MISRACPP2023-0_1_1-a-reportOnVariableDefaultDeclarations=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 0.1.2 (Required) The value returned by a function shall be used" id="MISRACPP2023-0_1_2" />
  <clone id="CODSTA-CPP-58" newId="MISRACPP2023-0_1_2-a" severity="2" />
  <category description="Rule 0.2.1 (Advisory) Variables with limited visibility should be used at least once" id="MISRACPP2023-0_2_1" />
  <clone id="OPT-02" newId="MISRACPP2023-0_2_1-a" severity="4" />
  <clone id="OPT-43" newId="MISRACPP2023-0_2_1-b" severity="4" />
  <category description="Rule 0.2.2 (Required) A named function parameter shall be used at least once" id="MISRACPP2023-0_2_2" />
  <clone id="OPT-03" newId="MISRACPP2023-0_2_2-a" severity="2" />
  <clone id="OPT-42" newId="MISRACPP2023-0_2_2-b" severity="2" />
  <category description="Rule 0.2.3 (Advisory) Types with limited visibility should be used at least once" id="MISRACPP2023-0_2_3" />
  <clone id="OPT-46" newId="MISRACPP2023-0_2_3-a" severity="4" />
  <clone id="OPT-47" newId="MISRACPP2023-0_2_3-b" severity="4" />
  <category description="Rule 0.2.4 (Advisory) Functions with limited visibility should be used at least once" id="MISRACPP2023-0_2_4" />
  <clone id="BD-PB-UCMETH" newId="MISRACPP2023-0_2_4-a" severity="4">
    <defParameters>
      <![CDATA[
        MISRACPP2023-0_2_4-a-protected=false
        MISRACPP2023-0_2_4-a-virtual=false
      ]]>
    </defParameters>
  </clone>
  <category description="Dir 0.3.1 (Advisory) Floating-point arithmetic should be used appropriately" id="MISRACPP2023-0_3_1" />
  <clone id="CODSTA-190" newId="MISRACPP2023-0_3_1-a" severity="4" />
  <clone id="CODSTA-225" newId="MISRACPP2023-0_3_1-b" severity="4" />
  <clone id="MISRA-065" newId="MISRACPP2023-0_3_1-c" severity="4" />
  <clone id="BD-PB-NANINF" newId="MISRACPP2023-0_3_1-d" severity="4" />
  <category description="Dir 0.3.2 (Required) A function call shall not violate the function's preconditions" id="MISRACPP2023-0_3_2" />
  <clone id="BD-API-BADPARAM" newId="MISRACPP2023-0_3_2-a" severity="2" />
  <category description="Rule 4.1.2 (Advisory) Deprecated features should not be used" id="MISRACPP2023-4_1_2" />
  <clone id="CODSTA-MCPP-58" newId="MISRACPP2023-4_1_2-a" severity="4" />
  <clone id="CODSTA-MCPP-59" newId="MISRACPP2023-4_1_2-b" severity="4" />
  <clone id="EXCEPT-23" newId="MISRACPP2023-4_1_2-c" severity="4" />
  <clone id="OPT-44" newId="MISRACPP2023-4_1_2-d" severity="4" />
  <category description="Rule 4.1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" id="MISRACPP2023-4_1_3" />
  <clone id="BD-PB-BADSHIFT" newId="MISRACPP2023-4_1_3-a" severity="2" />
  <clone id="BD-PB-INTUB" newId="MISRACPP2023-4_1_3-b" severity="2" />
  <clone id="BD-PB-NP" newId="MISRACPP2023-4_1_3-c" severity="2" />
  <clone id="BD-PB-ZERO" newId="MISRACPP2023-4_1_3-d" severity="2" />
  <category description="Rule 4.6.1 (Required) Operations on a memory location shall be sequenced appropriately" id="MISRACPP2023-4_6_1" />
  <clone id="MISRA2004-12_2_a" newId="MISRACPP2023-4_6_1-a" severity="2" />
  <clone id="MISRA2004-12_2_b" newId="MISRACPP2023-4_6_1-b" severity="2" />
  <clone id="MISRA2004-12_2_c" newId="MISRACPP2023-4_6_1-c" severity="2" />
  <clone id="MISRA2004-12_2_d" newId="MISRACPP2023-4_6_1-d" severity="2" />
  <clone id="MISRA2004-12_2_e" newId="MISRACPP2023-4_6_1-e" severity="2" />
  <clone id="MISRA2004-12_2_f" newId="MISRACPP2023-4_6_1-f" severity="2" />
  <clone id="MISRA2004-12_2_g" newId="MISRACPP2023-4_6_1-g" severity="2" />
  <category description="Rule 5.0.1 (Advisory) Trigraph-like sequences should not be used" id="MISRACPP2023-5_0_1" />
  <clone id="MISRA2004-4_2" newId="MISRACPP2023-5_0_1-a" severity="4" />
  <category description="Rule 5.7.1 (Required) The character sequence /* shall not be used within a C-style comment" id="MISRACPP2023-5_7_1" />
  <clone id="MISRA2004-2_3" newId="MISRACPP2023-5_7_1-a" severity="2" />
  <category description="Dir 5.7.2 (Advisory) Sections of code should not be &quot;commented out&quot;" id="MISRACPP2023-5_7_2" />
  <clone id="MISRA2004-2_4" newId="MISRACPP2023-5_7_2-a" severity="4" />
  <category description="Rule 5.7.3 (Required) Line-splicing shall not be used in // comments" id="MISRACPP2023-5_7_3" />
  <clone id="COMMENT-13" newId="MISRACPP2023-5_7_3-a" severity="2" />
  <category description="Rule 5.10.1 (Required) User-defined identifiers shall have an appropriate form" id="MISRACPP2023-5_10_1" />
  <clone id="CODSTA-CPP-95_b" newId="MISRACPP2023-5_10_1-a" severity="2" />
  <clone id="NAMING-33" newId="MISRACPP2023-5_10_1-b" severity="2" />
  <clone id="NAMING-33_b" newId="MISRACPP2023-5_10_1-c" severity="2" />
  <clone id="NAMING-51" newId="MISRACPP2023-5_10_1-d" severity="2" />
  <clone id="NAMING-51_b" newId="MISRACPP2023-5_10_1-e" severity="2" />
  <clone id="NAMING-55" newId="MISRACPP2023-5_10_1-f" severity="2" />
  <clone id="NAMING-56" newId="MISRACPP2023-5_10_1-g" severity="2" />
  <category description="Rule 5.13.1 (Required) Within character literals and non raw-string literals, \ shall only be used to form a defined escape sequence or universal character name" id="MISRACPP2023-5_13_1" />
  <clone id="CODSTA-CPP-60_b" newId="MISRACPP2023-5_13_1-a" severity="2" />
  <category description="Rule 5.13.2 (Required) Octal escape sequences, hexadecimal escape sequences and universal character names shall be terminated" id="MISRACPP2023-5_13_2" />
  <clone id="CODSTA-117" newId="MISRACPP2023-5_13_2-a" severity="2" />
  <category description="Rule 5.13.3 (Required) Octal constants shall not be used" id="MISRACPP2023-5_13_3" />
  <clone id="MISRA2004-7_1_a" newId="MISRACPP2023-5_13_3-a" severity="2" />
  <category description="Rule 5.13.4 (Required) Unsigned integer literals shall be appropriately suffixed" id="MISRACPP2023-5_13_4" />
  <clone id="MISRA2004-10_6" newId="MISRACPP2023-5_13_4-a" severity="2" />
  <category description="Rule 5.13.5 (Required) The lowercase form of &quot;L&quot; shall not be used as the first character in a literal suffix" id="MISRACPP2023-5_13_5" />
  <clone id="PORT-01_b" newId="MISRACPP2023-5_13_5-a" severity="2" />
  <category description="Rule 5.13.6 (Required) An integer-literal of type long long shall not use a single L or l in any suffix" id="MISRACPP2023-5_13_6" />
  <clone id="PORT-38" newId="MISRACPP2023-5_13_6-a" severity="2" />
  <category description="Rule 5.13.7 (Required) String literals with different encoding prefixes shall not be concatenated" id="MISRACPP2023-5_13_7" />
  <clone id="PB-38_b" newId="MISRACPP2023-5_13_7-a" severity="2" />
  <clone id="PB-38_c" newId="MISRACPP2023-5_13_7-b" severity="2" />
  <category description="Rule 6.0.1 (Required) Block scope declarations shall not be visually ambiguous" id="MISRACPP2023-6_0_1" />
  <clone id="MISRA2004-8_6" newId="MISRACPP2023-6_0_1-a" severity="2" />
  <clone id="FORMAT-48" newId="MISRACPP2023-6_0_1-b" severity="2" />
  <clone id="FORMAT-49" newId="MISRACPP2023-6_0_1-c" severity="2" />
  <category description="Rule 6.0.2 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" id="MISRACPP2023-6_0_2" />
  <clone id="MISRA2004-8_12" newId="MISRACPP2023-6_0_2-a" severity="4" />
  <category description="Rule 6.0.3 (Advisory) The only declarations in the global namespace should be main, namespace declarations and extern &quot;C&quot; declarations" id="MISRACPP2023-6_0_3" />
  <clone id="CODSTA-CPP-36" newId="MISRACPP2023-6_0_3-a" severity="4" />
  <category description="Rule 6.0.4 (Required) The identifier main shall not be used for a function other than the global function main" id="MISRACPP2023-6_0_4" />
  <clone id="CODSTA-76" newId="MISRACPP2023-6_0_4-a" severity="2" />
  <category description="Rule 6.2.1 (Required) The one-definition rule shall not be violated" id="MISRACPP2023-6_2_1" />
  <clone id="GLOBAL-ONEDEFRULE" newId="MISRACPP2023-6_2_1-a" severity="2" />
  <category description="Rule 6.2.2 (Required) All declarations of a variable or function shall have the same type" id="MISRACPP2023-6_2_2" />
  <clone id="GLOBAL-COMPATDECLS" newId="MISRACPP2023-6_2_2-a" severity="2" />
  <clone id="GLOBAL-EXCSPECDECL" newId="MISRACPP2023-6_2_2-b" severity="2" />
  <category description="Rule 6.2.3 (Required) The source code used to implement an entity shall appear only once" id="MISRACPP2023-6_2_3" />
  <clone id="GLOBAL-ONEEXTERNDEF" newId="MISRACPP2023-6_2_3-a" severity="2" />
  <clone id="GLOBAL-ONEDEFTYPE" newId="MISRACPP2023-6_2_3-b" severity="2" />
  <clone id="GLOBAL-ONEDEFINLINE" newId="MISRACPP2023-6_2_3-c" severity="2" />
  <clone id="TEMPL-16" newId="MISRACPP2023-6_2_3-d" severity="2" />
  <category description="Rule 6.2.4 (Required) A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="MISRACPP2023-6_2_4" />
  <clone id="PFO-01" newId="MISRACPP2023-6_2_4-a" severity="2" />
  <category description="Rule 6.4.1 (Required) A variable declared in an inner scope shall not hide a variable declared in an outer scope" id="MISRACPP2023-6_4_1" />
  <clone id="CODSTA-CPP-110" newId="MISRACPP2023-6_4_1-f" severity="2" />
  <clone id="CODSTA-303" newId="MISRACPP2023-6_4_1-g" severity="2" />
  <category description="Rule 6.4.2 (Required) Derived classes shall not conceal functions that are inherited from their bases" id="MISRACPP2023-6_4_2" />
  <clone id="OOP-32" newId="MISRACPP2023-6_4_2-a" severity="2" />
  <clone id="OOP-53" newId="MISRACPP2023-6_4_2-b" severity="2" />
  <category description="Rule 6.4.3 (Required) A name that is present in a dependent base shall not be resolved by unqualified lookup" id="MISRACPP2023-6_4_3" />
  <clone id="TEMPL-12" newId="MISRACPP2023-6_4_3-a" severity="2" />
  <category description="Rule 6.5.1 (Advisory) A function or object with external linkage should be introduced in a header file" id="MISRACPP2023-6_5_1" />
  <clone id="MISRA-023" newId="MISRACPP2023-6_5_1-a" severity="4" />
  <category description="Rule 6.5.2 (Advisory) Internal linkage should be specified appropriately" id="MISRACPP2023-6_5_2" />
  <clone id="CODSTA-CPP-50" newId="MISRACPP2023-6_5_2-a" severity="4" />
  <clone id="MISRA-024" newId="MISRACPP2023-6_5_2-b" severity="4" />
  <category description="Rule 6.7.1 (Required) Local variables shall not have static storage duration" id="MISRACPP2023-6_7_1" />
  <clone id="CODSTA-04" newId="MISRACPP2023-6_7_1-a" severity="2" />
  <category description="Rule 6.7.2 (Required) Global variables shall not be used" id="MISRACPP2023-6_7_2" />
  <clone id="CODSTA-CPP-82" newId="MISRACPP2023-6_7_2-a" severity="2" />
  <category description="Rule 6.8.1 (Required) An object shall not be accessed outside of its lifetime" id="MISRACPP2023-6_8_1" />
  <clone id="BD-PB-WRAPESC" newId="MISRACPP2023-6_8_1-a" severity="2" />
  <clone id="BD-PB-NAUNF" newId="MISRACPP2023-6_8_1-b" severity="2" />
  <clone id="BD-PB-LIFETIME" newId="MISRACPP2023-6_8_1-c" severity="2" />
  <category description="Rule 6.8.2 (Mandatory) A function must not return a reference or a pointer to a local variable with automatic storage duration" id="MISRACPP2023-6_8_2" />
  <clone id="MISRA2004-17_6_a" newId="MISRACPP2023-6_8_2-a" severity="1" />
  <clone id="CODSTA-MCPP-17" newId="MISRACPP2023-6_8_2-b" severity="1" />
  <category description="Rule 6.8.3 (Required) An assignment operator shall not assign the address of an object with automatic storage duration to an object with a greater lifetime" id="MISRACPP2023-6_8_3" />
  <clone id="CODSTA-311" newId="MISRACPP2023-6_8_3-a" severity="2" />
  <category description="Rule 6.8.4 (Advisory) Member functions returning references to their object should be ref-qualified appropriately" id="MISRACPP2023-6_8_4" />
  <clone id="CODSTA-CPP-206" newId="MISRACPP2023-6_8_4-a" severity="4" />
  <category description="Rule 6.9.1 (Required) The same type aliases shall be used in all declarations of the same entity" id="MISRACPP2023-6_9_1" />
  <clone id="CODSTA-67_b" newId="MISRACPP2023-6_9_1-a" severity="2" />
  <category description="Rule 6.9.2 (Advisory) The names of the standard signed integer types and standard unsigned integer types should not be used" id="MISRACPP2023-6_9_2" />
  <clone id="CODSTA-223_c" newId="MISRACPP2023-6_9_2-a" severity="4" />
  <category description="Rule 7.0.1 (Required) There shall be no conversion from type bool" id="MISRACPP2023-7_0_1" />
  <clone id="CODSTA-CPP-211" newId="MISRACPP2023-7_0_1-a" severity="2" />
  <category description="Rule 7.0.2 (Required) There shall be no conversion to type bool" id="MISRACPP2023-7_0_2" />
  <clone id="CODSTA-CPP-212" newId="MISRACPP2023-7_0_2-a" severity="2" />
  <category description="Rule 7.0.3 (Required) The numerical value of a character shall not be used" id="MISRACPP2023-7_0_3" />
  <clone id="CODSTA-316" newId="MISRACPP2023-7_0_3-a" severity="2" />
  <category description="Rule 7.0.4 (Required) The operands of bitwise operators and shift operators shall be appropriate" id="MISRACPP2023-7_0_4" />
  <clone id="CODSTA-307" newId="MISRACPP2023-7_0_4-a" severity="2" />
  <clone id="CODSTA-308" newId="MISRACPP2023-7_0_4-b" severity="2" />
  <category description="Rule 7.0.5 (Required) Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" id="MISRACPP2023-7_0_5" />
  <clone id="CODSTA-310" newId="MISRACPP2023-7_0_5-a" severity="2" />
  <category description="Rule 7.0.6 (Required) Assignment between numeric types shall be appropriate" id="MISRACPP2023-7_0_6" />
  <clone id="CODSTA-312" newId="MISRACPP2023-7_0_6-a" severity="2" />
  <category description="Rule 7.11.1 (Required) nullptr shall be the only form of the null-pointer-constant" id="MISRACPP2023-7_11_1" />
  <clone id="CODSTA-MCPP-04" newId="MISRACPP2023-7_11_1-a" severity="2" />
  <clone id="CODSTA-CPP-111" newId="MISRACPP2023-7_11_1-b" severity="2" />
  <category description="Rule 7.11.2 (Required) An array passed as a function argument shall not decay to a pointer" id="MISRACPP2023-7_11_2" />
  <clone id="PB-41_b" newId="MISRACPP2023-7_11_2-a" severity="2" />
  <clone id="PB-41_c" newId="MISRACPP2023-7_11_2-b" severity="2" />
  <category description="Rule 7.11.3 (Required) A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" id="MISRACPP2023-7_11_3" />
  <clone id="CODSTA-309" newId="MISRACPP2023-7_11_3-a" severity="2" />
  <category description="Rule 8.0.1 (Advisory) Parentheses should be used to make the meaning of an expression appropriately explicit" id="MISRACPP2023-8_0_1" />
  <clone id="FORMAT-25" newId="MISRACPP2023-8_0_1-a" severity="4" />
  <clone id="FORMAT-50" newId="MISRACPP2023-8_0_1-b" severity="4" />
  <category description="Rule 8.1.1 (Required) A non-transient lambda shall not implicitly capture this" id="MISRACPP2023-8_1_1" />
  <clone id="CODSTA-MCPP-104" newId="MISRACPP2023-8_1_1-a" severity="2" />
  <category description="Rule 8.1.2 (Advisory) Variables should be captured explicitly in a non-transient lambda" id="MISRACPP2023-8_1_2" />
  <clone id="CODSTA-MCPP-103" newId="MISRACPP2023-8_1_2-a" severity="4" />
  <category description="Rule 8.2.1 (Required) A virtual base class shall only be cast to a derived class by means of dynamic_cast" id="MISRACPP2023-8_2_1" />
  <clone id="OOP-50" newId="MISRACPP2023-8_2_1-a" severity="2" />
  <category description="Rule 8.2.2 (Required) C-style casts and functional notation casts shall not be used" id="MISRACPP2023-8_2_2" />
  <clone id="CODSTA-CPP-66" newId="MISRACPP2023-8_2_2-a" severity="2" />
  <category description="Rule 8.2.3 (Required) A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference" id="MISRACPP2023-8_2_3" />
  <clone id="CODSTA-301" newId="MISRACPP2023-8_2_3-a" severity="2" />
  <category description="Rule 8.2.4 (Required) Casts shall not be performed between a pointer to function and any other type" id="MISRACPP2023-8_2_4" />
  <clone id="CODSTA-124_c" newId="MISRACPP2023-8_2_4-a" severity="2" />
  <category description="Rule 8.2.5 (Required) reinterpret_cast shall not be used" id="MISRACPP2023-8_2_5" />
  <clone id="CODSTA-CPP-09" newId="MISRACPP2023-8_2_5-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRACPP2023-8_2_5-a-allowWellDefinedCasts=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 8.2.6 (Required) An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type" id="MISRACPP2023-8_2_6" />
  <clone id="CODSTA-65" newId="MISRACPP2023-8_2_6-a" severity="2" />
  <clone id="CODSTA-65_b" newId="MISRACPP2023-8_2_6-b" severity="2" />
  <category description="Rule 8.2.7 (Advisory) A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_7" />
  <clone id="MISRA2004-11_3_a" newId="MISRACPP2023-8_2_7-a" severity="4" />
  <clone id="CODSTA-240" newId="MISRACPP2023-8_2_7-b" severity="4" />
  <category description="Rule 8.2.8 (Required) An object pointer type shall not be cast to an integral type other than std::uintptr_t or std::intptr_t" id="MISRACPP2023-8_2_8" />
  <clone id="MISRA2004-11_3_a" newId="MISRACPP2023-8_2_8-a" severity="2" />
  <category description="Rule 8.2.9 (Required) The operand to typeid shall not be an expression of polymorphic class type" id="MISRACPP2023-8_2_9" />
  <clone id="CODSTA-CPP-204" newId="MISRACPP2023-8_2_9-a" severity="2" />
  <category description="Rule 8.2.10 (Required) Functions shall not call themselves, either directly or indirectly" id="MISRACPP2023-8_2_10" />
  <clone id="BD-PB-RECFUN" newId="MISRACPP2023-8_2_10-a" severity="2" />
  <category description="Rule 8.2.11 (Required) An argument passed via ellipsis shall have an appropriate type" id="MISRACPP2023-8_2_11" />
  <clone id="CODSTA-CPP-207" newId="MISRACPP2023-8_2_11-a" severity="2" />
  <category description="Rule 8.3.1 (Advisory) The built-in unary - operator should not be applied to an expression of unsigned type" id="MISRACPP2023-8_3_1" />
  <clone id="MISRA2004-12_9" newId="MISRACPP2023-8_3_1-a" severity="4" />
  <category description="Rule 8.3.2 (Advisory) The built-in unary + operator should not be used" id="MISRACPP2023-8_3_2" />
  <clone id="CODSTA-236" newId="MISRACPP2023-8_3_2-a" severity="4" />
  <category description="Rule 8.7.1 (Required) Pointer arithmetic shall not form an invalid pointer" id="MISRACPP2023-8_7_1" />
  <clone id="BD-PB-ARRAY" newId="MISRACPP2023-8_7_1-a" severity="2" />
  <clone id="BD-PB-PTRARR" newId="MISRACPP2023-8_7_1-b" severity="2">
    <defParameters>
      <![CDATA[
        MISRACPP2023-8_7_1-b-allowPointerArithmeticOnNonArrays=true
        MISRACPP2023-8_7_1-b-violateOnArrayAccessInsideStructure=true
      ]]>
    </defParameters>
  </clone>
  <clone id="BD-PB-OVERFRD" newId="MISRACPP2023-8_7_1-c" severity="2" />
  <clone id="BD-PB-OVERFWR" newId="MISRACPP2023-8_7_1-d" severity="2" />
  <clone id="BD-PB-OVERFNZT" newId="MISRACPP2023-8_7_1-e" severity="2" />
  <category description="Rule 8.7.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRACPP2023-8_7_2" />
  <clone id="BD-PB-PTRSUB" newId="MISRACPP2023-8_7_2-a" severity="2" />
  <category description="Rule 8.9.1 (Required) The built-in relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to objects of pointer type, except where they point to elements of the same array" id="MISRACPP2023-8_9_1" />
  <clone id="BD-PB-PTRCMP" newId="MISRACPP2023-8_9_1-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRACPP2023-8_9_1-a-reportOnComparisonFunctions=false
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 8.14.1 (Advisory) The right-hand operand of a logical &amp;&amp; or || operator should not contain persistent side effects" id="MISRACPP2023-8_14_1" />
  <clone id="MISRA2004-12_4_a" newId="MISRACPP2023-8_14_1-a" severity="4" />
  <category description="Rule 8.18.1 (Mandatory) An object or subobject must not be copied to an overlapping object" id="MISRACPP2023-8_18_1" />
  <clone id="BD-PB-OVERLAP" newId="MISRACPP2023-8_18_1-a" severity="1">
    <defParameters>
      <![CDATA[
        MISRACPP2023-8_18_1-a-reportMemcpyOnly=true
      ]]>
    </defParameters>
  </clone>
  <clone id="MISRA2004-18_2" newId="MISRACPP2023-8_18_1-b" severity="1" />
  <clone id="MISRA2004-18_2_b" newId="MISRACPP2023-8_18_1-c" severity="1" />
  <category description="Rule 8.18.2 (Advisory) The result of an assignment operator should not be used" id="MISRACPP2023-8_18_2" />
  <clone id="CODSTA-138" newId="MISRACPP2023-8_18_2-a" severity="4" />
  <category description="Rule 8.19.1 (Advisory) The comma operator should not be used" id="MISRACPP2023-8_19_1" />
  <clone id="MISRA2004-12_10" newId="MISRACPP2023-8_19_1-a" severity="4" />
  <category description="Rule 8.20.1 (Advisory) An unsigned arithmetic operation with constant operands should not wrap" id="MISRACPP2023-8_20_1" />
  <clone id="PB-73" newId="MISRACPP2023-8_20_1-a" severity="4" />
  <clone id="PB-73_b" newId="MISRACPP2023-8_20_1-b" severity="4" />
  <category description="Rule 9.2.1 (Required) An explicit type conversion shall not be an expression statement" id="MISRACPP2023-9_2_1" />
  <clone id="PB-77" newId="MISRACPP2023-9_2_1-a" severity="2" />
  <category description="Rule 9.3.1 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRACPP2023-9_3_1" />
  <clone id="MISRA2004-14_8" newId="MISRACPP2023-9_3_1-a" severity="2" />
  <clone id="MISRA2004-14_9" newId="MISRACPP2023-9_3_1-b" severity="2" />
  <category description="Rule 9.4.1 (Required) All if ... else if constructs shall be terminated with an else statement" id="MISRACPP2023-9_4_1" />
  <clone id="CODSTA-241" newId="MISRACPP2023-9_4_1-a" severity="2" />
  <category description="Rule 9.4.2 (Required) The structure of a switch statement shall be appropriate" id="MISRACPP2023-9_4_2" />
  <clone id="CODSTA-61_b" newId="MISRACPP2023-9_4_2-a" severity="2" />
  <clone id="CODSTA-64_b" newId="MISRACPP2023-9_4_2-b" severity="2" />
  <clone id="MISRA2004-15_1" newId="MISRACPP2023-9_4_2-c" severity="2" />
  <clone id="MISRA2004-15_0_b" newId="MISRACPP2023-9_4_2-d" severity="2" />
  <clone id="OPT-39" newId="MISRACPP2023-9_4_2-e" severity="2" />
  <clone id="CODSTA-243" newId="MISRACPP2023-9_4_2-f" severity="2" />
  <clone id="CODSTA-MCPP-60" newId="MISRACPP2023-9_4_2-g" severity="2" />
  <category description="Rule 9.5.1 (Advisory) Legacy for statements should be simple" id="MISRACPP2023-9_5_1" />
  <clone id="CODSTA-315" newId="MISRACPP2023-9_5_1-a" severity="4" />
  <category description="Rule 9.5.2 (Required) A for-range-initializer shall contain at most one function call" id="MISRACPP2023-9_5_2" />
  <clone id="CODSTA-MCPP-101" newId="MISRACPP2023-9_5_2-a" severity="2" />
  <category description="Rule 9.6.1 (Advisory) The goto statement should not be used" id="MISRACPP2023-9_6_1" />
  <clone id="MISRA2004-14_4" newId="MISRACPP2023-9_6_1-a" severity="4" />
  <category description="Rule 9.6.2 (Required) A goto statement shall reference a label in a surrounding block" id="MISRACPP2023-9_6_2" />
  <clone id="CODSTA-78" newId="MISRACPP2023-9_6_2-a" severity="2" />
  <category description="Rule 9.6.3 (Required) The goto statement shall jump to a label declared later in the function body" id="MISRACPP2023-9_6_3" />
  <clone id="CODSTA-77" newId="MISRACPP2023-9_6_3-a" severity="2" />
  <category description="Rule 9.6.4 (Required) A function declared with the [[noreturn]] attribute shall not return" id="MISRACPP2023-9_6_4" />
  <clone id="BD-PB-NORETURN" newId="MISRACPP2023-9_6_4-a" severity="2" />
  <category description="Rule 9.6.5 (Required) A function with non-void return type shall return a value on all paths" id="MISRACPP2023-9_6_5" />
  <clone id="MISRA2004-16_8_b" newId="MISRACPP2023-9_6_5-a" severity="2" />
  <category description="Rule 10.0.1 (Advisory) A declaration should not declare more than one variable or member variable" id="MISRACPP2023-10_0_1" />
  <clone id="FORMAT-33" newId="MISRACPP2023-10_0_1-a" severity="4" />
  <category description="Rule 10.1.1 (Advisory) The target type of a pointer or lvalue reference parameter should be const-qualified appropriately" id="MISRACPP2023-10_1_1" />
  <clone id="MISRA2004-16_7" newId="MISRACPP2023-10_1_1-a" severity="4" />
  <clone id="MISRA2004-16_7_b" newId="MISRACPP2023-10_1_1-b" severity="4" />
  <clone id="CODSTA-CPP-43" newId="MISRACPP2023-10_1_1-c" severity="4" />
  <category description="Rule 10.1.2 (Required) The volatile qualifier shall be used appropriately" id="MISRACPP2023-10_1_2" />
  <clone id="CODSTA-306" newId="MISRACPP2023-10_1_2-a" severity="2" />
  <category description="Rule 10.2.1 (Required) An enumeration shall be defined with an explicit underlying type" id="MISRACPP2023-10_2_1" />
  <clone id="CODSTA-CPP-202" newId="MISRACPP2023-10_2_1-a" severity="2" />
  <clone id="CODSTA-CPP-203" newId="MISRACPP2023-10_2_1-b" severity="2" />
  <category description="Rule 10.2.2 (Advisory) Unscoped enumerations should not be declared" id="MISRACPP2023-10_2_2" />
  <clone id="CODSTA-MCPP-03" newId="MISRACPP2023-10_2_2-a" severity="4">
    <defParameters>
      <![CDATA[
        MISRACPP2023-10_2_2-a-allowInClass=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 10.2.3 (Required) The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" id="MISRACPP2023-10_2_3" />
  <clone id="CODSTA-313" newId="MISRACPP2023-10_2_3-a" severity="2" />
  <category description="Rule 10.3.1 (Advisory) There should be no unnamed namespaces in header files" id="MISRACPP2023-10_3_1" />
  <clone id="CODSTA-CPP-74" newId="MISRACPP2023-10_3_1-a" severity="4" />
  <category description="Rule 10.4.1 (Required) The asm declaration shall not be used" id="MISRACPP2023-10_4_1" />
  <clone id="CODSTA-234" newId="MISRACPP2023-10_4_1-a" severity="2" />
  <category description="Rule 11.3.1 (Advisory) Variables of array type should not be declared" id="MISRACPP2023-11_3_1" />
  <clone id="STL-37" newId="MISRACPP2023-11_3_1-a" severity="4" />
  <category description="Rule 11.3.2 (Advisory) The declaration of an object should contain no more than two levels of pointer indirection" id="MISRACPP2023-11_3_2" />
  <clone id="MISRA2004-17_5" newId="MISRACPP2023-11_3_2-a" severity="4" />
  <category description="Rule 11.6.1 (Advisory) All variables should be initialized" id="MISRACPP2023-11_6_1" />
  <clone id="INIT-101" newId="MISRACPP2023-11_6_1-a" severity="4" />
  <category description="Rule 11.6.2 (Mandatory) The value of an object must not be read before it has been set" id="MISRACPP2023-11_6_2" />
  <clone id="BD-PB-NOTINIT" newId="MISRACPP2023-11_6_2-a" severity="1">
    <defParameters>
      <![CDATA[
        MISRACPP2023-11_6_2-a-reportIfPartialNoninitializedCopied=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 11.6.3 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRACPP2023-11_6_3" />
  <clone id="PB-58" newId="MISRACPP2023-11_6_3-a" severity="2">
    <defParameters>
      <![CDATA[
        MISRACPP2023-11_6_3-a-allowExplicitlyEqualConstants=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 12.2.1 (Advisory) Bit-fields should not be declared" id="MISRACPP2023-12_2_1" />
  <clone id="CODSTA-02" newId="MISRACPP2023-12_2_1-a" severity="4" />
  <category description="Rule 12.2.2 (Required) A bit-field shall have an appropriate type" id="MISRACPP2023-12_2_2" />
  <clone id="CODSTA-304" newId="MISRACPP2023-12_2_2-a" severity="2" />
  <clone id="CODSTA-305" newId="MISRACPP2023-12_2_2-b" severity="2" />
  <category description="Rule 12.2.3 (Required) A named bit-field with signed integer type shall not have a length of one bit" id="MISRACPP2023-12_2_3" />
  <clone id="CODSTA-71" newId="MISRACPP2023-12_2_3-a" severity="2" />
  <category description="Rule 12.3.1 (Required) The union keyword shall not be used" id="MISRACPP2023-12_3_1" />
  <clone id="CODSTA-111" newId="MISRACPP2023-12_3_1-a" severity="2" />
  <category description="Rule 13.1.1 (Advisory) Classes should not be inherited virtually" id="MISRACPP2023-13_1_1" />
  <clone id="OOP-47" newId="MISRACPP2023-13_1_1-a" severity="4" />
  <category description="Rule 13.1.2 (Required) An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRACPP2023-13_1_2" />
  <clone id="OOP-41" newId="MISRACPP2023-13_1_2-a" severity="2" />
  <category description="Rule 13.3.1 (Required) User-declared member functions shall use the virtual, override and final specifiers appropriately" id="MISRACPP2023-13_3_1" />
  <clone id="CODSTA-MCPP-05" newId="MISRACPP2023-13_3_1-a" severity="2" />
  <clone id="CODSTA-MCPP-24" newId="MISRACPP2023-13_3_1-b" severity="2" />
  <category description="Rule 13.3.2 (Required) Parameters in an overriding virtual function shall not specify different default arguments" id="MISRACPP2023-13_3_2" />
  <clone id="CODSTA-CPP-210" newId="MISRACPP2023-13_3_2-a" severity="2" />
  <category description="Rule 13.3.3 (Required) The parameters in all declarations or overrides of a function shall either be unnamed or have identical names" id="MISRACPP2023-13_3_3" />
  <clone id="MISRA2004-16_4" newId="MISRACPP2023-13_3_3-a" severity="2" />
  <clone id="NAMING-57" newId="MISRACPP2023-13_3_3-b" severity="2" />
  <category description="Rule 13.3.4 (Required) A comparison of a potentially virtual pointer to member function shall only be with nullptr" id="MISRACPP2023-13_3_4" />
  <clone id="CODSTA-MCPP-26" newId="MISRACPP2023-13_3_4-a" severity="2" />
  <category description="Rule 14.1.1 (Advisory) Non-static data members should be either all private or all public" id="MISRACPP2023-14_1_1" />
  <clone id="CODSTA-CPP-201" newId="MISRACPP2023-14_1_1-a" severity="4" />
  <category description="Rule 15.0.1 (Required) Special member functions shall be provided appropriately" id="MISRACPP2023-15_0_1" />
  <clone id="CODSTA-MCPP-105" newId="MISRACPP2023-15_0_1-a" severity="2" />
  <clone id="OPT-48" newId="MISRACPP2023-15_0_1-b" severity="2" />
  <category description="Rule 15.0.2 (Advisory) User-provided copy and move member functions of a class should have appropriate signatures" id="MISRACPP2023-15_0_2" />
  <clone id="CODSTA-CPP-205" newId="MISRACPP2023-15_0_2-a" severity="4" />
  <category description="Rule 15.1.1 (Required) An object's dynamic type shall not be used from within its constructor or destructor" id="MISRACPP2023-15_1_1" />
  <clone id="BD-PB-VCTOR" newId="MISRACPP2023-15_1_1-a" severity="2" />
  <clone id="BD-PB-VDTOR" newId="MISRACPP2023-15_1_1-b" severity="2" />
  <category description="Rule 15.1.2 (Advisory) All constructors of a class should explicitly initialize all of its virtual base classes and immediate base classes" id="MISRACPP2023-15_1_2" />
  <clone id="PB-43" newId="MISRACPP2023-15_1_2-a" severity="4" />
  <category description="Rule 15.1.3 (Required) Conversion operators and constructors that are callable with a single argument shall be explicit" id="MISRACPP2023-15_1_3" />
  <clone id="CODSTA-CPP-04" newId="MISRACPP2023-15_1_3-a" severity="2" />
  <clone id="CODSTA-MCPP-01" newId="MISRACPP2023-15_1_3-b" severity="2" />
  <category description="Rule 15.1.4 (Advisory) All direct, non-static data members of a class should be initialized before the class object is accessible" id="MISRACPP2023-15_1_4" />
  <clone id="INIT-19" newId="MISRACPP2023-15_1_4-a" severity="4" />
  <clone id="INIT-20" newId="MISRACPP2023-15_1_4-b" severity="4" />
  <category description="Rule 15.1.5 (Required) A class shall only define an initializer-list constructor when it is the only constructor" id="MISRACPP2023-15_1_5" />
  <clone id="CODSTA-MCPP-47_b" newId="MISRACPP2023-15_1_5-a" severity="2" />
  <category description="Dir 15.8.1 (Required) User-provided copy assignment operators and move assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1" />
  <clone id="OOP-34" newId="MISRACPP2023-15_8_1-a" severity="2" />
  <clone id="OOP-34_b" newId="MISRACPP2023-15_8_1-b" severity="2" />
  <category description="Rule 16.5.1 (Required) The logical AND and logical OR operators shall not be overloaded" id="MISRACPP2023-16_5_1" />
  <clone id="CODSTA-CPP-08" newId="MISRACPP2023-16_5_1-a" severity="2" />
  <category description="Rule 16.5.2 (Required) The address-of operator shall not be overloaded" id="MISRACPP2023-16_5_2" />
  <clone id="CODSTA-CPP-68" newId="MISRACPP2023-16_5_2-a" severity="2" />
  <category description="Rule 16.6.1 (Advisory) Symmetrical operators should only be implemented as non-member functions" id="MISRACPP2023-16_6_1" />
  <clone id="CODSTA-CPP-20_b" newId="MISRACPP2023-16_6_1-a" severity="4" />
  <category description="Rule 17.8.1 (Required) Function templates shall not be explicitly specialized" id="MISRACPP2023-17_8_1" />
  <clone id="TEMPL-09_b" newId="MISRACPP2023-17_8_1-a" severity="2" />
  <category description="Rule 18.1.1 (Required) An exception object shall not have pointer type" id="MISRACPP2023-18_1_1" />
  <clone id="EXCEPT-09" newId="MISRACPP2023-18_1_1-a" severity="2" />
  <category description="Rule 18.1.2 (Required) An empty throw shall only occur within the compound-statement of a catch handler" id="MISRACPP2023-18_1_2" />
  <clone id="EXCEPT-07" newId="MISRACPP2023-18_1_2-a" severity="2" />
  <category description="Rule 18.3.1 (Advisory) There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRACPP2023-18_3_1" />
  <clone id="EXCEPT-06" newId="MISRACPP2023-18_3_1-a" severity="4" />
  <category description="Rule 18.3.2 (Required) An exception of class type shall be caught by const reference or reference" id="MISRACPP2023-18_3_2" />
  <clone id="EXCEPT-15" newId="MISRACPP2023-18_3_2-a" severity="2" />
  <category description="Rule 18.3.3 (Required) Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases" id="MISRACPP2023-18_3_3" />
  <clone id="EXCEPT-16" newId="MISRACPP2023-18_3_3-a" severity="2" />
  <category description="Rule 18.4.1 (Required) Exception-unfriendly functions shall be noexcept" id="MISRACPP2023-18_4_1" />
  <clone id="CODSTA-CPP-208" newId="MISRACPP2023-18_4_1-a" severity="2" />
  <clone id="CODSTA-CPP-209" newId="MISRACPP2023-18_4_1-b" severity="2" />
  <clone id="CODSTA-CPP-213" newId="MISRACPP2023-18_4_1-c" severity="2" />
  <category description="Rule 18.5.1 (Advisory) A noexcept function should not attempt to propagate an exception to the calling function" id="MISRACPP2023-18_5_1" />
  <clone id="BD-PB-NOEXCEPT" newId="MISRACPP2023-18_5_1-a" severity="4" />
  <category description="Rule 18.5.2 (Advisory) Program-terminating functions should not be used" id="MISRACPP2023-18_5_2" />
  <clone id="PB-75" newId="MISRACPP2023-18_5_2-a" severity="4" />
  <clone id="PB-75_b" newId="MISRACPP2023-18_5_2-b" severity="4" />
  <clone id="PB-75_c" newId="MISRACPP2023-18_5_2-c" severity="4" />
  <clone id="PB-75_d" newId="MISRACPP2023-18_5_2-d" severity="4" />
  <category description="Rule 19.0.1 (Required) A line whose first token is # shall be a valid preprocessing directive" id="MISRACPP2023-19_0_1" />
  <clone id="MISRA2004-19_16" newId="MISRACPP2023-19_0_1-a" severity="2" />
  <category description="Rule 19.0.2 (Required) Function-like macros shall not be defined" id="MISRACPP2023-19_0_2" />
  <clone id="PREPROC-28" newId="MISRACPP2023-19_0_2-a" severity="2" />
  <category description="Rule 19.0.3 (Advisory) #include directives should only be preceded by preprocessor directives or comments" id="MISRACPP2023-19_0_3" />
  <clone id="MISRA2004-19_1" newId="MISRACPP2023-19_0_3-a" severity="4" />
  <category description="Rule 19.0.4 (Advisory) #undef should only be used for macros defined previously in the same file" id="MISRACPP2023-19_0_4" />
  <clone id="PREPROC-25_b" newId="MISRACPP2023-19_0_4-a" severity="4" />
  <category description="Rule 19.1.1 (Required) The defined preprocessor operator shall be used appropriately" id="MISRACPP2023-19_1_1" />
  <clone id="MISRA2004-19_14" newId="MISRACPP2023-19_1_1-a" severity="2" />
  <category description="Rule 19.1.2 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRACPP2023-19_1_2" />
  <clone id="MISRA2004-19_17" newId="MISRACPP2023-19_1_2-a" severity="2" />
  <category description="Rule 19.1.3 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation" id="MISRACPP2023-19_1_3" />
  <clone id="MISRA2004-19_11_b" newId="MISRACPP2023-19_1_3-a" severity="2" />
  <category description="Rule 19.2.1 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRACPP2023-19_2_1" />
  <clone id="PFO-02_b" newId="MISRACPP2023-19_2_1-b" severity="2" />
  <category description="Rule 19.2.2 (Required) The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" id="MISRACPP2023-19_2_2" />
  <clone id="MISRA-089" newId="MISRACPP2023-19_2_2-a" severity="2" />
  <category description="Rule 19.2.3 (Required) The ' or &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRACPP2023-19_2_3" />
  <clone id="MISRA2004-19_2" newId="MISRACPP2023-19_2_3-a" severity="2" />
  <category description="Rule 19.3.1 (Advisory) The # and ## preprocessor operators should not be used" id="MISRACPP2023-19_3_1" />
  <clone id="MISRA2004-19_13" newId="MISRACPP2023-19_3_1-a" severity="4" />
  <category description="Rule 19.3.2 (Required) A macro parameter immediately following a # operator shall not be immediately followed by a ## operator" id="MISRACPP2023-19_3_2" />
  <clone id="PREPROC-16" newId="MISRACPP2023-19_3_2-a" severity="2" />
  <category description="Rule 19.3.3 (Required) The argument to a mixed-use macro parameter shall not be subject to further expansion" id="MISRACPP2023-19_3_3" />
  <clone id="PREPROC-17" newId="MISRACPP2023-19_3_3-a" severity="2" />
  <category description="Rule 19.3.4 (Required) Parentheses shall be used to ensure macro arguments are expanded appropriately" id="MISRACPP2023-19_3_4" />
  <clone id="MISRA2004-19_10" newId="MISRACPP2023-19_3_4-a" severity="2" />
  <category description="Rule 19.3.5 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRACPP2023-19_3_5" />
  <clone id="MISRA2004-19_9" newId="MISRACPP2023-19_3_5-a" severity="2" />
  <category description="Rule 19.6.1 (Advisory) The #pragma directive and the _Pragma operator should not be used" id="MISRACPP2023-19_6_1" />
  <clone id="PREPROC-23" newId="MISRACPP2023-19_6_1-a" severity="4" />
  <clone id="PREPROC-23_b" newId="MISRACPP2023-19_6_1-b" severity="4" />
  <category description="Rule 21.2.1 (Required) The library functions atof, atoi, atol and atoll from &lt;cstdlib&gt; shall not be used" id="MISRACPP2023-21_2_1" />
  <clone id="MISRA2004-20_10" newId="MISRACPP2023-21_2_1-a" severity="2" />
  <category description="Rule 21.2.2 (Required) The string handling functions from &lt;cstring&gt;, &lt;cstdlib&gt;, &lt;cwchar&gt; and &lt;cinttypes&gt; shall not be used" id="MISRACPP2023-21_2_2" />
  <clone id="CODSTA-242" newId="MISRACPP2023-21_2_2-a" severity="2" />
  <category description="Rule 21.2.3 (Required) The library function system from &lt;cstdlib&gt; shall not be used" id="MISRACPP2023-21_2_3" />
  <clone id="SECURITY-48_b" newId="MISRACPP2023-21_2_3-a" severity="2" />
  <category description="Rule 21.2.4 (Required) The macro offsetof shall not be used" id="MISRACPP2023-21_2_4" />
  <clone id="MISRA2004-20_6" newId="MISRACPP2023-21_2_4-a" severity="2" />
  <category description="Rule 21.6.1 (Advisory) Dynamic memory should not be used" id="MISRACPP2023-21_6_1" />
  <clone id="MISRA2004-20_4" newId="MISRACPP2023-21_6_1-a" severity="4" />
  <category description="Rule 21.6.2 (Required) Dynamic memory shall be managed automatically" id="MISRACPP2023-21_6_2" />
  <clone id="MISRA2004-20_4" newId="MISRACPP2023-21_6_2-a" severity="2" />
  <clone id="MRM-62_a" newId="MISRACPP2023-21_6_2-b" severity="2" />
  <clone id="MRM-62_b" newId="MISRACPP2023-21_6_2-c" severity="2" />
  <category description="Rule 21.6.3 (Required) Advanced memory management shall not be used" id="MISRACPP2023-21_6_3" />
  <clone id="MRM-31_b" newId="MISRACPP2023-21_6_3-a" severity="2" />
  <clone id="MRM-59" newId="MISRACPP2023-21_6_3-b" severity="2" />
  <clone id="MRM-60" newId="MISRACPP2023-21_6_3-c" severity="2" />
  <clone id="MRM-61" newId="MISRACPP2023-21_6_3-d" severity="2" />
  <category description="Rule 21.6.4 (Required) If a project defines either a sized or unsized version of a global operator delete, then both shall be defined" id="MISRACPP2023-21_6_4" />
  <clone id="CODSTA-MCPP-31" newId="MISRACPP2023-21_6_4-a" severity="2" />
  <category description="Rule 21.6.5 (Required) A pointer to an incomplete class type shall not be deleted" id="MISRACPP2023-21_6_5" />
  <clone id="PB-55" newId="MISRACPP2023-21_6_5-a" severity="2" />
  <category description="Rule 21.10.1 (Required) The features of &lt;cstdarg&gt; shall not be used" id="MISRACPP2023-21_10_1" />
  <clone id="CODSTA-136_a" newId="MISRACPP2023-21_10_1-a" severity="2" />
  <category description="Rule 21.10.2 (Required) The standard header file &lt;csetjmp&gt; shall not be used" id="MISRACPP2023-21_10_2" />
  <clone id="MISRA2004-20_7" newId="MISRACPP2023-21_10_2-a" severity="2" />
  <clone id="MISRA2004-20_7_b" newId="MISRACPP2023-21_10_2-b" severity="2" />
  <category description="Rule 21.10.3 (Required) The facilities provided by the standard header file &lt;csignal&gt; shall not be used" id="MISRACPP2023-21_10_3" />
  <clone id="CODSTA-244" newId="MISRACPP2023-21_10_3-a" severity="2" />
  <category description="Rule 22.3.1 (Required) The assert macro shall not be used with a constant-expression" id="MISRACPP2023-22_3_1" />
  <clone id="CODSTA-314" newId="MISRACPP2023-22_3_1-a" severity="2" />
  <category description="Rule 22.4.1 (Required) The literal value zero shall be the only value assigned to errno" id="MISRACPP2023-22_4_1" />
  <clone id="CODSTA-239" newId="MISRACPP2023-22_4_1-a" severity="2" />
  <category description="Rule 23.11.1 (Advisory) The raw pointer constructors of std::shared_ptr and std::unique_ptr should not be used" id="MISRACPP2023-23_11_1" />
  <clone id="CODSTA-MCPP-57" newId="MISRACPP2023-23_11_1-a" severity="4" />
  <category description="Rule 24.5.1 (Required) The character handling functions from &lt;cctype&gt; and &lt;cwctype&gt; shall not be used" id="MISRACPP2023-24_5_1" />
  <clone id="CODSTA-237" newId="MISRACPP2023-24_5_1-a" severity="2" />
  <category description="Rule 24.5.2 (Required) The C++ Standard Library functions memcpy, memmove and memcmp from &lt;cstring&gt; shall not be used" id="MISRACPP2023-24_5_2" />
  <clone id="CODSTA-238" newId="MISRACPP2023-24_5_2-a" severity="2" />
  <category description="Rule 25.5.1 (Required) The setlocale and std::locale::global functions shall not be called" id="MISRACPP2023-25_5_1" />
  <clone id="MISRA-121_a" newId="MISRACPP2023-25_5_1-a" severity="2" />
  <clone id="CODSTA-CPP-113" newId="MISRACPP2023-25_5_1-b" severity="2" />
  <category description="Rule 25.5.2 (Mandatory) The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type" id="MISRACPP2023-25_5_2" />
  <clone id="CODSTA-185_a" newId="MISRACPP2023-25_5_2-a" severity="1" />
  <clone id="CODSTA-185_b" newId="MISRACPP2023-25_5_2-b" severity="1" />
  <clone id="CODSTA-185_c" newId="MISRACPP2023-25_5_2-c" severity="1" />
  <category description="Rule 25.5.3 (Mandatory) The pointer returned by the C++ Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror must not be used following a subsequent call to the same function" id="MISRACPP2023-25_5_3" />
  <clone id="BD-PB-INVRET" newId="MISRACPP2023-25_5_3-a" severity="1" />
  <category description="Rule 26.3.1 (Advisory) std::vector should not be specialized with bool" id="MISRACPP2023-26_3_1" />
  <clone id="STL-14" newId="MISRACPP2023-26_3_1-a" severity="4" />
  <category description="Rule 28.3.1 (Required) Predicates shall not have persistent side effects" id="MISRACPP2023-28_3_1" />
  <clone id="GLOBAL-PREDICATENOSE" newId="MISRACPP2023-28_3_1-a" severity="2" />
  <category description="Rule 28.6.1 (Required) The argument to std::move shall be a non-const lvalue" id="MISRACPP2023-28_6_1" />
  <clone id="CODSTA-MCPP-53" newId="MISRACPP2023-28_6_1-a" severity="2" />
  <category description="Rule 28.6.2 (Required) Forwarding references and std::forward shall be used together" id="MISRACPP2023-28_6_2" />
  <clone id="CODSTA-MCPP-13_b" newId="MISRACPP2023-28_6_2-a" severity="2" />
  <clone id="CODSTA-MCPP-13_c" newId="MISRACPP2023-28_6_2-b" severity="2" />
  <category description="Rule 28.6.3 (Required) An object shall not be used while in a potentially moved-from state" id="MISRACPP2023-28_6_3" />
  <clone id="BD-PB-SUBSEQFRWD" newId="MISRACPP2023-28_6_3-a" severity="2" />
  <clone id="BD-PB-SUBSEQMOVE" newId="MISRACPP2023-28_6_3-b" severity="2">
    <defParameters>
      <![CDATA[
        MISRACPP2023-28_6_3-b-reportWhenFunctionArgPassedByRefIsInMovedFromState=true
      ]]>
    </defParameters>
  </clone>
  <category description="Rule 28.6.4 (Required) The result of std::remove, std::remove_if, std::unique and empty shall be used" id="MISRACPP2023-28_6_4" />
  <clone id="CODSTA-CPP-112" newId="MISRACPP2023-28_6_4-a" severity="2" />
  <category description="Rule 30.0.1 (Required) The C Library input/output functions shall not be used" id="MISRACPP2023-30_0_1" />
  <clone id="MISRA2004-20_9" newId="MISRACPP2023-30_0_1-a" severity="2" />
  <clone id="CODSTA-110" newId="MISRACPP2023-30_0_1-b" severity="2" />
  <category description="Rule 30.0.2 (Required) Reads and writes on the same file stream shall be separated by a positioning operation" id="MISRACPP2023-30_0_2" />
  <clone id="BD-PB-STREAMINOUT" newId="MISRACPP2023-30_0_2-a" severity="2" />
  <!-- MISRA C++ 2023 end -->
</rulemap>
