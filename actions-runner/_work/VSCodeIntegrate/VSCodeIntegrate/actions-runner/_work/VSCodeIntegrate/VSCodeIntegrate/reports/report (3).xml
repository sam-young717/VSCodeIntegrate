<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="2025-03-11" climode="true" endTime="2025-03-11T17:41:16-04:00" execEnv="win32_x86_64" hasViols="true" id="1742449180922" lang="en_US" machine="syoung-pc" prjModule="Timer" project="" tag="${scontrol_branch}-win32_x86_64" time="2025-03-11T17:41:06-04:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="Flow Analysis Fast" pseudoUrl="builtin://Flow Analysis Fast" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="3">
      
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="-249486341" locRef="1" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.c" totLns="30" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="Timer" projPath="/Timer" project="Timer" resProjPath="driver.c" totLns="76" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/driver.c"/>
         <Loc auth="syoung" hash="-275311578" locRef="3" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.c" totLns="155" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="Timer" projPath="/Timer" project="Timer" resProjPath="stdinout.c" totLns="55" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/stdinout.c"/>
         <Loc auth="syoung" hash="-1204881763" locRef="5" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.h" totLns="14" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/clock.h"/>
         <Loc auth="syoung" hash="1651539479" locRef="6" projId="Timer" projPath="/Timer" project="Timer" resProjPath="consts.h" totLns="9" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/consts.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="7" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.h" totLns="36" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/timer.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="8" projId="Timer" projPath="/Timer" project="Timer" resProjPath="inout.h" totLns="15" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/inout.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:08">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="390" id="Timer" name="Timer" qfixErrs="0" suppErrs="0" totErrs="3" totFiles="8" totLns="390"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="137" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0"/>
               <Category authTot="3;" authUrg="3;" desc="Possible Bugs" name="BD-PB" rules="74" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="21" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid signed integer overflows" id="BD-PB-INTUB" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Atomic objects shall be properly initialized before being accessed" id="BD-PB-NOTINITAT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing collections out of bounds" id="BD-PB-COOB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid data loss when converting between integer types" id="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use the ungetc function on a stream with the file position indicator zero" id="BD-PB-UNGETC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid value change when converting between integer types" id="BD-PB-INTVC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid wraparounds when performing arithmetic integer operations" id="BD-PB-INTWRAP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="The Standard Library function mtx_timedlock() shall not be invoked on a mutex that does not support timeout" id="BD-TRS-TIMEDLOCK" sev="2" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="1;" authUrg="1;" id="1" total="1"/>
            <Severity authTot="2;" authUrg="2;" id="2" total="2"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/Timer/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="79304501" lang="cpp" violId="19ccf1eb-0d5d-30b0-89fd-b57596726e37" locEndPos="0" urgent="true" locEndLn="50" goals="1," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="18afb11e-9883-3c0a-a2b1-8d62233e7dcd" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/Timer/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/Timer/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/Timer/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/Timer/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/Timer/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/Timer/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/Timer/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/Timer/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="BD-PB-ARRAY" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="0f1e8c78-203f-387c-b29d-47b1e26dcf5c" locEndPos="0" urgent="true" locEndLn="117" goals="1," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="e2ae148b-7d64-377c-a961-9f62a1f52a44" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/Timer/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/Timer/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/Timer/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/Timer/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/Timer/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="467d77a0-6711-3a2b-8d8c-e31312952cd4" locEndPos="0" urgent="true" locEndLn="137" goals="1," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="357ef8dc-21eb-3b76-b8af-c7e12a14a146" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/Timer/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/Timer/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/Timer/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/Timer/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/Timer/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/Timer/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="3">
            <Project id="Timer" name="Timer" supp="0" total="3">
               <Res loc="/Timer/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="0"/>
               <Res loc="/Timer/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="0"/>
               <Res loc="/Timer/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="3"/>
               <Res loc="/Timer/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="0"/>
               <Res loc="/Timer/clock.h" locRef="5" locType="sr" name="clock.h" supp="0" total="0"/>
               <Res loc="/Timer/consts.h" locRef="6" locType="sr" name="consts.h" supp="0" total="0"/>
               <Res loc="/Timer/timer.h" locRef="7" locType="sr" name="timer.h" supp="0" total="0"/>
               <Res loc="/Timer/inout.h" locRef="8" locType="sr" name="inout.h" supp="0" total="0"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>