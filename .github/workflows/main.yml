# This is a basic workflow to help you get started with the Run C/C++test action for a CMake-based project.
name: C/C++test with CMake

on:
  # Triggers the workflow on push or pull request events but only for the master (main) branch.
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v4

    # Configures your CMake project. Be sure the compile_commands.json file is created.
    - name: Configure CMake
      working-directory: C:\Users\syoung\Documents\CppTest\cpptest\examples\Timer
      run: cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -S . -B build

    - name: Verify Location First
      run: ls
      working-directory: C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer

    # Builds your CMake project. (This step is optional, as it is not required for code analysis).
    - name: Build project (optional)
      run: cmake --build build
      working-directory: C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer

    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      run: cpptestcli.exe -J-Dcpptest.stop.file="c:\Users\syoung\Documents\CppTest\cpptest\examples\Timer\.cpptest\cpptest.stop" -compiler "gcc_9-64" -config "builtin://MISRA C 2004" -report "c:\Users\syoung\Documents\CppTest\cpptest\examples\Timer/reports"  -resource "c:\Users\syoung\Documents\CppTest\cpptest\examples\Timer" -module . -input timer.bdf
      # Use the 'run-cpptest-action' GitHub action.
      # uses: parasoft/run-cpptest-action@2.0.2
      # # Optional parameters for 'run-cpptest-action'.
      # with:
      #   # For CMake-based projects, use a compile_commands.json file as the input for analysis. 
      #   input: build/compile_commands.json
      #   # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
      #   # reportFormat: xml,html,custom
      #   additionalParams: '-config "builtin://MISRA C 2004"'
        

    - name: Configure CMake in build directory
      run: cmake -DCPPTEST_COVERAGE=ON -DCPPTEST_HOME=C:\Users\syoung\Documents\CppTest\cpptest -B build
      working-directory: C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer
        
    - name: Running timer
      run: ./build/timer
      working-directory: C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer
      
    # - name: Generating report
    #   run: 'make cpptestcov-report'

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with: 
        sarif_file: reports/report.sarif

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      uses: actions/upload-artifact@v4
      with:
        name: CpptestReports
        path: reports/*.*
