<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="2025-03-13" climode="true" endTime="2025-03-13T12:06:49-04:00" execEnv="win32_x86_64" hasViols="true" id="1742601914445" lang="en_US" machine="syoung-pc" prjModule="Timer" project="" tag="${scontrol_branch}-win32_x86_64" time="2025-03-13T12:06:44-04:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="MISRA C++ 2008" pseudoUrl="builtin://MISRA C++ 2008" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="-249486341" locRef="1" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.c" totLns="30" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="Timer" projPath="/Timer" project="Timer" resProjPath="driver.c" totLns="76" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/driver.c"/>
         <Loc auth="syoung" hash="-275311578" locRef="3" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.c" totLns="155" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="Timer" projPath="/Timer" project="Timer" resProjPath="stdinout.c" totLns="55" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/stdinout.c"/>
         <Loc auth="syoung" hash="-1204881763" locRef="5" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.h" totLns="14" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/clock.h"/>
         <Loc auth="syoung" hash="1651539479" locRef="6" projId="Timer" projPath="/Timer" project="Timer" resProjPath="consts.h" totLns="9" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/consts.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="7" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.h" totLns="36" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/timer.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="8" projId="Timer" projPath="/Timer" project="Timer" resProjPath="inout.h" totLns="15" uri="file:/C:/Users/syoung/Documents/CppTest/cpptest/examples/Timer/inout.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:04">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="390" id="Timer" name="Timer" qfixErrs="0" suppErrs="0" totErrs="163" totFiles="8" totLns="390"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="163;" authUrg="50;" desc="MISRA C++ 2008" name="MISRA2008" rules="346" total="163"/>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project should not contain unused variables with external linkage" id="MISRA2008-0_1_3_d" origId="GLOBAL-UNUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused uninitialized local variables" id="MISRA2008-0_1_3_f" origId="OPT-02_b" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project should not contain unused uninitialized variables with internal linkage" id="MISRA2008-0_1_3_g" origId="OPT-43_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="14;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="33"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under destruction" id="MISRA2008-12_1_1_b" origId="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="3;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="MISRA2008" desc="The standard header file &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="2;" cat="MISRA2008" desc="The time handling functions and macros of library &lt;ctime> shall not be used" id="MISRA2008-18_0_4_b" origId="MISRA2004-20_12_b" sev="2" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="MISRA2008" desc="The types defined in the library &lt;ctime> shall not be used" id="MISRA2008-18_0_4_c" origId="MISRA2004-20_12_c" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2_b" origId="MISRA2004-2_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1_b" origId="PFO-01_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4_b" origId="GLOBAL-NOEXTERNDEF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="OPT-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="2;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right-hand operand of a constant expression shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2008-5_8_1_b" origId="CODSTA-302" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA2008" desc="Declare local variable as const whenever possible" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="1;" cat="MISRA2008" desc="Declare parameters as const whenever possible" id="MISRA2008-7_1_1_b" origId="CODSTA-CPP-53_b" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="GLOBAL-REUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="GLOBAL-REUSEDEXTFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_c" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_d" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3_b" origId="MISRA2004-2_4_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="34;" authUrg="12;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="34"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall not use positive integer literals as operands" id="MISRA2008-5_0_21_b" origId="CODSTA-63_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" id="MISRA2008-5_2_10" origId="CODSTA-232" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="BD-PB-RECFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="127;" authUrg="38;" id="2" total="127"/>
            <Severity authTot="34;" authUrg="12;" id="4" total="34"/>
            <Severity authTot="2;" authUrg="0;" id="5" total="2"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/Timer/clock.c" locStartln="5" sev="2" auth="syoung" locRef="1" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="23663752-f37a-3593-bc42-0d4caa902284" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1958c86e-f7f1-38b9-bc8a-541f9ab94a8e" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="5" goals="1,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="15" locFile="/Timer/clock.c" locStartln="15" sev="4" auth="syoung" locRef="1" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="049a46e6-6262-33bb-8859-3eae4230cc88" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="600fb9ec-4f4e-3224-88f9-c7919fcb5a26" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="15" goals="1,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="16" locFile="/Timer/clock.c" locStartln="16" sev="2" auth="syoung" locRef="1" rule="MISRA2008-18_0_4_c" lnHash="-1564703446" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="-1564703446" unbViolId="268296ed-5565-3880-88a5-b53719c044d0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c487ddab-82d8-34a8-9efe-0f7b686f15ef" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="16" goals="1,"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="16" locFile="/Timer/clock.c" locStartln="16" sev="2" auth="syoung" locRef="1" rule="MISRA2008-18_0_4_b" lnHash="-1564703446" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-1564703446" unbViolId="98695674-fcf2-3036-84d6-ef9e4c117b8c" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8f0ac65-77ad-3bf7-9eb9-743042adf910" locEndPos="23" locType="sr" urgent="true" hash="-249486341" locEndLn="16" goals="1,"/>
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type 'void *'" ln="16" locFile="/Timer/clock.c" locStartln="16" sev="2" auth="syoung" locRef="1" rule="MISRA2008-5_2_8" lnHash="-1564703446" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-1564703446" unbViolId="c7571902-2e3a-3147-b69f-e93f408e62f3" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78c0c20b-ffb0-350c-bfdd-6e44f59b9e00" locEndPos="28" locType="sr" urgent="true" hash="-249486341" locEndLn="16" goals="1,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="17" locFile="/Timer/clock.c" locStartln="17" sev="4" auth="syoung" locRef="1" rule="MISRA2008-3_9_2" lnHash="-237631284" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-237631284" unbViolId="5f8a4164-5763-3a2a-a458-0e6b08a15a53" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3cf9964-4281-3c42-a7b9-ca2efa721d2a" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="17" goals="1,"/>
    <StdViol msg="Usage of 'ctime' function is not allowed" ln="17" locFile="/Timer/clock.c" locStartln="17" sev="2" auth="syoung" locRef="1" rule="MISRA2008-18_0_4_b" lnHash="-237631284" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-237631284" unbViolId="327b9464-2778-31fd-addc-b2c94ed19c81" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="324fd6f1-025d-3c38-b417-83ef23231da3" locEndPos="15" locType="sr" urgent="true" hash="-249486341" locEndLn="17" goals="1,"/>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/Timer/clock.c" locStartln="19" sev="2" auth="syoung" locRef="1" rule="MISRA2008-0_3_2" lnHash="369521280" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="369521280" unbViolId="947736f7-6adc-3fea-b651-063898de6e8d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e425513-c9ac-3e7d-8fc0-6ed7520bf02e" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'sprintf' function" ln="19" locFile="/Timer/clock.c" locStartln="19" sev="2" auth="syoung" locRef="1" rule="MISRA2008-5_2_12" lnHash="369521280" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="369521280" unbViolId="cb054f71-e7c7-360c-b2ba-5a95b502266e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="603775f4-3a69-3584-bffe-df910bc8c9ca" locEndPos="13" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/Timer/clock.c" locStartln="20" sev="2" auth="syoung" locRef="1" rule="MISRA2008-0_3_2" lnHash="-1350296736" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1350296736" unbViolId="0e551973-0d57-3342-ba14-dfb33d4001f4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f47064a-7cca-3cce-b2d5-74d593da2d38" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="20" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'print_string' function" ln="20" locFile="/Timer/clock.c" locStartln="20" sev="2" auth="syoung" locRef="1" rule="MISRA2008-5_2_12" lnHash="-1350296736" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="-1350296736" unbViolId="c99f5708-a57a-3fbb-a1b9-8a52d0a7b996" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81d3201e-1f28-3fa0-a8fd-4f13e3fb9795" locEndPos="18" locType="sr" urgent="true" hash="-249486341" locEndLn="20" goals="1,"/>
    <StdViol msg="Function 'set_time' is empty" ln="27" locFile="/Timer/clock.c" locStartln="27" sev="2" auth="syoung" locRef="1" rule="MISRA2008-0_1_8_b" lnHash="-1989025327" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="-1989025327" unbViolId="9aab737c-90a7-3540-9d93-38b445fdbd81" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0b5b678-9b7a-39c6-8b85-81eede258313" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1,"/>
    <StdViol msg="The 'set_time' function is not used in the testing scope" ln="27" locFile="/Timer/clock.c" locStartln="27" sev="2" auth="syoung" locRef="1" rule="MISRA2008-0_1_10_b" lnHash="-1989025327" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1989025327" unbViolId="21a9f3d9-13ab-3868-8691-e4461943a3c3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="db377e7d-02c0-3824-b75f-accbee5ab73e" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="27" locFile="/Timer/clock.c" locStartln="27" sev="2" auth="syoung" locRef="1" rule="MISRA2008-18_0_4_c" lnHash="-1989025327" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="-1989025327" unbViolId="ff1941ff-6fa5-3b04-b8f3-e7146e54460d" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77f0e734-82d4-3e10-974f-53b0e86f6824" locEndPos="15" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1,"/>
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/Timer/clock.c" locStartln="27" sev="2" auth="syoung" locRef="1" rule="MISRA2008-7_1_1_b" lnHash="-1989025327" rule.header="Declare parameters as const whenever possible" tool="c++test" lineHash="-1989025327" unbViolId="11b2f776-8a2c-3ccf-9064-dcd1b10c8dc9" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a32c87ad-d465-3a11-b78f-6cd780bfc040" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/Timer/driver.c" locStartln="6" sev="2" auth="syoung" locRef="2" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="fb52986d-45ad-32b7-98b4-b64d63ff40c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="471ac0e4-fa55-3d35-93e7-e3101c45a68d" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/Timer/driver.c" locStartln="13" sev="4" auth="syoung" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1050535651" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1050535651" unbViolId="e364359a-0898-3662-bae9-afd5dbe94c8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5db3d8f-ec83-3e05-882b-f3ccd9232969" locEndPos="1" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1,"/>
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/Timer/driver.c" locStartln="13" sev="2" auth="syoung" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="204fbdcf-5b4f-39ce-a2fb-8ae418a4070a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e08a2db-35ff-399f-876a-348e47bd81b2" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/Timer/driver.c" locStartln="15" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="923795973" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="923795973" unbViolId="2422830d-17bf-3387-9917-cb0bbdee1e8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9027ff5-9698-3102-bbfc-cfb7c61f6333" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="15" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/Timer/driver.c" locStartln="16" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="378303775" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="378303775" unbViolId="6cfe3462-d9ed-3ba3-902c-895184057ec4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed945a24-daf2-3e9b-8df6-0b5c29f64497" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="16" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/Timer/driver.c" locStartln="17" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="461595667" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="461595667" unbViolId="548afe6b-ccd7-36b1-adfb-24a5dd105680" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa02ec00-c9c7-32dd-b7e6-438fa684cf22" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="17" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/Timer/driver.c" locStartln="18" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="9ab12686-a3db-359e-82da-58693067bdf4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a8d2244-c712-3367-9a47-0a60b3c8dd82" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="18" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/Timer/driver.c" locStartln="19" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="1674314502" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1674314502" unbViolId="0e8f287a-90fa-304a-a0f3-42b6ffe40b60" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99e949fe-8dcb-31e3-8d1b-16ca323a101c" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="19" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/Timer/driver.c" locStartln="20" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-94421320" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-94421320" unbViolId="023b8306-9db3-3370-87cc-14051a81d7f5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4950b456-ef58-3049-abb2-a6e59f05c4de" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="20" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/Timer/driver.c" locStartln="21" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="834318816" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="834318816" unbViolId="769eef7d-24ae-3dc2-a1d2-45e60c82e5af" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51de2a12-f594-3066-9849-4ec17dddc0a2" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="21" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/Timer/driver.c" locStartln="22" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="1075694496" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1075694496" unbViolId="3a1b966a-99a7-360e-af2f-e16d2cca7d76" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8166dbc-8f6a-3b1f-a282-3d7ceb17716a" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="22" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/Timer/driver.c" locStartln="23" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="41fe59a8-17b9-3623-804c-bc33d6431537" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0c10374-ffee-3bdd-814c-ee8bdaf759bf" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="23" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/Timer/driver.c" locStartln="24" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1018687565" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1018687565" unbViolId="ba425ee5-5e72-3cd2-a926-e8d16c9dc286" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96e0c53b-cdbb-3304-a2a3-e7179435523f" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="24" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/Timer/driver.c" locStartln="25" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="a52ef608-70e8-3f10-bedd-de22ac500030" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d908cc39-5580-38da-883d-567b02f6cad6" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="25" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/Timer/driver.c" locStartln="26" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1234703117" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1234703117" unbViolId="b452766e-34d5-3b32-8e15-9572d5b6e61a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f6cb0eb-f5c9-3bd4-a788-c187e3bd0058" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="26" goals="1,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/Timer/driver.c" locStartln="28" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-859906268" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-859906268" unbViolId="29aa14a5-a297-3022-909f-2b81bebe1c61" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3cd76ec-365b-3298-a813-c6d177ef13e4" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0,"/>
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/Timer/driver.c" locStartln="32" sev="2" auth="syoung" locRef="2" rule="MISRA2008-3_3_1" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="c4a875f4-27d7-3fcd-8b6c-cf72abbb8d04" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d48f2e4-1147-37c6-ae42-bb9fbe8bef4e" locEndPos="6" locType="sr" urgent="true" hash="65740504" locEndLn="32" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/Timer/driver.c" locStartln="35" sev="4" auth="syoung" locRef="2" rule="MISRA2008-3_9_2" lnHash="1236489322" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1236489322" unbViolId="1849e220-21d8-397b-81b6-183b661edbf6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea234c68-c0b4-3b7b-94ce-8f0bd6799f5b" locEndPos="9" locType="sr" urgent="true" hash="65740504" locEndLn="35" goals="1,"/>
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/Timer/driver.c" locStartln="35" sev="2" auth="syoung" locRef="2" rule="MISRA2008-3_4_1_a" lnHash="1236489322" rule.header="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" tool="c++test" lineHash="1236489322" unbViolId="e2d8d1b6-f67d-3c7f-8aff-24a6ead51763" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc91e546-d03d-34c3-9609-025d8730482b" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0,"/>
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/Timer/driver.c" locStartln="35" sev="2" auth="syoung" locRef="2" rule="MISRA2008-8_0_1" lnHash="1236489322" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="1236489322" unbViolId="3af4f398-140e-3078-b6fc-a67cffba0b9e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e46d00e4-bee4-3ab2-aaf4-7f4a0b76943b" locEndPos="18" locType="sr" urgent="true" hash="65740504" locEndLn="35" goals="1,"/>
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/Timer/driver.c" locStartln="35" sev="2" auth="syoung" locRef="2" rule="MISRA2008-7_1_1" lnHash="1236489322" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1236489322" unbViolId="76ed837d-5023-3e04-b52f-58073d7a750e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b741f7b-e909-3323-b55d-2079dec608cc" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/Timer/driver.c" locStartln="42" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="420014112" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="420014112" unbViolId="2fee247f-0c03-3ea3-8799-1daef829aefb" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4f3fac0-e001-3fbc-8cfb-d2b9382b7903" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/Timer/driver.c" locStartln="44" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="1318983287" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1318983287" unbViolId="6062074d-4dd2-3a17-b62d-68c478565fd6" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96245270-2c99-30c4-97f6-317dccb3ee78" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/Timer/driver.c" locStartln="48" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="482597223" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="482597223" unbViolId="68f712a8-fb01-3e1d-a618-84268d35a0b8" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a306909a-c689-3745-997a-faee3650e2a3" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/Timer/driver.c" locStartln="59" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1303736882" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1303736882" unbViolId="87ec1a69-7ea1-32c7-a153-bb170bc5416a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76d3b7b0-2526-368a-be7b-7f8b14624792" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0,"/>
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/Timer/driver.c" locStartln="60" sev="2" auth="syoung" locRef="2" rule="MISRA2008-6_6_5" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="48453556-cc2f-3eb5-bf39-62b94f3a9d1f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16090789-fcb3-36ff-8e2a-f7944f2bdcf2" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/Timer/driver.c" locStartln="63" sev="2" auth="syoung" locRef="2" rule="MISRA2008-0_3_2" lnHash="94038296" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="94038296" unbViolId="640deb7e-5749-35c8-b0f1-af4159950fc6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cf3530c-1129-3d80-be4a-c2e52dd055c6" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/Timer/timer.c" locStartln="6" sev="2" auth="syoung" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="ee7ef858-6308-308c-959b-9cf698aa022b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a124284a-0a9c-3dd8-ba17-b2ec3946a4b4" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/Timer/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1227318948" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1227318948" unbViolId="140df7ac-c4b8-3db9-ad21-b1516965e6af" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54169e9e-f561-39a6-907f-6f191cdc69dd" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0,"/>
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/Timer/timer.c" locStartln="17" sev="2" auth="syoung" locRef="3" rule="MISRA2008-3_3_1" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="7639bbfd-b2cd-31c9-9f62-fcdb5b808f2d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b702ee9f-ee18-3214-a544-687f294c4a35" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/Timer/timer.c" locStartln="18" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1846901926" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1846901926" unbViolId="5fc0a720-05c3-3ab3-a58d-78241909b819" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5773ee1-9b11-3f0e-9c54-ee2d172ee164" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'memset' function" ln="22" locFile="/Timer/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_12" lnHash="-1074791283" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="-1074791283" unbViolId="c92381e3-3130-361b-a4ec-1c5dd0ec288b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124a7e0d-35a3-3433-96fa-b6b0ea5ef282" locEndPos="12" locType="sr" hash="-275311578" locEndLn="22" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="22" locFile="/Timer/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-1074791283" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1074791283" unbViolId="15e49ef0-481f-3cc2-a884-9e819c9499f7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc77be74-790c-37ca-a976-3d8d9e1fca06" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/Timer/timer.c" locStartln="28" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="fec509b7-7799-3e27-a1f9-ece7e1f5d32b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2182ee11-7286-3b65-83cf-1138acd5ea08" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0,"/>
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/Timer/timer.c" locStartln="38" sev="2" auth="syoung" locRef="3" rule="MISRA2008-3_3_1" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="5841c02f-3ba3-3dfc-9a3b-9ee646155368" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0065438-fadc-3ce3-bd55-3c7605c9a2fa" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="621530644" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="621530644" unbViolId="fa3afc5a-aefa-3bc4-bd55-4b83cab2a1e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e218fd2f-f5ea-3fcd-9f6d-c2985bf716b4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="89f67e9e-296a-38ca-bad9-1d1ac5a53be1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb3791f9-790a-3f62-811d-274236b4f54b" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'start_h' local variable is not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_1_3_f" lnHash="621530644" rule.header="A project shall not contain unused uninitialized local variables" tool="c++test" lineHash="621530644" unbViolId="c5da71da-ddff-321d-bae3-f876e033f601" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c2460f9-4c2f-31b1-aacd-58081c013d54" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="7211fd29-2776-35a2-a01d-6f5f70d82213" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ec15c3a-23f5-3f05-8535-a42c6300f0ca" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="bfb9afb8-5211-3f07-9098-fdd1eeeb60a2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41e703ab-91ce-3323-9a13-b020985eaad2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'start_m' local variable is not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_1_3_f" lnHash="621530644" rule.header="A project shall not contain unused uninitialized local variables" tool="c++test" lineHash="621530644" unbViolId="506f777b-0e01-3c00-aa3f-2f253befe502" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0aedc580-9d56-3d0c-a312-3aca95ce7d22" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="54a220ef-55b2-39fd-a48c-8b16489c18ec" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="175d2c2e-e49d-3662-9a25-8e4930fec78d" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="44f8edb3-2691-3ef4-a257-5fa5cc9322d9" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b74dccc0-4a3f-3bed-ac61-593827681d2a" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'end_h' local variable is not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_1_3_f" lnHash="621530644" rule.header="A project shall not contain unused uninitialized local variables" tool="c++test" lineHash="621530644" unbViolId="0cab6ac5-4adf-3d93-a357-865a9373edfe" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ebe40a9-4c44-3490-ae1f-b9ffcd746588" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="ecb1b3da-ff89-32fd-b66c-f631ccc422d7" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28f449d6-33a7-3884-9f05-678f17b99279" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="0e0f0820-1efe-3ade-bb68-afb77e9eeb59" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85cb6576-7595-3680-a2d7-8c542ffb6f21" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'end_m' local variable is not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_1_3_f" lnHash="621530644" rule.header="A project shall not contain unused uninitialized local variables" tool="c++test" lineHash="621530644" unbViolId="d74b5ca7-545a-3960-8a45-064e48aa8b63" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed6ebbe4-5468-3312-918f-171a918bf757" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="42" locFile="/Timer/timer.c" locStartln="42" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_c" lnHash="1079331828" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="1079331828" unbViolId="d78159f0-3a69-37ec-a611-3b4b76faeebe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="305b3cbf-1650-3e17-acf0-ab8f9bcb360b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="42" goals="0,"/>
    <StdViol msg="The 'tm' identifier should not be used" ln="43" locFile="/Timer/timer.c" locStartln="43" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_c" lnHash="1350390768" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="1350390768" unbViolId="4f5f8e96-1b42-3d05-b72d-c9d66e726789" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0846c0e0-c0ec-3710-90c4-b1d171bf6fab" locEndPos="12" locType="sr" hash="-275311578" locEndLn="43" goals="0,"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="45" locFile="/Timer/timer.c" locStartln="45" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="1705568950" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="1705568950" unbViolId="00f27ac0-459e-3fdb-aa03-2aa5b19fb88f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9daa3b7-f723-3e6a-9930-39ab262c791c" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type 'void *'" ln="45" locFile="/Timer/timer.c" locStartln="45" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_8" lnHash="1705568950" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="1705568950" unbViolId="837f2e5d-8a9c-3f56-b05f-ebe7368f2770" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9493efca-7169-3f25-b618-ec8539cad719" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="46" locFile="/Timer/timer.c" locStartln="46" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-1526808077" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-1526808077" unbViolId="26e0b23a-be5a-3d25-9cc5-bf1cc41ce0f3" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8540234-18a1-34dd-a89b-26f882b9996b" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0,"/>
    <StdViol msg="Do not convert pointer to void type to an object with pointer type 'struct timer_record *'" ln="48" locFile="/Timer/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_8" lnHash="-527707354" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-527707354" unbViolId="f15cfd45-08dd-34ad-baba-d1239b767b43" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70b4ed3f-d010-300a-b99b-295d2cd8fa5c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/Timer/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_4_1" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="1934ab06-2a38-33bb-8557-c0dc5de6bdfa" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f6d133c-dbed-3b94-808b-e130acd23b52" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0,"/>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/Timer/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="79304501" lang="cpp" violId="f57c54ec-2baf-3543-9842-a499d51fd449" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="5" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="428ecbbf-3008-3d56-956d-c7b33affb2ea" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/Timer/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/Timer/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/Timer/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/Timer/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/Timer/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/Timer/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/Timer/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/Timer/timer.c" locStartln="52" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-337297020" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-337297020" unbViolId="d8871628-7c3d-31d4-a0c0-40684bd6d405" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c22fb61d-8ea9-3a58-a3ce-8685be31fd49" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/Timer/timer.c" locStartln="54" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1456902895" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1456902895" unbViolId="6e6e3f8b-ce1b-3a69-b736-5901e0fc9b44" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa78af4d-2196-3742-9865-70ea9df31578" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0,"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="57" locFile="/Timer/timer.c" locStartln="57" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-731975428" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-731975428" unbViolId="8eb863f7-0ecc-3568-8ebd-fa886eac09ae" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fde6197-efab-3965-b266-0cd39be00e2e" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/Timer/timer.c" locStartln="60" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="17156239" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="17156239" unbViolId="03b8f46d-058c-3dcb-b06f-76a96ada10e6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8842376-4708-3f7c-a3b6-dd6ef03c4719" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/Timer/timer.c" locStartln="62" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-129737380" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-129737380" unbViolId="ab492f39-b4e4-3f4c-be73-a13569299b26" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4a68ca3-5cfb-3e1e-914a-1161f015bf20" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0,"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="65" locFile="/Timer/timer.c" locStartln="65" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-1409060683" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-1409060683" unbViolId="d5414f3b-aa6c-39ef-8c59-29b9ec3bab87" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87f9dd29-af43-3859-b37f-2d9273310db6" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/Timer/timer.c" locStartln="68" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-397800787" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-397800787" unbViolId="61db61d3-3714-3404-adb3-c459f2a6908a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa7e040a-249b-3d76-8920-48d57f213bb0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="69" locFile="/Timer/timer.c" locStartln="69" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="1021803899" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1021803899" unbViolId="5c1bb5c9-3854-3b6b-957f-5e810da51d19" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e89b3210-a950-3683-af67-a42d27242203" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/Timer/timer.c" locStartln="74" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="-231664969" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-231664969" unbViolId="49b9f4f5-a5f7-3a4b-b643-b378867b1540" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a4cf6ba-4a82-31dd-909b-ea7cf6def367" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/Timer/timer.c" locStartln="83" sev="2" auth="syoung" locRef="3" rule="MISRA2008-6_6_5" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="76e1b1a1-fc7c-39ad-898f-29dc45682e54" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88b35f5d-bcde-33fc-a258-c32c837ae799" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/Timer/timer.c" locStartln="85" sev="2" auth="syoung" locRef="3" rule="MISRA2008-6_6_5" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="23dd298d-c207-31ae-b5bb-92d3d19822d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42c73913-2f0b-31ce-a80e-5ff7b356d473" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0,"/>
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/Timer/timer.c" locStartln="88" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1_b" lnHash="2049209490" rule.header="Declare parameters as const whenever possible" tool="c++test" lineHash="2049209490" unbViolId="9b78d782-dff4-30d0-a7d3-f16428c30b4d" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9eb1313-19dd-369b-93a1-d2721801ee8d" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0,"/>
    <StdViol msg="The #ifdef preprocessor directive is used" ln="90" locFile="/Timer/timer.c" locStartln="90" sev="2" auth="syoung" locRef="3" rule="MISRA2008-16_2_1_c" lnHash="-1900461572" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-1900461572" unbViolId="6608e90e-34cb-342d-8792-0ec21c7d96d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af951289-fed5-30d0-90c8-e31cb2363812" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="92" locFile="/Timer/timer.c" locStartln="92" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="-546075861" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-546075861" unbViolId="55001ec7-f9e3-3d02-8b45-09bdf04d4bab" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0014babb-7b3c-3f01-beb2-624d8199aa77" locEndPos="9" locType="sr" hash="-275311578" locEndLn="92" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/Timer/timer.c" locStartln="96" sev="2" auth="syoung" locRef="3" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="9552bdc1-040b-3856-bbc3-75adabdfee40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3883fd10-9e9a-30e9-a8fe-4beab24f8dac" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/Timer/timer.c" locStartln="100" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1597326853" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1597326853" unbViolId="bad1f132-a0af-3a4a-b5f8-29615c905039" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d06b29e-ff3b-315b-95bf-e597a962760a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/Timer/timer.c" locStartln="108" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="997006354" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="997006354" unbViolId="27a5a31d-35b2-3ab9-8408-5b7d33e07e56" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0b47020-c653-3947-a9d1-4034755f1889" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0,"/>
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/Timer/timer.c" locStartln="108" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1_b" lnHash="997006354" rule.header="Declare parameters as const whenever possible" tool="c++test" lineHash="997006354" unbViolId="863cae9f-8f40-3117-b8d8-54b0e8e2a471" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ff9df0-d887-3bfd-9eca-3699ef0f1864" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0,"/>
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/Timer/timer.c" locStartln="110" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1" lnHash="-1356760849" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="-1356760849" unbViolId="a569d1c3-46a9-39e0-be84-b2eabe7bd662" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba8c0c35-23cd-39f3-b716-57b719dede78" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/Timer/timer.c" locStartln="111" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="9bd35486-1703-3cf4-9b40-15098b2fad0f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b3fcb2a-a4d4-3f82-b1fe-82a4a6d765be" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0,"/>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/Timer/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRA2008-0_3_1_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="cd562181-c67a-368e-855e-c6813f00aa10" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="5" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="a5299862-4da0-3463-ad90-5cf960da3664" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/Timer/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/Timer/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/Timer/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/Timer/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/Timer/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRA2008-5_0_16_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1049949603" lang="cpp" violId="18154813-7611-3bd3-afd8-d8791150812d" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="7e0051f1-63d3-3f1e-bfff-296c4ac8c476" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/Timer/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/Timer/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/Timer/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/Timer/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/Timer/timer.c" locStartln="116" sev="2" auth="syoung" locRef="3" rule="MISRA2008-4_10_2" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="7e7a8575-7683-39b8-a892-c6666ed26a47" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65f09eb0-ff0d-3c6a-a64b-f4ef35115bab" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/Timer/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_4_1" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="a6da889a-f3ca-38e1-b423-fce5204e6618" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a05b4437-35f8-3e32-81fb-9f270c9f24b0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/Timer/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1296456001" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="b2cb3b1d-8cab-37cf-9a25-ef7fd38b14c1" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5bcfffb-fce1-3d80-be68-44912fc1d12d" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="126" locFile="/Timer/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1296456001" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="c7c2ef65-084c-3fd7-a1ce-d1e78893e5c9" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66964300-4c3e-3081-aeea-b326dc16c648" locEndPos="35" locType="sr" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/Timer/timer.c" locStartln="126" sev="2" auth="syoung" locRef="3" rule="MISRA2008-7_1_1_b" lnHash="1296456001" rule.header="Declare parameters as const whenever possible" tool="c++test" lineHash="1296456001" unbViolId="cccc85f3-0618-35f6-be18-fcbdc7a405ba" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e246c70e-272a-3e91-919d-26bb9ae14c28" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="128" locFile="/Timer/timer.c" locStartln="128" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1285013714" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1285013714" unbViolId="b330b671-63cb-3ddd-87cf-54f67cbc13a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02c1e81b-c439-3247-be3c-0fc74cd85efc" locEndPos="5" locType="sr" hash="-275311578" locEndLn="128" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="129" locFile="/Timer/timer.c" locStartln="129" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1725726827" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1725726827" unbViolId="630e8d4f-c6ac-3a5e-8b18-38b2def863f4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7241907-cb89-3ecc-ad44-ff2aed3c0cfa" locEndPos="5" locType="sr" hash="-275311578" locEndLn="129" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-23883783" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="9774d2c6-d70d-3332-a7ac-6eac76059783" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2f4d55e-e017-341c-a42e-cec4c71d8b9f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-23883783" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-23883783" unbViolId="91eafcf7-b099-34f9-a991-d3add0e4129c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1e159e8-ef5d-3e1d-bedd-f02e3249b395" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'strftime' function" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_12" lnHash="-23883783" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="-23883783" unbViolId="254f182e-2183-3a8a-9546-70ccd11275d9" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eea3875a-68e0-3747-a604-7b2013f113dc" locEndPos="14" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-23883783" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-23883783" unbViolId="8c8fd83c-df51-3d71-a915-fa1041fe5610" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5a7cd38-ab0e-3965-b3a3-c29efd4ed2a7" locEndPos="21" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-23883783" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="1ed57919-3993-31ce-b8d3-e5b8d056ec5f" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d47c342-f933-3c4c-bc0c-cc193db3cf1e" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-1644342585" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="54d7e0dd-22e0-3c98-a1d9-8bf865f26cb4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5de7fb7-b83a-3134-8768-4da77003ee7b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1644342585" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1644342585" unbViolId="670788bd-13f7-385f-8954-33702fc422ef" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9db67f93-7940-38e1-924a-819ae45fbe63" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'strftime' function" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_12" lnHash="-1644342585" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="-1644342585" unbViolId="65d1d49f-0f19-3a1f-b839-7c853bff64f1" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cd232ab-c4a1-3acb-97d0-8a150cf588d1" locEndPos="14" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-1644342585" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1644342585" unbViolId="fc672995-10de-33f3-a495-fc751d0c6ce6" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95ca6d2e-9ec0-3011-8e1d-a56e5f3e9e9a" locEndPos="19" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRA2008-18_0_4_b" lnHash="-1644342585" rule.header="The time handling functions and macros of library &lt;ctime> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="d7e24ad3-b1c5-3142-9a1d-a0e9b7b7a3ab" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeac6169-2d18-3771-ab94-3108787ebd23" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/Timer/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="MISRA2008-0_1_2_aa" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="A project shall not contain infeasible paths" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="7ff61801-74e9-33ca-bf00-258389c790d6" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="cb41c203-e092-308a-9601-fd0bddcf0228" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/Timer/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/Timer/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/Timer/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/Timer/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/Timer/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/Timer/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/Timer/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="201551585" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="201551585" unbViolId="68e20f19-541b-33fc-b2a0-32399852b0dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="744ba601-75d6-39db-a9a2-b424640092f6" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0,"/>
    <FlowViol msg="There is at least one path where the value of &quot;buf&quot; is not used" ln="144" locFile="/Timer/timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="155" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-2004706563" ruleSCSCMsg="End of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="154" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1229844756" lang="cpp" violId="fe4675d9-4857-3e13-be9e-80e7652067e3" locEndPos="0" locEndLn="145" goals="0," locStartln="144" sev="2" locRef="3" tool="c++test" lineHash="-2004706563" unbViolId="76bfe3bd-0bef-3841-bd78-4a789c5ac077" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-2004706563" ln="144" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="144" srcRngEndLn="145" srcRngFile="/Timer/timer.c" desc="char buf[BUF_SIZE];" ElType=".P" rngLn="144">
          <Anns>
            <Ann msg="Point where value is declared" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="145" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="145" srcRngEndLn="146" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="145"/>
        <ElDesc lineHash="1628413856" ln="146" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="146" srcRngEndLn="147" srcRngFile="/Timer/timer.c" desc="print_string(&quot;\n\nCurrent Set Timers&quot;);" ElType="." rngLn="146"/>
        <ElDesc lineHash="1760988551" ln="147" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="147" srcRngEndLn="148" srcRngFile="/Timer/timer.c" desc="print_string(&quot;\nRecord#\tStart Time\tEnd Time\tChannel\n&quot;);" ElType="." rngLn="147"/>
        <ElDesc lineHash="1531685295" ln="148" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="148" srcRngEndLn="149" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; curr_index; i++)" ElType="." rngLn="148">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming false)" kind="condEval"/>
            <Ann msg="Not entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-332149005" ln="153" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="153" srcRngEndLn="154" srcRngFile="/Timer/timer.c" desc="print_string(&quot;\n\n&quot;);" ElType="." rngLn="153"/>
        <ElDesc lineHash="125" ln="154" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="154" srcRngEndLn="155" srcRngFile="/Timer/timer.c" desc="}" ElType=".C" rngLn="154">
          <Anns>
            <Ann msg="End of the path" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="144" locFile="/Timer/timer.c" locStartln="144" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="135e20c0-fab1-3046-b40e-42bdd4b10286" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aad4a7b-fa50-3c90-9f9a-298b7cd1d89e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="144" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/Timer/timer.c" locStartln="145" sev="4" auth="syoung" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="74a88aa5-ba63-38e0-aa4f-00d832018145" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c828ae-4898-374f-81e5-61667d7cda12" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/Timer/timer.c" locStartln="146" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="1628413856" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1628413856" unbViolId="8a554240-fd97-3b4b-88cc-c82e32b2b5da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41aed1a3-1f41-3ed1-9bf6-20d73d5e373f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/Timer/timer.c" locStartln="147" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="1760988551" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1760988551" unbViolId="235940d0-fb75-3d71-86af-08d12e6e1cf1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cf46d6a-4451-358d-b328-1baa20354fc3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'format_timer_record' function" ln="150" locFile="/Timer/timer.c" locStartln="150" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_12" lnHash="-1846563555" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="-1846563555" unbViolId="27910f8e-b785-378f-80d7-8635036871ea" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8adcdab-a475-3dfa-bf77-ff6d5838c6b3" locEndPos="32" locType="sr" hash="-275311578" locEndLn="150" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/Timer/timer.c" locStartln="151" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="924656480" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="924656480" unbViolId="963354a5-a89c-3354-98c5-a3458cf6cd48" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b13d4dbf-77e5-3a71-a256-4df2b16dade4" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'print_string' function" ln="151" locFile="/Timer/timer.c" locStartln="151" sev="2" auth="syoung" locRef="3" rule="MISRA2008-5_2_12" lnHash="924656480" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="924656480" unbViolId="7fc66b74-b6c6-3c96-9d8d-b5b858b714f0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67a8264b-b06c-3631-8177-9f6f7c1f1069" locEndPos="22" locType="sr" hash="-275311578" locEndLn="151" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/Timer/timer.c" locStartln="153" sev="2" auth="syoung" locRef="3" rule="MISRA2008-0_3_2" lnHash="-332149005" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-332149005" unbViolId="e0c967b6-1fdb-3116-92f7-384b82469268" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7872e5bf-4847-3151-afbf-bfb3a6afc186" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/Timer/stdinout.c" locStartln="10" sev="2" auth="syoung" locRef="4" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="a619c39d-f6e2-344d-bc03-a915c3a6c4df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0316428-624b-34b0-ac15-54553af052e7" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/Timer/stdinout.c" locStartln="16" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="2073209951" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2073209951" unbViolId="b1336f14-c2cf-33ae-9f07-0e125dd01910" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5a3f00b-2fd0-3881-b164-ccb7b3d38776" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="18" locFile="/Timer/stdinout.c" locStartln="18" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-695983806" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-695983806" unbViolId="dc66e0af-6be2-3c7c-bfff-0704165b11cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1b2b12b-ce51-3862-b2b8-b131cce70b0a" locEndPos="5" locType="sr" hash="844867668" locEndLn="18" goals="0,"/>
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/Timer/stdinout.c" locStartln="18" sev="2" auth="syoung" locRef="4" rule="MISRA2008-7_1_1" lnHash="-695983806" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="-695983806" unbViolId="ae28e731-7e54-3665-ad7a-b57d8a1840a7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a7459cf-503f-34ff-b6ea-a1feba58e261" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'c' local variable is not used" ln="18" locFile="/Timer/stdinout.c" locStartln="18" sev="2" auth="syoung" locRef="4" rule="MISRA2008-0_1_3_f" lnHash="-695983806" rule.header="A project shall not contain unused uninitialized local variables" tool="c++test" lineHash="-695983806" unbViolId="054ad28b-e02c-3a26-8401-9c905251caf5" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d526ada-c4ef-3901-8c02-6d6ca6ad7be5" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/Timer/stdinout.c" locStartln="19" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="493bd340-e057-3a12-a2c7-4e21cce59aa8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e16fba5f-1650-3f57-b8cf-6a1c2891a9cf" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="20" locFile="/Timer/stdinout.c" locStartln="20" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="0ff13e7b-3888-3add-898d-b1712678914a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="312fe3c8-c5bd-30d0-8d1b-a617f73655c0" locEndPos="5" locType="sr" hash="844867668" locEndLn="20" goals="0,"/>
    <StdViol msg="The #ifdef preprocessor directive is used" ln="22" locFile="/Timer/stdinout.c" locStartln="22" sev="2" auth="syoung" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="341559746" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="341559746" unbViolId="08df6944-f9d2-311b-935e-229ff280c60a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cbdc9a4-5194-3eca-9d8f-b92ad87f81df" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="32" locFile="/Timer/stdinout.c" locStartln="32" sev="2" auth="syoung" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="-575068547" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-575068547" unbViolId="2391cdba-ef47-3b5f-957f-db95f1a2c566" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0f5ac43-a6c2-37f1-960b-22bf3a9b5f52" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/Timer/stdinout.c" locStartln="35" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1448247265" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1448247265" unbViolId="bc4cde00-0173-3136-83e2-357fef40b6df" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43bf8669-2a84-3384-9d26-594d5a37d585" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="40" locFile="/Timer/stdinout.c" locStartln="40" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1384567970" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1384567970" unbViolId="e82d22cf-ae37-3f4c-b122-785aada360e3" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efd72269-547f-3277-83c3-71fafac1f0fd" locEndPos="15" locType="sr" hash="844867668" locEndLn="40" goals="0,"/>
    <StdViol msg="Character constant  is used as LHS operand of  binary '+' operator" ln="40" locFile="/Timer/stdinout.c" locStartln="40" sev="2" auth="syoung" locRef="4" rule="MISRA2008-4_5_3" lnHash="-1384567970" rule.header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" tool="c++test" lineHash="-1384567970" unbViolId="c65d116a-97e3-32d8-b67c-f19f6cbbe7fd" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca06e071-ac4c-3b98-a811-8b0831cc17ca" locEndPos="21" locType="sr" hash="844867668" locEndLn="40" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/Timer/stdinout.c" locStartln="43" sev="2" auth="syoung" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="532253764" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="532253764" unbViolId="acce9d1a-d5f6-3225-9eb1-0d61669485c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="040884a5-3ff8-367a-b267-a557b00448f8" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="46" locFile="/Timer/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRA2008-18_0_2" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="1849933771" unbViolId="79dafccf-a8bc-3443-9510-90f6f6099fbe" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e595be8c-fc49-3f8e-8514-c4bf15fba556" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'atoi' function" ln="46" locFile="/Timer/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRA2008-5_2_12" lnHash="1849933771" rule.header="An identifier with array type passed as a function argument shall not decay to a pointer" tool="c++test" lineHash="1849933771" unbViolId="d6acaf98-7284-3c8e-9492-858a62511c0d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40acf6a1-f2a8-3e01-a8ef-1c5cf465b20b" locEndPos="18" locType="sr" hash="844867668" locEndLn="46" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1042560936" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="5806ee93-bfb7-33c0-ac54-567835c14b45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bde1354a-12eb-33ec-a22c-5655a41a1b25" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1042560936" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="3d4b8362-965d-331d-912a-139e7c96d336" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d85da898-1ecb-3abf-b190-4c25ec626e13" locEndPos="18" locType="sr" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="2" auth="syoung" locRef="4" rule="MISRA2008-7_1_1_b" lnHash="-1042560936" rule.header="Declare parameters as const whenever possible" tool="c++test" lineHash="-1042560936" unbViolId="7cece838-a687-3dd2-b703-7c050148b90f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="912f88b7-cda0-3c20-a924-e23af1da24d6" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="2" auth="syoung" locRef="4" rule="MISRA2008-7_1_2_a" lnHash="-1042560936" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1042560936" unbViolId="dee58008-a503-3ae8-8777-a32c7cfa911c" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7f27435-f7ef-3f57-baa0-a6486fd97244" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Reserved name '_clock_h_' used" ln="3" locFile="/Timer/clock.h" locStartln="3" sev="2" auth="syoung" locRef="5" rule="MISRA2008-17_0_2" lnHash="1162366501" rule.header="The names of standard library macros and objects shall not be reused" tool="c++test" lineHash="1162366501" unbViolId="45b345e4-c19f-3f51-8bcf-e0d00400e0b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5500def0-4ea2-3a55-8019-40f035771994" locEndPos="1" locType="sr" urgent="true" hash="-1204881763" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use reserved identifiers : _clock_h_" ln="3" locFile="/Timer/clock.h" locStartln="3" sev="2" auth="syoung" locRef="5" rule="MISRA2008-17_0_1_a" lnHash="1162366501" rule.header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" tool="c++test" lineHash="1162366501" unbViolId="32937427-eb74-33bc-bc07-8aafc3e129be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="657a9dd0-a769-392d-874f-35f1bd51a2ba" locEndPos="1" locType="sr" urgent="true" hash="-1204881763" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/Timer/clock.h" locStartln="5" sev="2" auth="syoung" locRef="5" rule="MISRA2008-18_0_4" lnHash="-1042055562" rule.header="The standard header file &lt;ctime> shall not be used" tool="c++test" lineHash="-1042055562" unbViolId="99118017-227f-3107-8e03-1945897b9c66" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37a8fd64-525a-3e2e-866d-f7473a4502ec" locEndPos="1" locType="sr" urgent="true" hash="-1204881763" locEndLn="5" goals="1,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/Timer/clock.h" locStartln="11" sev="2" auth="syoung" locRef="5" rule="MISRA2008-18_0_4_c" lnHash="-701432954" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="-701432954" unbViolId="ed91a9a3-c1ae-3050-9d32-446bcd7ef1a9" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b0f6f2d-ddb9-35be-801d-115ef1697d38" locEndPos="15" locType="sr" urgent="true" hash="-1204881763" locEndLn="11" goals="1,"/>
    <StdViol msg="Reserved name '_consts_h_' used" ln="3" locFile="/Timer/consts.h" locStartln="3" sev="2" auth="syoung" locRef="6" rule="MISRA2008-17_0_2" lnHash="-2108418455" rule.header="The names of standard library macros and objects shall not be reused" tool="c++test" lineHash="-2108418455" unbViolId="d8133357-e2b0-3413-a895-2e1eb917dea8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="671497a9-5b5b-368c-b769-e09b7d57e83e" locEndPos="1" locType="sr" urgent="true" hash="1651539479" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use reserved identifiers : _consts_h_" ln="3" locFile="/Timer/consts.h" locStartln="3" sev="2" auth="syoung" locRef="6" rule="MISRA2008-17_0_1_a" lnHash="-2108418455" rule.header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" tool="c++test" lineHash="-2108418455" unbViolId="45d9840d-cd01-38a5-9c9d-e3c996d3e9ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43584fd6-470b-3602-99ad-ea076606c1ac" locEndPos="1" locType="sr" urgent="true" hash="1651539479" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use the macro definition 'BUF_SIZE'" ln="5" locFile="/Timer/consts.h" locStartln="5" sev="2" auth="syoung" locRef="6" rule="MISRA2008-16_2_1_a" lnHash="1597408000" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1597408000" unbViolId="9aac71cd-148a-3156-b00b-23fa8c92c08d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a15b81a-4292-3cb6-8264-ca1f66c1ba84" locEndPos="1" locType="sr" urgent="true" hash="1651539479" locEndLn="5" goals="1,"/>
    <StdViol msg="Do not use the macro definition 'ERROR_CODE'" ln="6" locFile="/Timer/consts.h" locStartln="6" sev="2" auth="syoung" locRef="6" rule="MISRA2008-16_2_1_a" lnHash="-1649801122" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1649801122" unbViolId="32424d64-3eef-39c7-bbcd-fd5948478980" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64375820-3823-3720-a5c2-4e9f741fb5f4" locEndPos="1" locType="sr" urgent="true" hash="1651539479" locEndLn="6" goals="1,"/>
    <StdViol msg="Reserved name '_timer_h_' used" ln="3" locFile="/Timer/timer.h" locStartln="3" sev="2" auth="syoung" locRef="7" rule="MISRA2008-17_0_2" lnHash="-1992342642" rule.header="The names of standard library macros and objects shall not be reused" tool="c++test" lineHash="-1992342642" unbViolId="dd206f06-22c8-3bdd-b88f-f212cd195ad7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54794b25-ef26-36e8-8eb1-6bf43ae94927" locEndPos="1" locType="sr" urgent="true" hash="-311568100" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use reserved identifiers : _timer_h_" ln="3" locFile="/Timer/timer.h" locStartln="3" sev="2" auth="syoung" locRef="7" rule="MISRA2008-17_0_1_a" lnHash="-1992342642" rule.header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" tool="c++test" lineHash="-1992342642" unbViolId="ce8c6949-83bf-3478-aa5b-d30fad16a55e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76a73870-ba71-3bb1-8084-20bd0e3a7999" locEndPos="1" locType="sr" hash="-311568100" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/Timer/timer.h" locStartln="5" sev="2" auth="syoung" locRef="7" rule="MISRA2008-18_0_4" lnHash="-1042055562" rule.header="The standard header file &lt;ctime> shall not be used" tool="c++test" lineHash="-1042055562" unbViolId="b75b792d-4110-3291-9cb3-949dce2d8805" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="446c1114-249b-3496-bf43-c1d96f0e77c3" locEndPos="1" locType="sr" hash="-311568100" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/Timer/timer.h" locStartln="11" sev="2" auth="syoung" locRef="7" rule="MISRA2008-18_0_4_c" lnHash="2125380426" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="2125380426" unbViolId="699e9ce9-528f-3cf8-a2f1-0dd9846fbe7f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afbd45d2-d6a8-35cf-8e12-fff4472305a1" locEndPos="5" locType="sr" hash="-311568100" locEndLn="11" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="12" locFile="/Timer/timer.h" locStartln="12" sev="2" auth="syoung" locRef="7" rule="MISRA2008-18_0_4_c" lnHash="1676941809" rule.header="The types defined in the library &lt;ctime> shall not be used" tool="c++test" lineHash="1676941809" unbViolId="6fed07d9-e761-30b0-96cb-c641a871effd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e3ad47-8f0e-352d-b7da-2349a2f6f951" locEndPos="5" locType="sr" hash="-311568100" locEndLn="12" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="21" locFile="/Timer/timer.h" locStartln="21" sev="4" auth="syoung" locRef="7" rule="MISRA2008-3_9_2" lnHash="1408320612" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1408320612" unbViolId="82ab9ab2-fcff-3810-a014-b0efb7b6a249" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cd7c304-5b40-3ff2-ad01-8d6eda7163b1" locEndPos="1" locType="sr" urgent="true" hash="-311568100" locEndLn="21" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/Timer/timer.h" locStartln="27" sev="4" auth="syoung" locRef="7" rule="MISRA2008-3_9_2" lnHash="1493922828" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1493922828" unbViolId="81ee642b-862f-30f7-89d4-df5620bcedcb" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78fe320e-1810-386b-97bb-ef454b277b23" locEndPos="26" locType="sr" urgent="true" hash="-311568100" locEndLn="27" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/Timer/timer.h" locStartln="30" sev="4" auth="syoung" locRef="7" rule="MISRA2008-3_9_2" lnHash="-70128892" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-70128892" unbViolId="6998b369-4b64-3531-b0fe-9f0f30d127fc" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94cd0e08-d020-3400-a056-febf49f69bf0" locEndPos="26" locType="sr" urgent="true" hash="-311568100" locEndLn="30" goals="1,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="30" locFile="/Timer/timer.h" locStartln="30" sev="4" auth="syoung" locRef="7" rule="MISRA2008-3_9_2" lnHash="-70128892" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-70128892" unbViolId="25342479-8f5b-37a3-b93e-1985d312116f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c30faa0e-ff99-34b2-8657-90916841fd8b" locEndPos="31" locType="sr" urgent="true" hash="-311568100" locEndLn="30" goals="1,"/>
    <StdViol msg="Reserved name '_input_h_' used" ln="3" locFile="/Timer/inout.h" locStartln="3" sev="2" auth="syoung" locRef="8" rule="MISRA2008-17_0_2" lnHash="554854633" rule.header="The names of standard library macros and objects shall not be reused" tool="c++test" lineHash="554854633" unbViolId="89b9a63c-d09d-35c9-a4b9-b8e1021a6f7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46908fed-a8ed-3c29-9ed4-7f3f363432d1" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use reserved identifiers : _input_h_" ln="3" locFile="/Timer/inout.h" locStartln="3" sev="2" auth="syoung" locRef="8" rule="MISRA2008-17_0_1_a" lnHash="554854633" rule.header="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" tool="c++test" lineHash="554854633" unbViolId="e50cdc43-5173-3427-8bb4-0f3fd6a9e718" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37835770-66ab-3231-ab86-bc6323d327d7" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="3" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="6" locFile="/Timer/inout.h" locStartln="6" sev="4" auth="syoung" locRef="8" rule="MISRA2008-3_9_2" lnHash="-155000900" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-155000900" unbViolId="91ed09ba-9df9-3153-8c8e-45f2886e2789" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dae5166d-ebbe-3f89-b4fd-57fe6b2e6bf3" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="6" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/Timer/inout.h" locStartln="9" sev="4" auth="syoung" locRef="8" rule="MISRA2008-3_9_2" lnHash="-1729353454" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1729353454" unbViolId="a0575246-b16d-31d5-b569-5bc15df26334" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8f67ac7-8c33-3eb9-8602-eb68c4c0770c" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="9" goals="1,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="9" locFile="/Timer/inout.h" locStartln="9" sev="4" auth="syoung" locRef="8" rule="MISRA2008-3_9_2" lnHash="-1729353454" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1729353454" unbViolId="6e784584-ea97-3b13-8a32-293f9a261b81" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a931c63-d6e2-3be9-b4db-98fe586101f7" locEndPos="18" locType="sr" urgent="true" hash="-311681184" locEndLn="9" goals="1,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="12" locFile="/Timer/inout.h" locStartln="12" sev="4" auth="syoung" locRef="8" rule="MISRA2008-3_9_2" lnHash="-1128300596" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1128300596" unbViolId="e7b595a8-a3fb-3325-92da-87bd1da28fdd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86032c90-c7bf-37b7-8cbc-1da074c21dd9" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="12" goals="1,"/>
    <StdViol msg="The 'print_string_array' function has no definition" ln="12" locFile="/Timer/inout.h" locStartln="12" sev="2" auth="syoung" locRef="8" rule="MISRA2008-3_2_4_b" lnHash="-1128300596" rule.header="An identifier with external linkage shall have exactly one external definition" tool="c++test" lineHash="-1128300596" unbViolId="9242db84-7300-3186-8d84-98463fc8ab78" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="47656b53-3cfb-3455-ad1c-fa1d497a97e3" locEndPos="5" locType="sr" hash="-311681184" locEndLn="12" goals="0,"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="163">
            <Project id="Timer" name="Timer" supp="0" total="163">
               <Res loc="/Timer/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="15"/>
               <Res loc="/Timer/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="27"/>
               <Res loc="/Timer/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="78"/>
               <Res loc="/Timer/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="19"/>
               <Res loc="/Timer/clock.h" locRef="5" locType="sr" name="clock.h" supp="0" total="4"/>
               <Res loc="/Timer/consts.h" locRef="6" locType="sr" name="consts.h" supp="0" total="4"/>
               <Res loc="/Timer/timer.h" locRef="7" locType="sr" name="timer.h" supp="0" total="9"/>
               <Res loc="/Timer/inout.h" locRef="8" locType="sr" name="inout.h" supp="0" total="7"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>