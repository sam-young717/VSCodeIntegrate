<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="MISRA C 2023-2025-06-16" climode="true" endTime="2025-06-16T12:27:32-04:00" execEnv="linux_x86_64" hasViols="true" id="1748722656530" lang="en" machine="syoung-pc" prjModule="VSCodeIntegrate" project="MISRA C 2023" tag="${scontrol_branch}-linux_x86_64" time="2025-06-16T12:27:10-04:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="Recommended Rules" pseudoUrl="builtin://Recommended Rules" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="3">
      
      <History>
         <Graph id="gls">
            <Categories>
               <Category color="red" name="Total" pos="0"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Tasks" yTitle2="Total Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,</X>
               <Y>50,50,50,50,50,50,50,50,50,50,50,50,50,3,</Y>
               <Delta>-47,</Delta>
            </Total>
         </Graph>
      </History>
   
   </Goals>
   <Metrics>
      <Metric avg="1.933" disp="true" id="METRIC.CC" max="8" min="1" name="McCabe Cyclomatic Complexity" noi="15" stddev="1.731">
         <Info avg="1.933" disp="true" elem="VSCodeIntegrate" max="8" min="1" noi="15" stddev="1.731"/>
      </Metric>
      <Metric avg="0.667" disp="true" id="METRIC.NBD" max="3" min="0" name="Nested Blocks Depth" noi="15" stddev="0.869">
         <Info avg="0.667" disp="true" elem="VSCodeIntegrate" max="3" min="0" noi="15" stddev="0.869"/>
      </Metric>
      <Metric avg="48.625" disp="true" id="METRIC.NOPLIF" max="155" min="9" name="Physical Lines in Files" noi="8" stddev="45.483">
         <Info avg="48.625" disp="true" elem="VSCodeIntegrate" max="155" min="9" noi="8" stddev="45.483"/>
      </Metric>
      <Metric avg="13.8" disp="true" id="METRIC.NOSLIM" max="33" min="4" name="Source Lines in Methods" noi="15" stddev="8.076">
         <Info avg="13.8" disp="true" elem="VSCodeIntegrate" max="33" min="4" noi="15" stddev="8.076"/>
      </Metric>
   </Metrics>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="1931614703" locRef="1" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.c" totLns="29" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="driver.c" totLns="76" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/driver.c"/>
         <Loc auth="syoung" hash="-275311578" locRef="3" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.c" totLns="155" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="stdinout.c" totLns="55" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/stdinout.c"/>
         <Loc auth="syoung" hash="1651539479" locRef="5" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="consts.h" totLns="9" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/consts.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="6" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="inout.h" totLns="15" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/inout.h"/>
         <Loc auth="syoung" hash="-1204881763" locRef="7" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.h" totLns="14" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="8" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.h" totLns="36" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:15">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="389" id="VSCodeIntegrate" name="VSCodeIntegrate" qfixErrs="0" suppErrs="0" totErrs="3" totFiles="8" totLns="389"/>
      </Projects>
      
      <History>
         <Graph id="lns">
            <Categories>
               <Category color="blue" name="Total Lines" pos="0"/>
               <Category color="green" name="Checked Lines" pos="1"/>
               <Category authPos="0" color="red" name="Tasks" pos="2"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Lines" yTitle2="Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,</X>
               <Y>390,390,390,390,390,390,390,390,390,390,390,389,389,389,390,390,390,390,390,390,390,390,390,390,390,389,389,389,167,167,167,167,167,203,203,203,203,203,207,207,207,3,</Y>
               <Delta>0,0,-204,</Delta>
            </Total>
            <Authors title="" xTitle="Date" yTitle="Total Tasks">
               <Author name="syoung">
                  <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,</X>
                  <Y>167,167,167,167,167,203,203,203,203,203,207,207,207,3,</Y>
                  <Delta>-204,</Delta>
               </Author>
            </Authors>
         </Graph>
      </History>
   
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="137" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0"/>
               <Category authTot="3;" authUrg="3;" desc="Possible Bugs" name="BD-PB" rules="74" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="21" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Code Duplication Detection" name="CDD" rules="4" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Coding Conventions" name="CODSTA" rules="559" total="0">
               <Category authTot="0;" authUrg="0;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="135" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="27" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Initialization" name="INIT" rules="25" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Metric" name="METRIC" rules="50" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="224" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="67" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="63" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Optimization" name="OPT" rules="54" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="PB" rules="90" total="0"/>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid signed integer overflows" id="BD-PB-INTUB" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Atomic objects shall be properly initialized before being accessed" id="BD-PB-NOTINITAT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing collections out of bounds" id="BD-PB-COOB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="The Standard Library function mtx_timedlock() shall not be invoked on a mutex that does not support timeout" id="BD-TRS-TIMEDLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" authTot="0;" authUrg="0;" cat="METRIC" desc="McCabe Cyclomatic Complexity" id="METRIC.CC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" authTot="0;" authUrg="0;" cat="METRIC" desc="Nested Blocks Depth" id="METRIC.NBD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="1;" authUrg="1;" id="1" total="1"/>
            <Severity authTot="2;" authUrg="2;" id="2" total="2"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78414068" lang="cpp" violId="34f38e35-6273-3779-9e13-186f7b10e510" locEndPos="0" urgent="true" locEndLn="50" goals="1," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="15ce1419-d334-347e-aa17-0bfcb9be4226" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/VSCodeIntegrate/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/VSCodeIntegrate/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/VSCodeIntegrate/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/VSCodeIntegrate/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/VSCodeIntegrate/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="BD-PB-ARRAY" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="c430969e-a4da-38b8-a64e-5e99b32c8a69" locEndPos="0" urgent="true" locEndLn="117" goals="1," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="ef4d9488-7f65-3c1f-a42e-951c03727a3c" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/VSCodeIntegrate/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/VSCodeIntegrate/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="e2f308bf-5209-32db-8bc6-a64a2044c9e4" locEndPos="0" urgent="true" locEndLn="137" goals="1," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="5874f93a-84ea-3040-8f96-8edd1e5393dc" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/VSCodeIntegrate/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/VSCodeIntegrate/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/VSCodeIntegrate/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="3">
            <Project id="VSCodeIntegrate" name="VSCodeIntegrate" supp="0" total="3">
               <Res loc="/VSCodeIntegrate/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="3"/>
               <Res loc="/VSCodeIntegrate/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/consts.h" locRef="5" locType="sr" name="consts.h" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/inout.h" locRef="6" locType="sr" name="inout.h" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/clock.h" locRef="7" locType="sr" name="clock.h" supp="0" total="0"/>
               <Res loc="/VSCodeIntegrate/timer.h" locRef="8" locType="sr" name="timer.h" supp="0" total="0"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>