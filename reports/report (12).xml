<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="2025-02-18" climode="true" endTime="2025-02-18T10:56:58-05:00" execEnv="linux_x86_64" hasViols="true" id="1738525622159" lang="en" machine="syoung-pc" prjModule="Timer" project="" tag="${scontrol_branch}-linux_x86_64" time="2025-02-18T10:56:37-05:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="MISRA C 2023 (MISRA C 2012)" pseudoUrl="builtin://MISRA C 2023 (MISRA C 2012)" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
      <History>
         <Graph id="gls">
            <Categories>
               <Category color="red" name="Total" pos="0"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Tasks" yTitle2="Total Tasks">
               <X>02-10-25,02-11-25,02-12-25,02-13-25,02-17-25,02-18-25,</X>
               <Y>50,8,8,1,50,50,</Y>
               <Delta>0,</Delta>
            </Total>
         </Graph>
      </History>
   
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="632037963" locRef="1" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.c" totLns="30" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="Timer" projPath="/Timer" project="Timer" resProjPath="driver.c" totLns="76" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/driver.c"/>
         <Loc auth="syoung" hash="1500438919" locRef="3" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.c" totLns="155" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="Timer" projPath="/Timer" project="Timer" resProjPath="stdinout.c" totLns="55" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/stdinout.c"/>
         <Loc auth="syoung" hash="1651539479" locRef="5" projId="Timer" projPath="/Timer" project="Timer" resProjPath="consts.h" totLns="9" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/consts.h"/>
         <Loc auth="syoung" hash="-1204881763" locRef="6" projId="Timer" projPath="/Timer" project="Timer" resProjPath="clock.h" totLns="14" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/clock.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="7" projId="Timer" projPath="/Timer" project="Timer" resProjPath="inout.h" totLns="15" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/inout.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="8" projId="Timer" projPath="/Timer" project="Timer" resProjPath="timer.h" totLns="36" uri="file:/mnt/c/Users/syoung/Documents/CppTestLinux/cpptest/examples/Timer/timer.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:17">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="390" id="Timer" name="Timer" qfixErrs="0" suppErrs="0" totErrs="202" totFiles="8" totLns="390"/>
      </Projects>
      
      <History>
         <Graph id="lns">
            <Categories>
               <Category color="blue" name="Total Lines" pos="0"/>
               <Category color="green" name="Checked Lines" pos="1"/>
               <Category authPos="0" color="red" name="Tasks" pos="2"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Lines" yTitle2="Tasks">
               <X>02-10-25,02-11-25,02-12-25,02-13-25,02-17-25,02-18-25,</X>
               <Y>390,390,390,390,390,390,390,390,390,390,390,390,95,8,8,1,96,202,</Y>
               <Delta>0,0,106,</Delta>
            </Total>
            <Authors title="" xTitle="Date" yTitle="Total Tasks">
               <Author name="syoung">
                  <X>02-10-25,02-11-25,02-12-25,02-13-25,02-17-25,02-18-25,</X>
                  <Y>95,8,8,1,96,202,</Y>
                  <Delta>106,</Delta>
               </Author>
            </Authors>
         </Graph>
      </History>
   
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2023 (MISRA C 2012)" name="MISRAC2012" rules="382" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="2" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0"/>
               <Category authTot="6;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="6"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.15 (Required) Evaluation of floating-point expressions shall not lead to the undetected generation of infinities and NaNs" name="MISRAC2012-DIR_4_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.3 (Required) There shall be no dynamic thread creation" name="MISRAC2012-DIR_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.2 (Required) There shall be no deadlocks between threads" name="MISRAC2012-DIR_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.1 (Required) There shall be no data races between threads" name="MISRAC2012-DIR_5_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.10 (Required) The _Atomic qualifier shall not be applied to the incomplete type void" name="MISRAC2012-RULE_11_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0"/>
               <Category authTot="22;" authUrg="7;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a Standard Library function" name="MISRAC2012-RULE_22_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.6 (Required) The small integer variants of the minimum-width integer constant macros shall not be used" name="MISRAC2012-RULE_7_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0"/>
               <Category authTot="26;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="26"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.5 (Mandatory) The argument of an integer-constant macro shall have an appropriate form" name="MISRAC2012-RULE_7_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length arrays shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.9 (Required) An object with temporary lifetime shall not undergo array-to-pointer conversion" name="MISRAC2012-RULE_18_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0"/>
               <Category authTot="3;" authUrg="2;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="3"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.25 (Required) All memory synchronization operations shall be executed in sequentially consistent order" name="MISRAC2012-RULE_21_25" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" name="MISRAC2012-RULE_13_2" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.24 (Required) The random number generator functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_24" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.23 (Required) All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" name="MISRAC2012-RULE_21_23" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.22 (Mandatory) All arguments to any type-generic macros declared in &lt;tgmath.h> shall have appropriate essential type" name="MISRAC2012-RULE_21_22" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.10 (Mandatory) Pointers to variably-modified array types shall not be used" name="MISRAC2012-RULE_18_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.26 (Required) The Standard Library function mtx_timedlock() shall only be invoked on mutex objects of appropriate mutex type" name="MISRAC2012-RULE_21_26" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.2 (Required) A project shall not contain dead code" name="MISRAC2012-RULE_2_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 2.7 (Advisory) A function should not contain unused parameters" name="MISRAC2012-RULE_2_7" rules="1" total="1"/>
               <Category authTot="4;" authUrg="0;" desc="Rule 2.8 (Advisory) A project should not contain unused object definitions" name="MISRAC2012-RULE_2_8" rules="3" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.15 (Required) Thread synchronization objects and thread-specific storage pointers shall not be destroyed until after all threads accessing them have terminated" name="MISRAC2012-RULE_22_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.14 (Mandatory) Thread synchronization objects shall be initialized before being accessed" name="MISRAC2012-RULE_22_14" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.13 (Required) Thread objects, thread synchronization objects and thread-specific storage pointers shall have appropriate storage duration" name="MISRAC2012-RULE_22_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.12 (Mandatory) Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" name="MISRAC2012-RULE_22_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.6 (Required) Structure and union members of atomic objects shall not be directly accessed" name="MISRAC2012-RULE_12_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.11 (Required) A thread that was previously either joined or detached shall not be subsequently joined nor detached" name="MISRAC2012-RULE_22_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6 (Required) An initializer using chained designators shall not contain initializers without designators" name="MISRAC2012-RULE_9_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.7 (Mandatory) Atomic objects shall be appropriately initialized before being accessed" name="MISRAC2012-RULE_9_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.19 (Required) A condition variable shall be associated with at most one mutex object" name="MISRAC2012-RULE_22_19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.18 (Required) Non-recursive mutexes shall not be recursively locked" name="MISRAC2012-RULE_22_18" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.17 (Required) No thread shall unlock a mutex or call cnd_wait() or cnd_timedwait() for a mutex it has not locked before" name="MISRAC2012-RULE_22_17" rules="1" total="0"/>
               <Category authTot="22;" authUrg="5;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.16 (Required) All mutex objects locked by a thread shall be explicitly unlocked by the same thread" name="MISRAC2012-RULE_22_16" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="12" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.15 (Required) All declarations of an object with an explicit alignment specification shall specify the same alignment" name="MISRAC2012-RULE_8_15" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="5" total="0"/>
               <Category authTot="17;" authUrg="6;" desc="Rule 1.5 (Required) Obsolescent language features shall not be used" name="MISRAC2012-RULE_1_5" rules="7" total="17"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.16 (Advisory) The alignment specification of zero should not appear in an object declaration" name="MISRAC2012-RULE_8_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.17 (Advisory) At most one explicit alignment specifier should appear in an object declaration" name="MISRAC2012-RULE_8_17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.10 (Required) A function declared with a _Noreturn function specifier shall have void return type" name="MISRAC2012-RULE_17_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.2 (Required) A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" name="MISRAC2012-RULE_23_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.11 (Advisory) A function that never returns should be declared with a _Noreturn function specifier" name="MISRAC2012-RULE_17_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.3 (Advisory) A generic selection should contain at least one non-default association" name="MISRAC2012-RULE_23_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.12 (Advisory) A function identifier should only be used with either a preceding &amp;, or with a parenthesised parameter list" name="MISRAC2012-RULE_17_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.4 (Required) A generic association shall list an appropriate type" name="MISRAC2012-RULE_23_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.13 (Required) A function type shall not be type qualified" name="MISRAC2012-RULE_17_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.5 (Advisory) A generic selection should not depend on implicit pointer type conversion" name="MISRAC2012-RULE_23_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.6 (Required) The controlling expression of a generic selection shall have an essential type that matches its standard type" name="MISRAC2012-RULE_23_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.7 (Advisory) A generic selection that is expanded from a macro should evaluate its argument only once" name="MISRAC2012-RULE_23_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.20 (Mandatory) Thread-specific storage pointers shall be created before being accessed" name="MISRAC2012-RULE_22_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.8 (Required) A default association shall appear as either the first or the last association of a generic selection" name="MISRAC2012-RULE_23_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.1 (Advisory) A generic selection should only be expanded from a macro" name="MISRAC2012-RULE_23_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="1" total="0"/>
               <Category authTot="19;" authUrg="9;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="3" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0"/>
               <Category authTot="15;" authUrg="9;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="15"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0"/>
               <Category authTot="35;" authUrg="2;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="35"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.9 (Mandatory) A function declared with a _Noreturn function specifier shall not return to its caller" name="MISRAC2012-RULE_17_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.3 (Required) A bit field shall not be declared as a member of a union" name="MISRAC2012-RULE_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid signed integer overflows" id="MISRAC2012-DIR_4_1-l" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid data loss when converting between integer types" id="MISRAC2012-DIR_4_1-m" origId="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid potential integer overflow/underflow on tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_15" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRAC2012-DIR_4_15-a" origId="BD-PB-NANINF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot; using Doxygen comments" id="MISRAC2012-DIR_4_4-b" origId="MISRA2004-2_4_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="5;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="Do not use global variable with different locks set" id="MISRAC2012-DIR_5_1-a" origId="BD-TRS-MLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="Variable should be used in context of single critical section" id="MISRAC2012-DIR_5_1-b" origId="BD-TRS-DIFCS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="There shall be no data races between threads" id="MISRAC2012-DIR_5_1-c" origId="BD-TRS-THRDR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_2" desc="Do not acquire locks in different order" id="MISRAC2012-DIR_5_2-a" origId="BD-TRS-ORDER" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_3" desc="A thread should not be created by another thread" id="MISRAC2012-DIR_5_3-a" origId="BD-TRS-THRTHR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRAC2012-RULE_10_1-h" origId="CODSTA-225" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_10" desc="The '_Atomic' qualifier should not be used with the 'void' type" id="MISRAC2012-RULE_11_10-a" origId="CODSTA-MC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRAC2012-RULE_11_8-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRAC2012-RULE_12_1-a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="Avoid incorrect shift operations" id="MISRAC2012-RULE_12_2-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the essential or underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-b" origId="CODSTA-302" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_6" desc="Members of atomic objects of structure and union types should not be directly accessed" id="MISRAC2012-RULE_12_6-a" origId="CODSTA-MC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression with atomic type should be independent from thread interleaving" id="MISRAC2012-RULE_13_2-h" origId="CODSTA-MC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of an assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The standard header file &lt;stdarg.h> or &lt;cstdarg> shall not be used" id="MISRAC2012-RULE_17_1-c" origId="CODSTA-136_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_10" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="MISRAC2012-RULE_17_10-a" origId="CODSTA-204" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_11" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="MISRAC2012-RULE_17_11-a" origId="BD-PB-NORETDECL" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_12" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRAC2012-RULE_17_12-a" origId="MISRA2004-16_9" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_13" desc="Do not include any type qualifiers in the specification of a function type" id="MISRAC2012-RULE_17_13-a" origId="CODSTA-221" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="9;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="2;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="35"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_9" desc="Never return from functions that should not return" id="MISRAC2012-RULE_17_9-a" origId="BD-PB-NORETURN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_10" desc="Pointers to variably-modified array types should not be used" id="MISRAC2012-RULE_18_10-a" origId="CODSTA-112_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with thread storage duration shall not be assigned to an object with static storage duration" id="MISRAC2012-RULE_18_6-c" origId="CODSTA-231" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length arrays should not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_9" desc="Do not modify objects with temporary lifetime" id="MISRAC2012-RULE_18_9-a" origId="CODSTA-196" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_1_5-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="MISRAC2012-RULE_1_5-b" origId="CODSTA-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="6;" cat="MISRAC2012-RULE_1_5" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_1_5-c" origId="CODSTA-159" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the macro ATOMIC_VAR_INIT" id="MISRAC2012-RULE_1_5-d" origId="CODSTA-209_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the 'bool', 'false' or 'true' identifiers in the #undef directive" id="MISRAC2012-RULE_1_5-e" origId="PREPROC-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the ungetc function on a stream with the file position indicator zero" id="MISRAC2012-RULE_1_5-f" origId="BD-PB-UNGETC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not pass 0 value as a size argument to the realloc function" id="MISRAC2012-RULE_1_5-g" origId="BD-API-REALLOC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" origId="MISRA2004-20_12" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="2;" cat="MISRAC2012-RULE_21_10" desc="The time handling functions and macros of the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-b" origId="MISRA2004-20_12_b" sev="2" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="5;" cat="MISRAC2012-RULE_21_10" desc="The types defined in the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-c" origId="MISRA2004-20_12_c" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The standard header file &lt;fenv.h> shall not be used" id="MISRAC2012-RULE_21_12-b" origId="CODSTA-109_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_22" desc="All arguments to any type-generic macros declared in &lt;tgmath.h> shall have appropriate essential type" id="MISRAC2012-RULE_21_22-a" origId="CODSTA-108_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_23" desc="All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" id="MISRAC2012-RULE_21_23-a" origId="CODSTA-108_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_24" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="MISRAC2012-RULE_21_24-a" origId="SECURITY-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_25" desc="Only 'memory_order_seq_cst' should be used as an explicit memory order argument" id="MISRAC2012-RULE_21_25-a" origId="CODSTA-MC-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_26" desc="The Standard Library function mtx_timedlock() shall not be invoked on a mutex that does not support timeout" id="MISRAC2012-RULE_21_26-a" origId="BD-TRS-TIMEDLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="MISRAC2012-RULE_21_6" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_11" desc="Do not join or detach a thread that was previously joined or detached" id="MISRAC2012-RULE_22_11-a" origId="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_12" desc="Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" id="MISRAC2012-RULE_22_12-a" origId="CODSTA-MC-22" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_13" desc="Thread objects, thread synchronization objects and thread-specific storage pointers shall not have automatic storage duration" id="MISRAC2012-RULE_22_13-a" origId="CODSTA-MC-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_14" desc="A thread synchronization object should not be initialized by a thread" id="MISRAC2012-RULE_22_14-a" origId="BD-TRS-THRINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_14" desc="The second argument passed to the 'mtx_init()' function call should be either 'mtx_plain', 'mtx_timed', 'mtx_plain | mtx_recursive', or 'mtx_timed | mtx_recursive'" id="MISRAC2012-RULE_22_14-b" origId="CODSTA-MC-21" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_15" desc="A thread synchronization object should not be destroyed by a thread" id="MISRAC2012-RULE_22_15-a" origId="BD-TRS-THRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_16" desc="Do not abandon unreleased locks" id="MISRAC2012-RULE_22_16-a" origId="BD-TRS-LOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_17" desc="Do not release a lock that has not been acquired" id="MISRAC2012-RULE_22_17-a" origId="BD-TRS-REVLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_18" desc="Avoid double locking" id="MISRAC2012-RULE_22_18-a" origId="BD-TRS-DLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_19" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="MISRAC2012-RULE_22_19-a" origId="GLOBAL-CONDMUTEXVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_20" desc="A thread-specific storage should not be created by a thread" id="MISRAC2012-RULE_22_20-a" origId="BD-TRS-THRTSS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_1" desc="A generic selection should only be expanded from a macro" id="MISRAC2012-RULE_23_1-a" origId="CODSTA-MC-08" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_1" desc="A generic selection used in a macro definition should have a macro parameter in the controlling expression" id="MISRAC2012-RULE_23_1-b" origId="CODSTA-MC-10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_2" desc="A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" id="MISRAC2012-RULE_23_2-a" origId="CODSTA-MC-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_3" desc="A generic selection shall indicate at least one non-default association" id="MISRAC2012-RULE_23_3-a" origId="CODSTA-MC-07" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_4" desc="A generic association shall list an appropriate type" id="MISRAC2012-RULE_23_4-a" origId="CODSTA-MC-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_5" desc="A generic selection should not depend on implicit pointer type conversion" id="MISRAC2012-RULE_23_5-a" origId="CODSTA-MC-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_6" desc="The controlling expression of a generic selection shall have an essential type that matches its standard type" id="MISRAC2012-RULE_23_6-a" origId="CODSTA-MC-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_6" desc="Enumerated types should not be mixed with integer types in generic selections" id="MISRAC2012-RULE_23_6-b" origId="CODSTA-MC-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_7" desc="A generic selection that is expanded from a macro shall evaluate its argument only once" id="MISRAC2012-RULE_23_7-a" origId="CODSTA-MC-15" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_8" desc="The default association shall be placed first or last in the association list" id="MISRAC2012-RULE_23_8-a" origId="CODSTA-MC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="Avoid unreachable methods" id="MISRAC2012-RULE_2_1-h" origId="BD-PB-UCMETH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with external linkage" id="MISRAC2012-RULE_2_8-a" origId="GLOBAL-UNUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with internal linkage" id="MISRAC2012-RULE_2_8-b" origId="OPT-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused local variables" id="MISRAC2012-RULE_2_8-c" origId="OPT-02" sev="4" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6-a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7-a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-b" origId="GLOBAL-REUSEDEXTFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define objects with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define functions with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_3" desc="A member of a union shall not be declared as a bit-field" id="MISRAC2012-RULE_6_3-a" origId="CODSTA-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="26"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_5" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="MISRAC2012-RULE_7_5-a" origId="CODSTA-220" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_6" desc="The small integer variants of the minimum-width integer constant macros should not be used" id="MISRAC2012-RULE_7_6-a" origId="CODSTA-220_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with external linkage shall be the same" id="MISRAC2012-RULE_8_15-a" origId="GLOBAL-ALIGNDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with internal linkage shall be the same" id="MISRAC2012-RULE_8_15-b" origId="CODSTA-MC-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_16" desc="The zero-alignment specifier should not be used in an object declaration" id="MISRAC2012-RULE_8_16-a" origId="CODSTA-MC-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_17" desc="A declaration of an object should contain at most one explicit alignment specifier" id="MISRAC2012-RULE_8_17-a" origId="CODSTA-MC-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="2;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="5;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have no more then one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have external definition" id="MISRAC2012-RULE_8_6-b" origId="GLOBAL-NOEXTERNDEF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="6;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_6" desc="An initializer using chained designators shall not contain initializers without designators" id="MISRAC2012-RULE_9_6-a" origId="PB-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_7" desc="Atomic objects shall be properly initialized before being accessed" id="MISRAC2012-RULE_9_7-a" origId="BD-PB-NOTINITAT" sev="1" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="15;" authUrg="9;" id="1" total="15"/>
            <Severity authTot="147;" authUrg="34;" id="2" total="147"/>
            <Severity authTot="40;" authUrg="7;" id="4" total="40"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53846406-d628-363d-9735-881d1f75d6a0" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="1" tool="c++test" lineHash="-523314505" unbViolId="7e2abc37-64cc-35a5-b6f8-a8aec190ae93" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d36ebdcb-8220-3c55-acc5-ccefd7e7ac4a" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="1" tool="c++test" lineHash="-523314505" unbViolId="ceb7399a-8747-3b82-9777-af49fcce23cc" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="16" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-1564703446" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1aa9c69f-2b85-3cd1-a180-c103d619c531" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="16" goals="1," locStartln="16" sev="2" locRef="1" tool="c++test" lineHash="-1564703446" unbViolId="6fb90129-6032-3046-96a7-23f74c939e3f" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="16" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-b" lnHash="-1564703446" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48fa5c32-3486-3b7f-89c5-8a81eecd13b0" locEndPos="23" urgent="true" prio="Not Defined" locEndLn="16" goals="1," locStartln="16" sev="2" locRef="1" tool="c++test" lineHash="-1564703446" unbViolId="81112dcf-0ae3-31ab-8045-1c32db498828" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Usage of 'ctime' function is not allowed" ln="17" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-b" lnHash="-237631284" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30e2fcbc-5241-3397-8137-aaf5e3283d3d" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="17" goals="1," locStartln="17" sev="2" locRef="1" tool="c++test" lineHash="-237631284" unbViolId="1c27b6d5-feec-3a01-903a-4c12ce38aacb" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="The 'sprintf' library function should not be used" ln="19" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_6-a" lnHash="369521280" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abedd13e-7122-31cf-b03b-832116286a25" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="19" goals="1," locStartln="19" sev="2" locRef="1" tool="c++test" lineHash="369521280" unbViolId="90812fdf-92b1-30b0-9f66-c36fc76d1757" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_17_7-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6accbbac-0006-351e-8edb-f6ad07b1feea" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="19" goals="1," locStartln="19" sev="2" locRef="1" tool="c++test" lineHash="369521280" unbViolId="42f3311f-23a0-3dd8-954f-8b4f22bf33a3" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_17_7-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24b5573d-1f45-3601-ad7f-83f35cdd88e4" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="20" goals="1," locStartln="20" sev="2" locRef="1" tool="c++test" lineHash="-1350296736" unbViolId="accfa73a-45d3-3958-a764-39beff6c7eef" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="27" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-1989025327" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1cefd16-4ca4-34d7-a2e2-36bcc3d9fb5d" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="27" goals="1," locStartln="27" sev="2" locRef="1" tool="c++test" lineHash="-1989025327" unbViolId="088b2968-9437-304f-b5ae-5ca46082179f" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="Parameter 'new_time' is not used in function 'set_time'" ln="27" locFile="/Timer/clock.c" auth="syoung" rule="MISRAC2012-RULE_2_7-a" lnHash="-1989025327" rule.header="There should be no unused parameters in functions" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfb22ff3-f2d8-3115-b5f5-ed44e8e15193" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="27" goals="1," locStartln="27" sev="4" locRef="1" tool="c++test" lineHash="-1989025327" unbViolId="722883e8-75c4-35d4-8be4-e4500274f143" risk="Undefined" locType="sr" hash="632037963"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="909ad7af-d206-39b5-8465-a546a946a603" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="4" locRef="2" tool="c++test" lineHash="-1050535651" unbViolId="ef759b65-7df9-397f-a298-39b645724712" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="-1050535651" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17d3eff8-a63f-34b0-88e0-7d5c8eb306e8" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="2" tool="c++test" lineHash="-1050535651" unbViolId="2dedc8c2-4dfb-3eed-bd22-a7eda7ac9441" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b35d49e7-b43f-3052-9c72-3d627297ea5a" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="2" tool="c++test" lineHash="-1050535651" unbViolId="d4a2e504-250e-3f88-86e1-e4dd427060b7" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76e8a9f4-6329-3d36-ad95-f0aacad440d8" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="2" tool="c++test" lineHash="-1050535651" unbViolId="6126e5c6-1c36-32fd-b2aa-95bfe70318e8" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="The function 'print_menu_get_action' is referenced only in the translation unit where it is defined" ln="13" locFile="/Timer/driver.c" locStartln="13" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="-1050535651" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="-1050535651" unbViolId="89410c37-5f62-34b9-85a2-4a627341f875" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="09ddc82a-8104-3cbe-b730-1963d2781a3e" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="13" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/Timer/driver.c" locStartln="15" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="fbf04c05-e500-3139-95eb-f6a7ec4da6af" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a204dba2-d1bc-39b6-a6a1-2e93abc13459" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="15" goals="0,"/>
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/Timer/driver.c" locStartln="15" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="908eade4-5dfb-3fc3-9233-5df6b9b69cc1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="911d5d80-6145-32e0-ad5a-070b0437a9b7" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="15" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/Timer/driver.c" locStartln="16" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="627df30c-b42b-30e2-ab25-5705293787dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f531e8e4-37e2-3e9d-b87d-e7f39122c364" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="16" goals="0,"/>
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/Timer/driver.c" locStartln="16" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="5c456de3-18b5-3027-b182-dc588a16f496" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b241cf1e-b96b-36ff-b312-e3fe35d01161" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="16" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/Timer/driver.c" locStartln="17" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="3f57d398-637f-3af1-bcc7-556d8512404f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="284e022e-3bba-3c78-8c37-f2659a4397dc" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="17" goals="0,"/>
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/Timer/driver.c" locStartln="17" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="d79678f8-64e3-31d3-823c-902f5982952b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="53ee8bb4-8ac2-3ddd-bd22-7257640248c8" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="17" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/Timer/driver.c" locStartln="18" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="8693b376-bddf-3d73-8cc0-0c389c8771dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c6cfb630-0db5-3f51-bcc7-d86f9c2f146b" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="18" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/Timer/driver.c" locStartln="18" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="1787e8b8-6613-37b3-99f2-f216af59f961" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1f7e0002-b185-30c9-a8c1-62f5c690e8f1" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="18" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/Timer/driver.c" locStartln="19" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="3575172c-8e7a-3d7f-b7ad-51e7147b145e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="9796fc3e-c087-371a-b124-6d0ca086604c" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="19" goals="0,"/>
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/Timer/driver.c" locStartln="19" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="a5e7dfe9-533a-3554-a85b-507978e32317" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7b2fdde1-dc26-34d7-ae1b-73bce970912e" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="19" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/Timer/driver.c" locStartln="20" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="a07bca27-e0c8-3dea-a1e6-f441b20176da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5be15e3b-32b4-3fb0-a75e-7523919eee22" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="20" goals="0,"/>
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/Timer/driver.c" locStartln="20" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="fbd77f84-bfd2-33c6-a6b4-07d91a068ecc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="21349828-a2e5-330c-8dc5-4774cd3ef324" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="20" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/Timer/driver.c" locStartln="21" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="f4a6228c-5b90-3e47-b532-fc941698481d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ee976866-1c34-3796-874b-9897d8fa3ee9" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="21" goals="0,"/>
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/Timer/driver.c" locStartln="21" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="821c19b9-a941-3b63-901f-7f00d043ebd9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="de6fd464-01a5-3265-a3bb-6c7790537b63" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="21" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/Timer/driver.c" locStartln="22" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="dff216d0-7d24-320c-b5d6-c4ec686da8df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3f0f3a6a-f93e-3ed1-a9cd-606a1152e390" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="22" goals="0,"/>
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/Timer/driver.c" locStartln="22" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="5555092f-8f29-3725-aff7-c31f714ab276" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4224ee53-e360-3166-8e5e-6eb8d8265e88" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="22" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/Timer/driver.c" locStartln="23" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="0b3ca104-f482-3e49-bbb6-6866f91de363" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b5fed4d0-cdd8-3014-ba9f-fe6c548a2bf2" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="23" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/Timer/driver.c" locStartln="23" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="3537662b-a8dc-39e5-b38f-6abd5f0b4a75" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4812dec8-9717-3680-9850-b5ce726d9401" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="23" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/Timer/driver.c" locStartln="24" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="2f7266d1-b2e2-32fc-b9da-ddeefdba98cd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2efcfa9a-7046-3ccc-be62-b55f6c54cc4e" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="24" goals="0,"/>
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/Timer/driver.c" locStartln="24" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="d5445ca9-75cd-3bc7-9d0b-c24925099a6a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c645478a-a773-375e-8dd1-d6ed3062c768" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="24" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/Timer/driver.c" locStartln="25" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="9e34c6e4-c56c-3f2d-aa7e-f9d60b1d3974" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e903ad4e-9fd7-35cd-9c1e-866621492d9d" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="25" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/Timer/driver.c" locStartln="25" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="e13846a9-e5c1-3553-91a8-8daddb4d476b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6f912fb0-26a2-389e-921b-3aac53a48c2b" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="25" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/Timer/driver.c" locStartln="26" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="1ce841fe-7fe6-3a0c-9c9d-511a723d764a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3ce32dea-b0ba-3ccc-8164-4340673b78f1" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="26" goals="0,"/>
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/Timer/driver.c" locStartln="26" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="5d411c7a-b323-3c53-a9b9-f4ea5deacb54" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f75eaa65-622c-3193-8757-0b41a0711090" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="26" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/Timer/driver.c" locStartln="28" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="64472bd4-5723-36f3-b4ac-dc1e245cdd6f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5259dd93-d69f-3718-baa4-28109ff4130f" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="28" goals="0,"/>
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/Timer/driver.c" locStartln="28" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="9c945052-d391-3074-94b1-2496d895d4a7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="72f3af2f-abb6-3eff-a335-54ab84d6781b" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="28" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="beea537a-b233-32e4-bbd7-5912db67ae35" locEndPos="13" urgent="true" prio="Not Defined" locEndLn="29" goals="1," locStartln="29" sev="1" locRef="2" tool="c++test" lineHash="-495843510" unbViolId="8d2da36e-597e-3e49-9bdb-1bbcd4ee57c7" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="2093791071" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63dc618c-3753-38fe-817c-87cd0d2d1c82" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="32" goals="1," locStartln="32" sev="2" locRef="2" tool="c++test" lineHash="2093791071" unbViolId="2fd5beb0-982d-3cde-bc18-ff0de9e2ce89" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37bd8a6a-8d82-3152-9346-8e03e37bbd85" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="32" goals="1," locStartln="32" sev="2" locRef="2" tool="c++test" lineHash="2093791071" unbViolId="dae5462a-0328-3bb0-9745-7a5971d11c59" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/Timer/driver.c" locStartln="32" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="84ec7f29-088c-3322-935b-d2af5fe75848" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a65db13b-0840-3609-8860-b225b4cda2a2" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="The function 'main_loop' is referenced only in the translation unit where it is defined" ln="32" locFile="/Timer/driver.c" locStartln="32" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="2093791071" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2093791071" unbViolId="3fcf7453-2824-363a-a908-7434809541da" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="8391dce1-7656-3ad5-8eb3-5e5aa64b1d5a" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3190b6c8-52d0-3bff-93cc-7dfb20b3cd85" locEndPos="9" urgent="true" prio="Not Defined" locEndLn="35" goals="1," locStartln="35" sev="4" locRef="2" tool="c++test" lineHash="1236489322" unbViolId="c570ec52-c489-3dae-94ba-8f7e31b3ea00" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="541bd387-b114-303c-b4d1-54378831efbb" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="35" goals="1," locStartln="35" sev="1" locRef="2" tool="c++test" lineHash="1236489322" unbViolId="2f2f6fe3-6eec-36a2-b371-728461155f89" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0fcc9c8-71ec-3657-a2b8-816e51ea33af" locEndPos="19" urgent="true" prio="Not Defined" locEndLn="40" goals="1," locStartln="40" sev="1" locRef="2" tool="c++test" lineHash="-1326866858" unbViolId="7c142e58-fd6f-3dd5-b62b-3d2a9c85e314" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/Timer/driver.c" locStartln="42" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="f3a6c9fe-8bfb-3c91-acf0-9b6315d819d7" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="dc4fdf5e-1b90-3633-8c93-681a3d821125" locEndPos="17" locType="sr" prio="Not Defined" hash="65740504" locEndLn="42" goals="0,"/>
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/Timer/driver.c" locStartln="42" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="81e56791-ebe2-3904-996d-3aad625bef5c" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b87096eb-ec85-37dc-a4b1-02eed99e4adc" locEndPos="30" locType="sr" prio="Not Defined" hash="65740504" locEndLn="42" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/Timer/driver.c" locStartln="44" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="e7e3c471-8a72-3747-b435-a79b0d2a5c23" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1edb0bb0-c0b4-36c0-bade-18f15f99824e" locEndPos="17" locType="sr" prio="Not Defined" hash="65740504" locEndLn="44" goals="0,"/>
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/Timer/driver.c" locStartln="44" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="68d0cd76-002e-33cd-8c42-0fcb42b21405" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6f418de9-b08f-3095-acb9-b7797ab820be" locEndPos="30" locType="sr" prio="Not Defined" hash="65740504" locEndLn="44" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/Timer/driver.c" locStartln="48" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="d6746304-b749-3d4d-9ef2-f95edb595102" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="55e9f9c0-547a-30db-8fc9-405fcb4f3d6a" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="48" goals="0,"/>
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/Timer/driver.c" locStartln="48" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="c8361995-3d60-3a59-bda3-b77f51edd5df" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="90521302-cc1e-31be-96a0-b75c09ff58cd" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="48" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4894de52-1595-3494-af6d-b554998435f1" locEndPos="33" urgent="true" prio="Not Defined" locEndLn="49" goals="1," locStartln="49" sev="1" locRef="2" tool="c++test" lineHash="-429052551" unbViolId="778fe866-2a9a-3a22-be59-16188298f0a7" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3078b820-fc6d-34b4-96e0-f64bfc362fcb" locEndPos="13" urgent="true" prio="Not Defined" locEndLn="52" goals="1," locStartln="52" sev="1" locRef="2" tool="c++test" lineHash="1582224491" unbViolId="e9319e0b-eb2b-392d-b8d3-b317f8d0535a" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="763ae04c-6e60-3f5b-9c74-21564d7f0fdc" locEndPos="13" urgent="true" prio="Not Defined" locEndLn="55" goals="1," locStartln="55" sev="1" locRef="2" tool="c++test" lineHash="-1947009296" unbViolId="418f3b8f-3025-3025-be6b-2eb49f43e367" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/Timer/driver.c" locStartln="59" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="c63d28fa-bbd0-38b4-ae9a-ec78a4eea6c1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="78d9198e-2723-3dca-b8a5-fd8be06ab1cd" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="59" goals="0,"/>
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/Timer/driver.c" locStartln="59" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="f1f8247a-eced-3b7e-a372-2905b4624206" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a07241b6-bbc2-3e29-a3c3-6627d152f301" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="59" goals="0,"/>
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/Timer/driver.c" locStartln="60" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_15_5-a" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="461775b9-2a73-30e8-93d7-ada23c05c04c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0de5c6f5-22a5-3816-a4c3-016f28cb00d0" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="60" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/Timer/driver.c" locStartln="63" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="90f2cd9b-b9e6-3326-8cae-1f55f44ee898" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e96f5885-d01f-3945-aab5-accff01458b5" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="63" goals="0,"/>
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/Timer/driver.c" locStartln="63" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="7c47290c-40ad-3a9f-a094-25b07a77e60d" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0c8ddddc-c463-38e3-8252-fadf2a56a85f" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="63" goals="0,"/>
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/Timer/driver.c" locStartln="69" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_1_5-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="4afa39cf-337d-3553-8da1-f74c98f7a7dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4df31fc7-8f15-3690-955f-c06d0ded5daa" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="69" goals="0,"/>
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/Timer/driver.c" locStartln="69" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="2e7d78c3-6fa1-3ff2-a4d4-89ffe43456bb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2d48f29f-76a2-34e4-be60-d1ab4e151666" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="69" goals="0,"/>
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31b47e2e-72cd-3c22-a6f1-605b8c6de952" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="71" goals="1," locStartln="71" sev="1" locRef="2" tool="c++test" lineHash="932563601" unbViolId="1871557c-4496-3570-81e0-0767ab1fb3e2" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5ad65f-c932-3fe9-90fa-b6f845cb8726" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="72" goals="1," locStartln="72" sev="1" locRef="2" tool="c++test" lineHash="-660983347" unbViolId="1c71c27c-1656-3743-b986-8593f0a581d5" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/Timer/driver.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bac1ee39-5489-38a8-9ef4-dcde4bd33fe9" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="73" goals="1," locStartln="73" sev="1" locRef="2" tool="c++test" lineHash="699424085" unbViolId="28608317-a135-3439-9aa9-3a21ae901011" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/Timer/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="338d40e7-bc0e-3621-9cac-ce3883289ffd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ad5809c7-0293-33a9-8089-f1e5c49105df" locEndPos="7" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="17" goals="0,"/>
    <StdViol msg="Declaration of object 'max_records' does not precede its definition" ln="17" locFile="/Timer/timer.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="1227318948" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32779310-1e1b-3442-8ea3-dd65879e1759" locEndPos="11" urgent="true" prio="Not Defined" locEndLn="17" goals="1," locStartln="17" sev="2" locRef="3" tool="c++test" lineHash="1227318948" unbViolId="6a3df952-74ae-3d27-8b33-4d2c8d603295" risk="Undefined" locType="sr" hash="1500438919"/>
    <StdViol msg="The object 'max_records' is referenced only in the translation unit where it is defined" ln="17" locFile="/Timer/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1227318948" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1227318948" unbViolId="10c78675-3bdf-3a03-ace4-3d8eb90b80bb" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="59fa5686-1428-39b4-83ac-a77da1438ba3" locEndPos="11" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="17" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/Timer/timer.c" locStartln="18" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="08a5c64b-7151-3ad8-a14d-b5cfb02bc427" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7c903fcc-8217-3228-8aef-92df4be9874e" locEndPos="8" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/Timer/timer.c" locStartln="20" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="78f056bf-ac77-3849-b0a8-fe85ad7bbac5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2e8cec48-3978-3ac3-94bb-bb470c734862" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="20" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/Timer/timer.c" locStartln="20" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="c925ef3a-aae5-309e-8ffc-1e1829984eaa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6e3bc656-deb8-3d1f-b899-0bccd134d3ab" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="20" goals="0,"/>
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/Timer/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="8b291b39-5da3-321f-b49f-7f922aafec7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="08eacbc6-ea0d-3542-94a1-944bf7629314" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="22" goals="0,"/>
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned long' and 'signed char'" ln="22" locFile="/Timer/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_10_4-a" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="8f18a15a-35a4-3372-9b82-23f804944bf3" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c5d66173-5a6a-3fc4-940f-6a53ff87fffd" locEndPos="30" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="22" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/Timer/timer.c" locStartln="25" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="7d96663d-b87f-3210-95e4-03775200ce72" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0ae83888-2bea-3fa2-acc7-390cd2133d46" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/Timer/timer.c" locStartln="25" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="e670f7b9-9e50-3ff0-a2ec-71ca6c1e5392" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c63bf677-5224-3daf-8932-12bff8fa9bd9" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/Timer/timer.c" locStartln="28" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="1283bc2e-ee30-3f9c-89a9-d6532d6df6f6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="83b78d4d-2a43-3840-8282-56bd3c047266" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="28" goals="0,"/>
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/Timer/timer.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="1780718607" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28d54536-d41b-3ad7-8eda-53808ec79bab" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="38" goals="1," locStartln="38" sev="2" locRef="3" tool="c++test" lineHash="1780718607" unbViolId="d52b10da-da44-3f7c-a360-5fc4a2ab368b" risk="Undefined" locType="sr" hash="1500438919"/>
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/Timer/timer.c" locStartln="38" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="03189245-b310-3221-a13b-d893a3601f22" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c5743807-c770-3e72-8c02-7754d81c436f" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="38" goals="0,"/>
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/Timer/timer.c" locStartln="38" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="c9708226-933e-30b8-ad43-122a7da51ecd" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="cad99608-7550-3a76-8b4f-dd59fedcd8dc" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="38" goals="0,"/>
    <StdViol msg="The function 'query_user' is referenced only in the translation unit where it is defined" ln="38" locFile="/Timer/timer.c" locStartln="38" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1780718607" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1780718607" unbViolId="913159a9-0aa4-3d81-93a3-f6e4aec2a641" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="b51fbe52-6e13-3d22-a960-b0e2bb149511" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="38" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1600115799" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1600115799" unbViolId="e9135aaa-2273-3a0e-b0e3-0c814f3a693b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5f330761-1cd4-301a-a95b-6e3610868a1f" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="1600115799" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="1600115799" unbViolId="924c4811-cfcf-3148-ba75-bd2f2a2025e6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="05098685-916a-3e8d-a38d-25d6b7f5af0a" locEndPos="9" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="1600115799" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="1600115799" unbViolId="bc597ace-fbe2-33ec-ac97-fc5008932fdc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="063c21a6-87e7-33fb-a4a4-e90f92877177" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/Timer/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="1600115799" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="1600115799" unbViolId="726ccb40-7d51-3de2-b30a-a912594a2b63" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3555a1b2-9add-3890-9dbf-2657948c1e00" locEndPos="25" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="42" locFile="/Timer/timer.c" locStartln="42" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-c" lnHash="1079331828" rule.header="The types defined in the library &lt;time.h> shall not be used" tool="c++test" lineHash="1079331828" unbViolId="d1ebfb54-3cbc-35ac-be5b-351591f52088" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1116b3d1-c8cc-3087-a64b-c9e904c36447" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="42" goals="0,"/>
    <StdViol msg="The 'tm' identifier should not be used" ln="43" locFile="/Timer/timer.c" locStartln="43" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-c" lnHash="1350390768" rule.header="The types defined in the library &lt;time.h> shall not be used" tool="c++test" lineHash="1350390768" unbViolId="ed7df214-d5e1-3b78-a51b-02485ea1dfc8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="079866b4-ccd5-3ad5-9466-991be213d4b5" locEndPos="12" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="43" goals="0,"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="45" locFile="/Timer/timer.c" locStartln="45" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="1705568950" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="1705568950" unbViolId="a21817a3-d955-3419-a45a-a2ab3be744a9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8afb7f00-02a7-351a-80bf-1b372015b5fc" locEndPos="13" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="45" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="46" locFile="/Timer/timer.c" locStartln="46" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1526808077" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1526808077" unbViolId="e81b58ba-b233-3771-8508-16c85e76f98b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2e6d9f0d-b51c-3325-a84b-482f16a1caa0" locEndPos="14" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="46" goals="0,"/>
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/Timer/timer.c" locStartln="48" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_5-a" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="c35112d0-9c80-3b0c-87c4-e4526cf83554" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b4d5c0d5-c1f5-3a09-99c7-e5aab8504a80" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/Timer/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="dda421a8-dc20-3936-9058-bfb61b11ab41" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="72cc1bc6-024e-3ffe-a1a0-74a6e566188d" locEndPos="40" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/Timer/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="20a84111-4db2-3c6d-b039-681ed4f70f08" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c1c47817-cbc4-3690-88af-66b71e183062" locEndPos="40" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="48" goals="0,"/>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/Timer/timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_7-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/Timer/timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1316520277" lang="cpp" violId="a74f308e-6546-33e6-95e8-2941f0abbb61" locEndPos="0" prio="Not Defined" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="d7296428-79ca-31ef-a6e7-e456dfe4e69c" risk="Undefined" locType="sr" hash="1500438919" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1600115799" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/Timer/timer.c" desc="int start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/Timer/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/Timer/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/Timer/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/Timer/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/Timer/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48"/>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/Timer/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/Timer/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1672812153" lang="cpp" violId="74bd5bae-269b-3487-b39e-40f9e368fe7a" locEndPos="0" prio="Not Defined" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="3dc9f6cb-6931-3ea9-8b4e-c736bf29e4be" risk="Undefined" locType="sr" hash="1500438919" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1600115799" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/Timer/timer.c" desc="int start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/Timer/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/Timer/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/Timer/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/Timer/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/Timer/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/Timer/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/Timer/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/Timer/timer.c" locStartln="49" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="6adb8e11-015f-31c3-96e9-a80782101000" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="cab4b8cb-c658-3a71-9ef4-88ef6ef364f6" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="49" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/Timer/timer.c" locStartln="52" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="eaad584e-cf14-3386-82bb-86d309961659" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="af26ddd3-83bb-3be7-b8e6-c45b9f12bf32" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="52" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/Timer/timer.c" locStartln="52" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="80b3d998-fc14-3fa8-99b7-b6f68f572d31" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="89fcfed2-feb5-35f0-966d-d248d61afd71" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="52" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/Timer/timer.c" locStartln="53" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="a6b40795-7dfe-33db-8770-9fdc14f086fd" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="74b3b0fb-f7eb-329b-aef2-9a3eef54e782" locEndPos="23" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="53" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/Timer/timer.c" locStartln="54" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="42e59538-2ff1-3f33-b34b-815c6e36534f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="26bda94d-099f-3d1b-93f9-a4367c0ffb53" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="54" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/Timer/timer.c" locStartln="54" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="be4bdd9c-7cd6-3476-9aa5-0c10d03450c5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6036b5d9-61f1-3239-a4e9-cec3b5199385" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="54" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/Timer/timer.c" locStartln="55" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="9b82eee0-e48b-3aeb-a461-47c0b6783dc3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="94295724-c6eb-31fa-a164-4c4bce3ac65c" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="55" goals="0,"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="57" locFile="/Timer/timer.c" locStartln="57" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-731975428" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-731975428" unbViolId="75d12e4f-ae1f-3f88-ad60-f800421d3995" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="58d54d24-6af9-350f-bbd6-77ef4014c3e4" locEndPos="29" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="57" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/Timer/timer.c" locStartln="60" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="720a6f03-910f-3a96-b449-f3c9a5193f0e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3dc0fcbc-6277-3749-918d-f22f60770f09" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="60" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/Timer/timer.c" locStartln="60" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="26d639fd-313d-3722-a307-a95d93926be0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8d4ac0b6-3ffd-38db-85b5-e2bc1bbc5601" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="60" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/Timer/timer.c" locStartln="61" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="1f9a692f-6d04-37e9-bc36-caf175bf9c41" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7bf89935-6b8d-33aa-b44b-f04006e12b73" locEndPos="23" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="61" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/Timer/timer.c" locStartln="62" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="cf174f6f-a38a-3a48-870e-522670d7e2a6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="923ddd85-fb61-354e-b4db-17d4e4892e6a" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="62" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/Timer/timer.c" locStartln="62" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="4c954804-3503-3090-87c2-7dcf97a124e0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="47b5201a-2095-3493-9020-4dcfdda80c79" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="62" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/Timer/timer.c" locStartln="63" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="e6a36744-a90d-33d9-8c26-8fd65714e248" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2d0e5197-2ec8-3516-b75b-4911ecc2df05" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="63" goals="0,"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="65" locFile="/Timer/timer.c" locStartln="65" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1409060683" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1409060683" unbViolId="9935ed1f-3833-37d3-925a-0b9df247d8a6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="543945a2-fa94-3b07-81e7-f3fa51817bf6" locEndPos="27" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="65" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/Timer/timer.c" locStartln="68" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="ac0c034f-e64b-3f5a-a857-8ba05a61e1d4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e0ca6bab-1a1b-3e97-84c2-22e53aff0022" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="68" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/Timer/timer.c" locStartln="68" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="7a2ac81a-3248-33fc-b05e-9f9e878c9db6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e51a5698-e531-3d39-b569-b89a576037e7" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="68" goals="0,"/>
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/Timer/timer.c" locStartln="69" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_10_3-b" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="1021803899" unbViolId="7c2a53f8-228d-3165-a176-fa2610b210d6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b9860241-3d5c-31fe-a6eb-011d87193863" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="69" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/Timer/timer.c" locStartln="69" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1021803899" unbViolId="125f2bd7-025b-36eb-8dd2-5ad781ca2204" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="92e08da3-9710-3664-af25-2fa626f07700" locEndPos="27" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/Timer/timer.c" locStartln="74" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="0a969b4b-b363-3018-81ff-f707134d4fb2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8ce2a576-60f2-3f8e-b8c0-5d6b9e0a9376" locEndPos="1" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="74" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/Timer/timer.c" locStartln="74" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="62d424c3-df5c-3402-bd5f-7bb5c766e08d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b81eb86c-e54f-3728-969b-de2bb3cdc054" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="74" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/Timer/timer.c" locStartln="74" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="dcbce730-eeb3-34aa-a7e7-2908f092cc66" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="986bd906-5c31-3dfb-a919-5f47e4889f18" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="74" goals="0,"/>
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/Timer/timer.c" locStartln="78" sev="1" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-174357818" unbViolId="88ea5680-e42f-3bdd-9357-1429a6247bd1" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b8316a29-7553-3067-9dcc-fdf3bd6e68e6" locEndPos="14" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="78" goals="0,"/>
    <StdViol msg="Test of a value against zero should be made explicit" ln="80" locFile="/Timer/timer.c" locStartln="80" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="-1502932978" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="-1502932978" unbViolId="b9254dff-b8d7-3bc0-b0dc-cbd36284b86b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="af64e84a-3824-3f50-acce-d6670c1cf2f2" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="80" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/Timer/timer.c" locStartln="83" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="fa13ff48-81e7-32e4-a3b1-093fe30e81be" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2ddb605e-e04b-38c8-aed7-5d84de39c448" locEndPos="9" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="83" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/Timer/timer.c" locStartln="85" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="df246501-1bbf-32ce-b339-4f83fec5bc88" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b3488b09-6151-3ce1-8b0b-be3392fc55a2" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="85" goals="0,"/>
    <StdViol msg="The function 'add_timer_record' is referenced only in the translation unit where it is defined" ln="88" locFile="/Timer/timer.c" locStartln="88" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="2049209490" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2049209490" unbViolId="89e14f31-00f2-3d6a-901a-b155bedf63b7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="3a8900a4-c714-37f5-b4c5-80d9c37757c1" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="88" goals="0,"/>
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/Timer/timer.c" locStartln="98" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_13_3-a" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" tool="c++test" lineHash="-1933903777" unbViolId="f5c35658-cd2f-3a0c-8c6b-fcc080f2127a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="833a76f5-59ad-3883-8a71-91dc96354089" locEndPos="23" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="98" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/Timer/timer.c" locStartln="100" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="b65459ed-a201-371f-bed6-20f03e30ccda" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="08496eb3-98ae-3c13-82d9-21b45600e86c" locEndPos="9" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="100" goals="0,"/>
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/Timer/timer.c" locStartln="100" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="f877cc21-8f39-399c-ac43-067c8272dbf3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="132e436f-02a5-3d67-a972-4babf7ef06b6" locEndPos="22" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="100" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/Timer/timer.c" locStartln="108" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="688f5284-5596-3173-ad7e-5663fed4ffb7" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d348d9fe-54a3-31cc-9f3e-334e2f001976" locEndPos="26" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="108" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/Timer/timer.c" locStartln="111" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="bea65841-f0df-3918-85e2-95a164fa784f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a03a43cd-33c9-3410-af60-ee90ccc7f1ab" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="111" goals="0,"/>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/Timer/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRAC2012-DIR_4_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="b642fd94-b113-331a-a54b-0eb5878fad3e" locEndPos="0" prio="Not Defined" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="ad1752b7-7d91-32dc-91fa-59f20e7f9c99" risk="Undefined" locType="sr" hash="1500438919" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/Timer/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/Timer/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/Timer/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/Timer/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/Timer/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRAC2012-RULE_18_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="93512093" lang="cpp" violId="5438fa77-a794-3348-84ab-ea2aae5b2d9b" locEndPos="0" prio="Not Defined" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="86f7ab2f-db96-3ce1-97b7-a8cc0f4404a5" risk="Undefined" locType="sr" hash="1500438919" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/Timer/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/Timer/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/Timer/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/Timer/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/Timer/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/Timer/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/Timer/timer.c" locStartln="116" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_9-a" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="240ced9f-d478-376a-aedb-4e3a2de5e895" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0835380c-24a6-3fe5-9454-8fdf73d63c95" locEndPos="13" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="116" goals="0,"/>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/Timer/timer.c" locStartln="116" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_9-b" lnHash="1747357394" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="ecba6255-0b07-3fdf-b593-9baf8fd42c5d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="89b0c588-fa16-3ba9-8b9d-78fa50182c9c" locEndPos="13" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="116" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/Timer/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="bf49ecc0-7067-3297-9cf5-50462949c3bd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="88b9eb64-6eae-3110-a6bc-4bb8fd0a5af0" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="123" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/Timer/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="dc80aba2-0fac-3dec-8626-32b36f9812e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6a31df00-bdd8-32d2-bdd0-00f5d5a8914e" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="123" goals="0,"/>
    <StdViol msg="The function 'format_timer_record' is referenced only in the translation unit where it is defined" ln="126" locFile="/Timer/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1296456001" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1296456001" unbViolId="8ce77c51-edc2-38da-8bc8-6d9c1d3f5cd8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="0c103877-5d05-3ced-9b3a-c1a885ba13f6" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="126" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/Timer/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="ec70228c-646e-38ab-8388-ba95f631c962" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d9631936-0ac5-3023-8cb3-9a37a89d828d" locEndPos="26" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="126" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-23883783" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="12ce3e5e-4ad9-383f-911e-d5586e973322" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="559c478d-1963-306e-a5ea-a1c090c7762f" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="133" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="ada1e7b5-303c-35b7-a475-010254c32941" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e184a4f9-5a3b-39ee-8850-75a5cfe956aa" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="133" locFile="/Timer/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-23883783" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="e951b275-cb13-3c2f-a8e5-a8d8db40a934" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="db836947-c65a-3ee2-8005-3a2b9a852d57" locEndPos="38" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1644342585" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="41a8e082-03b1-38c5-9063-62d396f820a3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ef94e8b6-9696-358c-a7f8-9463b9c39d79" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="134" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="f6640c72-e913-3692-9973-0981c93c657f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="be4d19ff-54d9-32d0-b1e0-ae3681112595" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="134" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="134" locFile="/Timer/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1644342585" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="4209aa78-5695-30fa-a962-c9a920bdf194" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2e3e37fa-b5e2-35d2-ac4a-f4fde938735b" locEndPos="36" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="134" goals="0,"/>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/Timer/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="MISRAC2012-RULE_14_3-ac" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/Timer/timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="cdb1c915-9aa1-3a18-931f-1a74611dc233" locEndPos="0" prio="Not Defined" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="93e490b0-f162-3804-879c-3de6e8b1e3d6" risk="Undefined" locType="sr" hash="1500438919" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/Timer/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/Timer/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/Timer/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/Timer/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/Timer/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/Timer/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1500438919" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/Timer/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Test of a value against zero should be made explicit" ln="136" locFile="/Timer/timer.c" locStartln="136" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="130267201" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="130267201" unbViolId="4fce12cb-375e-3428-945f-a2d0c379cd07" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="19a24ffe-12e9-3607-ad84-0e97ad05cee3" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="136" goals="0,"/>
    <StdViol msg="The 'sprintf' library function should not be used" ln="137" locFile="/Timer/timer.c" auth="syoung" rule="MISRAC2012-RULE_21_6-a" lnHash="201551585" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b238bd8-c511-3d61-af73-419af7c2eef3" locEndPos="9" urgent="true" prio="Not Defined" locEndLn="137" goals="1," locStartln="137" sev="2" locRef="3" tool="c++test" lineHash="201551585" unbViolId="62aaaae9-b25e-33b6-b55f-b7e9774aa98b" risk="Undefined" locType="sr" hash="1500438919"/>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/Timer/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="94164c1a-de1d-3a01-bfc6-95d7c46f00c4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e2a4aa05-2784-3faf-afb9-c30241041f0e" locEndPos="9" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="137" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/Timer/timer.c" locStartln="142" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="89ad385d-8ec5-34d9-89a7-b6b08c69a4af" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="acce1722-bb89-3924-8f76-c6858d9ec47b" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="142" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/Timer/timer.c" locStartln="142" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="69b9ba31-cd21-33b2-a1a2-50997b69fa75" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="94dd3c07-55f8-38ee-8db2-a8d0e1186d31" locEndPos="6" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="142" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/Timer/timer.c" locStartln="145" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="9df1c6c2-c419-30da-a0ca-4ec03c67d57a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4e161cce-b0b9-3ad6-8cf6-4c6854be534f" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="145" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/Timer/timer.c" locStartln="146" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="f4c51be6-ab77-32d7-b817-674f452a70f1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="081b4165-ba27-3a56-8f77-9afb7a397815" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="146" goals="0,"/>
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/Timer/timer.c" locStartln="146" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="8afa845e-9d4f-375c-a70c-c1c1c83d6f21" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="679d8679-e8f5-31b9-83f4-fbccb9cf8638" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="146" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/Timer/timer.c" locStartln="147" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="b4b5f992-46c3-30d8-b4c3-80bb3fd82c97" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b9a94e07-4ed4-3dad-8dad-38491a61ccff" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="147" goals="0,"/>
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/Timer/timer.c" locStartln="147" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="038596d0-df99-3719-b2d8-8ba5b29fc627" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="44e786e6-5470-3aa9-80a9-392652c2b12c" locEndPos="18" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="147" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/Timer/timer.c" locStartln="151" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="7713e418-e7ab-37cb-bd62-1b70c6f03cd4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3fd9c75b-3595-3a18-bf29-75ddc739de68" locEndPos="9" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="151" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/Timer/timer.c" locStartln="153" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="3d2b1c3d-b6ad-3d3a-ae79-89180932f9a9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ebee3141-8357-3c54-8f14-bca2b96decb8" locEndPos="5" locType="sr" prio="Not Defined" hash="1500438919" locEndLn="153" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/Timer/stdinout.c" locStartln="16" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="8654ccb0-f424-397e-9b2e-ec22a1642fb0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1238cd83-c0e3-3746-a52e-598073305f2f" locEndPos="1" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/Timer/stdinout.c" locStartln="16" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_1_5-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="ad8da039-4d34-3b91-a076-3b056cdc18f6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="415b2ba9-88a1-3971-ab25-9685f11a9168" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/Timer/stdinout.c" locStartln="16" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_8_2-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="59d2e552-5f2f-37f1-91e3-1455d8e140ed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d5520031-fc92-3ec1-9a98-6e38db6b3866" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/Timer/stdinout.c" locStartln="18" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-RULE_2_8-c" lnHash="-695983806" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="-695983806" unbViolId="bc4bd8d3-81e3-301d-a4d5-b462f8481af3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c922c08d-7831-3222-955e-7e940fae570a" locEndPos="10" locType="sr" prio="Not Defined" hash="844867668" locEndLn="18" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/Timer/stdinout.c" locStartln="19" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="8dba3d7e-a5a5-304b-9940-dc3c254c543e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a416b648-9636-3000-807e-a191fd4873e7" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/Timer/stdinout.c" locStartln="35" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="0269f1f4-afc5-3aaf-a2cd-6730108a8483" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ea92a522-aba6-39cc-8bab-6868c5db6ab8" locEndPos="12" locType="sr" prio="Not Defined" hash="844867668" locEndLn="35" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="46" locFile="/Timer/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="1849933771" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="1849933771" unbViolId="3d2096c7-ca99-3122-9d56-dd54a4f19574" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="dd3d5cc8-d346-32d7-b8ac-e7ee0de22d17" locEndPos="13" locType="sr" prio="Not Defined" hash="844867668" locEndLn="46" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="07155eea-56c9-368b-a413-85e4552124a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="19784b08-0ee3-3d66-abb3-10c0de4f2951" locEndPos="1" locType="sr" prio="Not Defined" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/Timer/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-RULE_8_13-a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="71670aac-7201-3ee1-b207-d5e68906b1f5" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="eee91d08-c8ec-3cf9-9775-7370626cb243" locEndPos="24" locType="sr" prio="Not Defined" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="The 'printf' library function should not be used" ln="54" locFile="/Timer/stdinout.c" locStartln="54" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_21_6-a" lnHash="-206127679" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-206127679" unbViolId="8ff3ae99-d10c-3f02-b836-9384bd024680" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="11c7544e-f85a-38a9-85a8-0a6bfddf221a" locEndPos="13" locType="sr" prio="Not Defined" hash="844867668" locEndLn="54" goals="0,"/>
    <StdViol msg="Do not use reserved identifiers : _consts_h_" ln="3" locFile="/Timer/consts.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="-2108418455" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45c86d53-1941-3348-8d5d-745760446d5c" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="5" tool="c++test" lineHash="-2108418455" unbViolId="8df17dc4-899c-31be-851b-a20535b63627" risk="Undefined" locType="sr" hash="1651539479"/>
    <StdViol msg="Do not use reserved identifiers : _clock_h_" ln="3" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="1162366501" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af20c9aa-7107-33d0-8322-7165a47d3187" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="6" tool="c++test" lineHash="1162366501" unbViolId="1a83ce9c-e740-35bf-8ae7-09d4202d36f0" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_10-a" lnHash="-1042055562" rule.header="The standard header files &lt;time.h> or &lt;ctime> shall not be used" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d29ab66b-f499-3292-a8a5-ca5534f00555" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="5" goals="1," locStartln="5" sev="2" locRef="6" tool="c++test" lineHash="-1042055562" unbViolId="dd69d2c6-33be-366d-953c-6a281506ea29" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="8" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="957119588" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60787135-2912-3967-af25-3a4a7fc8c03d" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="8" goals="1," locStartln="8" sev="2" locRef="6" tool="c++test" lineHash="957119588" unbViolId="d3ce4180-be99-3873-ab5a-f5db156c6b67" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="8" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="957119588" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="152841d6-353b-3f1a-ade1-0f12e2670887" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="8" goals="1," locStartln="8" sev="2" locRef="6" tool="c++test" lineHash="957119588" unbViolId="56414650-1a25-3d18-b441-29796832ffca" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Names shall be given for all the parameters in function 'set_time'" ln="11" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_8_2-a" lnHash="-701432954" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b5f46da-b47e-3f01-bf2b-4d2237df7c70" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="6" tool="c++test" lineHash="-701432954" unbViolId="e89512e4-3cdb-39da-931a-ba2c0f225e95" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/Timer/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-701432954" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ff0e2d2-58ee-3623-a49b-c05638b02dc6" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="6" tool="c++test" lineHash="-701432954" unbViolId="89367a5b-be7a-3032-8e35-38f17f07a36d" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Do not use reserved identifiers : _input_h_" ln="3" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="554854633" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="715868ec-e069-37e1-9e9c-9121d1486b8e" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="7" tool="c++test" lineHash="554854633" unbViolId="a499904d-1d7a-3640-ba5d-0df4b552fc23" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="6" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-155000900" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca20d3a7-8523-336c-8b5d-37273a2705ab" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="4" locRef="7" tool="c++test" lineHash="-155000900" unbViolId="9e11c633-b74a-322b-bf13-e87c5b6677cb" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="6" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-155000900" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2826e946-a780-31fc-a951-c1bde7db033c" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="2" locRef="7" tool="c++test" lineHash="-155000900" unbViolId="a9ffe234-7fd9-3500-b0c9-59f1ea1589e9" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="6" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-155000900" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84a42128-7347-37af-ba02-330b0a680fef" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="2" locRef="7" tool="c++test" lineHash="-155000900" unbViolId="e4264e03-a1ea-3d54-8633-72d6cc1c54b1" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1729353454" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adf7cad3-27d3-3f5a-80e5-3d9665ef7f27" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="4" locRef="7" tool="c++test" lineHash="-1729353454" unbViolId="a6c4b83d-9d42-39d3-81ae-205b68fd48ce" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Names shall be given for all the parameters in function 'print_string'" ln="9" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-a" lnHash="-1729353454" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5893c47-05c6-3c51-9288-c3d40c04452c" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="2" locRef="7" tool="c++test" lineHash="-1729353454" unbViolId="953ad4f1-02a9-30c2-84ad-98d4cb1cef8d" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="12" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1128300596" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4afeb15b-d827-3461-8a50-cf9a8b20400e" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="4" locRef="7" tool="c++test" lineHash="-1128300596" unbViolId="b8c929eb-cdd7-3732-88e8-4f8d294e247a" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'print_string_array' is not in prototype form" ln="12" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-1128300596" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87e67ed2-e46d-3bc5-bbb2-01e70bda5ea2" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="7" tool="c++test" lineHash="-1128300596" unbViolId="2ec9a36d-0c88-302c-9a0b-6dd7b1b255b9" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'print_string_array' is not in prototype form" ln="12" locFile="/Timer/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-1128300596" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb3be0a2-1541-3e40-b248-be9a4be8ced5" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="7" tool="c++test" lineHash="-1128300596" unbViolId="11f8db05-bd7b-3592-8a6c-5ef8b1d716c8" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The 'print_string_array' function has no definition" ln="12" locFile="/Timer/inout.h" locStartln="12" sev="2" auth="syoung" locRef="7" rule="MISRAC2012-RULE_8_6-b" lnHash="-1128300596" rule.header="An identifier with external linkage shall have external definition" tool="c++test" lineHash="-1128300596" unbViolId="edd8fb16-f213-3caa-9cd0-0e25a4146f71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="b2217510-bd66-3a44-ac50-894ba09c77f1" locEndPos="5" locType="sr" prio="Not Defined" hash="-311681184" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use reserved identifiers : _timer_h_" ln="3" locFile="/Timer/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="-1992342642" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfeab336-e3fb-32fd-8379-3cf6101d2d3b" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="8" tool="c++test" lineHash="-1992342642" unbViolId="6d4ec2bb-64b8-3157-9795-6f8134a351a2" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/Timer/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-a" lnHash="-1042055562" rule.header="The standard header files &lt;time.h> or &lt;ctime> shall not be used" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d363265f-bf5c-3202-8470-fec911ae678d" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="5" goals="1," locStartln="5" sev="2" locRef="8" tool="c++test" lineHash="-1042055562" unbViolId="86c841ed-d9bd-3e10-b5bc-03add5975b13" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Consider hiding the implementation of the structure 'timer_record' in a translation unit 'driver.c'" ln="9" locFile="/Timer/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_8-a" lnHash="507216118" rule.header="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b35ab55-f907-3214-a249-9b9b60ec13c7" locEndPos="8" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="4" locRef="8" tool="c++test" lineHash="507216118" unbViolId="ac68e99b-09f2-319c-ab0a-feec06f32310" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/Timer/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="2125380426" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6143c3a-b5c7-3ee6-bbd2-1d873cf5019a" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="8" tool="c++test" lineHash="2125380426" unbViolId="96e2ee8f-142c-393c-9bd2-cd9c157e0d5c" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="12" locFile="/Timer/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="1676941809" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="599e2ce2-84e0-3a3e-8dfd-d8daac8f8d7d" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="8" tool="c++test" lineHash="1676941809" unbViolId="0182203f-5477-3cbb-abe8-f9c71579aae0" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The basic numerical type 'unsigned' should not be used" ln="13" locFile="/Timer/timer.h" locStartln="13" sev="4" auth="syoung" locRef="8" rule="MISRAC2012-DIR_4_6-b" lnHash="-391931805" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-391931805" unbViolId="7dade036-e4ad-33d7-b956-63133ccf49fd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4c2c34c9-37e5-3961-b360-8521e38f09da" locEndPos="5" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="17" locFile="/Timer/timer.h" locStartln="17" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="-571522376" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-571522376" unbViolId="1f0645d2-79a6-38c5-8796-94d243f7b7a3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="03454c8a-9979-358d-ac6f-40d94fa71064" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="17" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="17" locFile="/Timer/timer.h" locStartln="17" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="-571522376" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-571522376" unbViolId="5f22bd5e-8087-3c76-8549-a857e517f6cd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="423f6cb7-8804-3e9a-8399-c097bc86ae8c" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="17" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="18" locFile="/Timer/timer.h" locStartln="18" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="-750737473" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-750737473" unbViolId="ce77a5d7-f9e4-3eb6-8326-01bb19ecd993" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7d4aac6c-d0ae-3df8-a5e0-2225e36aa204" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="18" locFile="/Timer/timer.h" locStartln="18" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="-750737473" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-750737473" unbViolId="bb7a4883-1b1e-3792-af32-9134e1477541" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4b56f769-f39f-315c-9ea1-1acc2a3feb06" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="18" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="21" locFile="/Timer/timer.h" locStartln="21" sev="4" auth="syoung" locRef="8" rule="MISRAC2012-DIR_4_6-b" lnHash="1408320612" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1408320612" unbViolId="4113bd62-c6fe-36df-b1ce-29f16eaa5ace" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="18698b3d-031b-3a15-8758-d3f62f8ef85e" locEndPos="1" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="21" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="21" locFile="/Timer/timer.h" locStartln="21" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="1408320612" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408320612" unbViolId="72d87bd9-b2e6-3949-8c2b-64f25ace6353" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="33ebce6a-1b59-3cac-84e1-705bb63ea493" locEndPos="5" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="21" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="21" locFile="/Timer/timer.h" locStartln="21" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="1408320612" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408320612" unbViolId="ebf1e205-26ce-3a48-bfdf-57f9dcb8c756" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a295f7b8-46e5-3e83-a819-91f6ae8c4378" locEndPos="5" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="21" goals="0,"/>
    <StdViol msg="Names shall be given for all the parameters in function 'add_timer_record'" ln="24" locFile="/Timer/timer.h" locStartln="24" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="431182393" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="431182393" unbViolId="50b134de-c966-3f0e-b188-7d3b60916f54" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c7118b88-9584-3b9e-b474-13ea626970d6" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="24" goals="0,"/>
    <StdViol msg="Names shall be given for all the parameters in function 'delete_timer_record'" ln="27" locFile="/Timer/timer.h" locStartln="27" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="1493922828" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="1493922828" unbViolId="8db08322-9241-3d43-bf28-11ca8d9f7e4e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c6e6f69d-4f31-3330-8c77-9b08a8545c43" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/Timer/timer.h" locStartln="27" sev="4" auth="syoung" locRef="8" rule="MISRAC2012-DIR_4_6-b" lnHash="1493922828" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1493922828" unbViolId="530cb742-73cf-3ae0-9ddf-f34519a956b0" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0bd39e70-5747-31d5-a348-cb5b6b3c1c66" locEndPos="26" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="27" goals="0,"/>
    <StdViol msg="Names shall be given for all the parameters in function 'format_timer_record'" ln="30" locFile="/Timer/timer.h" locStartln="30" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="-70128892" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="-70128892" unbViolId="92504d7c-cd48-3623-863d-fbc3f4ffa7e7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="45e63398-4b21-3cbf-b2d1-3b7adebb670c" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/Timer/timer.h" locStartln="30" sev="4" auth="syoung" locRef="8" rule="MISRAC2012-DIR_4_6-b" lnHash="-70128892" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-70128892" unbViolId="e81b1e4c-fbb2-34ba-bcc6-54158ca7ec90" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="35f2dee7-d6a6-389f-955e-b610d10bed8a" locEndPos="26" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="30" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="33" locFile="/Timer/timer.h" locStartln="33" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="706074743" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="706074743" unbViolId="fa97a7a1-e922-346f-b174-1b3952ad46b1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="9d6243e1-9995-327e-bceb-fc3e611a65da" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="33" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="33" locFile="/Timer/timer.h" locStartln="33" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="706074743" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="706074743" unbViolId="67fb0681-892a-35b7-98db-8e639b0b08d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="3ec79d07-3319-399c-8448-e6ba52face45" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="33" goals="0,"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="202">
            <Project id="Timer" name="Timer" supp="0" total="202">
               <Res loc="/Timer/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="10"/>
               <Res loc="/Timer/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="58"/>
               <Res loc="/Timer/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="87"/>
               <Res loc="/Timer/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="10"/>
               <Res loc="/Timer/consts.h" locRef="5" locType="sr" name="consts.h" supp="0" total="1"/>
               <Res loc="/Timer/clock.h" locRef="6" locType="sr" name="clock.h" supp="0" total="6"/>
               <Res loc="/Timer/inout.h" locRef="7" locType="sr" name="inout.h" supp="0" total="10"/>
               <Res loc="/Timer/timer.h" locRef="8" locType="sr" name="timer.h" supp="0" total="20"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>