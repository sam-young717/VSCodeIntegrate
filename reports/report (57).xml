<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="MISRA C 2023-2025-07-02" climode="true" endTime="2025-07-02T08:58:19-04:00" execEnv="linux_x86_64" hasViols="true" id="1750092503578" lang="en" machine="syoung-pc" prjModule="VSCodeIntegrate" project="MISRA C 2023" tag="${scontrol_branch}-linux_x86_64" time="2025-07-02T08:57:24-04:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="MISRA C 2023 (MISRA C 2012)" pseudoUrl="builtin://MISRA C 2023 (MISRA C 2012)" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
      <History>
         <Graph id="gls">
            <Categories>
               <Category color="red" name="Total" pos="0"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Tasks" yTitle2="Total Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,06-20-25,06-25-25,07-01-25,07-02-25,</X>
               <Y>50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,50,50,50,</Y>
               <Delta>0,</Delta>
            </Total>
         </Graph>
      </History>
   
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="1931614703" locRef="1" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.c" totLns="29" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="driver.c" totLns="76" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/driver.c"/>
         <Loc auth="syoung" hash="-275311578" locRef="3" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.c" totLns="155" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="stdinout.c" totLns="55" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/stdinout.c"/>
         <Loc auth="syoung" hash="1651539479" locRef="5" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="consts.h" totLns="9" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/consts.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="6" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="inout.h" totLns="15" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/inout.h"/>
         <Loc auth="syoung" hash="-1204881763" locRef="7" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.h" totLns="14" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="8" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.h" totLns="36" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:48">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="389" id="VSCodeIntegrate" name="VSCodeIntegrate" qfixErrs="0" suppErrs="0" totErrs="203" totFiles="8" totLns="389"/>
      </Projects>
      
      <History>
         <Graph id="lns">
            <Categories>
               <Category color="blue" name="Total Lines" pos="0"/>
               <Category color="green" name="Checked Lines" pos="1"/>
               <Category authPos="0" color="red" name="Tasks" pos="2"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Lines" yTitle2="Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,06-20-25,06-25-25,07-01-25,07-02-25,</X>
               <Y>390,390,390,390,390,390,390,390,390,390,390,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,390,390,390,389,389,389,389,389,389,389,167,167,167,167,167,203,203,203,203,203,207,207,207,203,0,203,203,203,</Y>
               <Delta>0,0,0,</Delta>
            </Total>
            <Authors title="" xTitle="Date" yTitle="Total Tasks">
               <Author name="syoung">
                  <X>03-20-25,03-24-25,03-31-25,04-03-25,04-10-25,05-15-25,05-19-25,05-21-25,06-04-25,06-09-25,06-10-25,06-11-25,06-12-25,06-16-25,06-20-25,06-25-25,07-01-25,07-02-25,</X>
                  <Y>167,167,167,167,167,203,203,203,203,203,207,207,207,203,0,203,203,203,</Y>
                  <Delta>0,</Delta>
               </Author>
            </Authors>
         </Graph>
      </History>
   
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2023 (MISRA C 2012)" name="MISRAC2012" rules="382" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="2" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0"/>
               <Category authTot="4;" authUrg="2;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0"/>
               <Category authTot="6;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="6"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.15 (Required) Evaluation of floating-point expressions shall not lead to the undetected generation of infinities and NaNs" name="MISRAC2012-DIR_4_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.3 (Required) There shall be no dynamic thread creation" name="MISRAC2012-DIR_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.2 (Required) There shall be no deadlocks between threads" name="MISRAC2012-DIR_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.1 (Required) There shall be no data races between threads" name="MISRAC2012-DIR_5_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.10 (Required) The _Atomic qualifier shall not be applied to the incomplete type void" name="MISRAC2012-RULE_11_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0"/>
               <Category authTot="22;" authUrg="6;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a Standard Library function" name="MISRAC2012-RULE_22_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.6 (Required) The small integer variants of the minimum-width integer constant macros shall not be used" name="MISRAC2012-RULE_7_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0"/>
               <Category authTot="26;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="26"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.5 (Mandatory) The argument of an integer-constant macro shall have an appropriate form" name="MISRAC2012-RULE_7_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length arrays shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.9 (Required) An object with temporary lifetime shall not undergo array-to-pointer conversion" name="MISRAC2012-RULE_18_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0"/>
               <Category authTot="3;" authUrg="2;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="3"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.25 (Required) All memory synchronization operations shall be executed in sequentially consistent order" name="MISRAC2012-RULE_21_25" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" name="MISRAC2012-RULE_13_2" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.24 (Required) The random number generator functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_24" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.23 (Required) All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" name="MISRAC2012-RULE_21_23" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.22 (Mandatory) All arguments to any type-generic macros declared in &lt;tgmath.h> shall have appropriate essential type" name="MISRAC2012-RULE_21_22" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.10 (Mandatory) Pointers to variably-modified array types shall not be used" name="MISRAC2012-RULE_18_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.26 (Required) The Standard Library function mtx_timedlock() shall only be invoked on mutex objects of appropriate mutex type" name="MISRAC2012-RULE_21_26" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.2 (Required) A project shall not contain dead code" name="MISRAC2012-RULE_2_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 2.7 (Advisory) A function should not contain unused parameters" name="MISRAC2012-RULE_2_7" rules="1" total="1"/>
               <Category authTot="5;" authUrg="0;" desc="Rule 2.8 (Advisory) A project should not contain unused object definitions" name="MISRAC2012-RULE_2_8" rules="3" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.15 (Required) Thread synchronization objects and thread-specific storage pointers shall not be destroyed until after all threads accessing them have terminated" name="MISRAC2012-RULE_22_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.14 (Mandatory) Thread synchronization objects shall be initialized before being accessed" name="MISRAC2012-RULE_22_14" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.13 (Required) Thread objects, thread synchronization objects and thread-specific storage pointers shall have appropriate storage duration" name="MISRAC2012-RULE_22_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.12 (Mandatory) Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" name="MISRAC2012-RULE_22_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.6 (Required) Structure and union members of atomic objects shall not be directly accessed" name="MISRAC2012-RULE_12_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.11 (Required) A thread that was previously either joined or detached shall not be subsequently joined nor detached" name="MISRAC2012-RULE_22_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6 (Required) An initializer using chained designators shall not contain initializers without designators" name="MISRAC2012-RULE_9_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.7 (Mandatory) Atomic objects shall be appropriately initialized before being accessed" name="MISRAC2012-RULE_9_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.19 (Required) A condition variable shall be associated with at most one mutex object" name="MISRAC2012-RULE_22_19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.18 (Required) Non-recursive mutexes shall not be recursively locked" name="MISRAC2012-RULE_22_18" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.17 (Required) No thread shall unlock a mutex or call cnd_wait() or cnd_timedwait() for a mutex it has not locked before" name="MISRAC2012-RULE_22_17" rules="1" total="0"/>
               <Category authTot="22;" authUrg="12;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.16 (Required) All mutex objects locked by a thread shall be explicitly unlocked by the same thread" name="MISRAC2012-RULE_22_16" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="12" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.15 (Required) All declarations of an object with an explicit alignment specification shall specify the same alignment" name="MISRAC2012-RULE_8_15" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="5" total="0"/>
               <Category authTot="17;" authUrg="4;" desc="Rule 1.5 (Required) Obsolescent language features shall not be used" name="MISRAC2012-RULE_1_5" rules="7" total="17"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.16 (Advisory) The alignment specification of zero should not appear in an object declaration" name="MISRAC2012-RULE_8_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.17 (Advisory) At most one explicit alignment specifier should appear in an object declaration" name="MISRAC2012-RULE_8_17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.10 (Required) A function declared with a _Noreturn function specifier shall have void return type" name="MISRAC2012-RULE_17_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.2 (Required) A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" name="MISRAC2012-RULE_23_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.11 (Advisory) A function that never returns should be declared with a _Noreturn function specifier" name="MISRAC2012-RULE_17_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.3 (Advisory) A generic selection should contain at least one non-default association" name="MISRAC2012-RULE_23_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.12 (Advisory) A function identifier should only be used with either a preceding &amp;, or with a parenthesised parameter list" name="MISRAC2012-RULE_17_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.4 (Required) A generic association shall list an appropriate type" name="MISRAC2012-RULE_23_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.13 (Required) A function type shall not be type qualified" name="MISRAC2012-RULE_17_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.5 (Advisory) A generic selection should not depend on implicit pointer type conversion" name="MISRAC2012-RULE_23_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.6 (Required) The controlling expression of a generic selection shall have an essential type that matches its standard type" name="MISRAC2012-RULE_23_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.7 (Advisory) A generic selection that is expanded from a macro should evaluate its argument only once" name="MISRAC2012-RULE_23_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.20 (Mandatory) Thread-specific storage pointers shall be created before being accessed" name="MISRAC2012-RULE_22_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.8 (Required) A default association shall appear as either the first or the last association of a generic selection" name="MISRAC2012-RULE_23_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.1 (Advisory) A generic selection should only be expanded from a macro" name="MISRAC2012-RULE_23_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="1" total="0"/>
               <Category authTot="19;" authUrg="9;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="3" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0"/>
               <Category authTot="15;" authUrg="6;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="15"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0"/>
               <Category authTot="35;" authUrg="2;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="35"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.9 (Mandatory) A function declared with a _Noreturn function specifier shall not return to its caller" name="MISRAC2012-RULE_17_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.3 (Required) A bit field shall not be declared as a member of a union" name="MISRAC2012-RULE_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid signed integer overflows" id="MISRAC2012-DIR_4_1-l" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid data loss when converting between integer types" id="MISRAC2012-DIR_4_1-m" origId="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid potential integer overflow/underflow on tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_15" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRAC2012-DIR_4_15-a" origId="BD-PB-NANINF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot; using Doxygen comments" id="MISRAC2012-DIR_4_4-b" origId="MISRA2004-2_4_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="12;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="Do not use global variable with different locks set" id="MISRAC2012-DIR_5_1-a" origId="BD-TRS-MLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="Variable should be used in context of single critical section" id="MISRAC2012-DIR_5_1-b" origId="BD-TRS-DIFCS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_1" desc="There shall be no data races between threads" id="MISRAC2012-DIR_5_1-c" origId="BD-TRS-THRDR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_2" desc="Do not acquire locks in different order" id="MISRAC2012-DIR_5_2-a" origId="BD-TRS-ORDER" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_5_3" desc="A thread should not be created by another thread" id="MISRAC2012-DIR_5_3-a" origId="BD-TRS-THRTHR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRAC2012-RULE_10_1-h" origId="CODSTA-225" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_10" desc="The '_Atomic' qualifier should not be used with the 'void' type" id="MISRAC2012-RULE_11_10-a" origId="CODSTA-MC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRAC2012-RULE_11_8-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRAC2012-RULE_12_1-a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="Avoid incorrect shift operations" id="MISRAC2012-RULE_12_2-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the essential or underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-b" origId="CODSTA-302" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_6" desc="Members of atomic objects of structure and union types should not be directly accessed" id="MISRAC2012-RULE_12_6-a" origId="CODSTA-MC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression with atomic type should be independent from thread interleaving" id="MISRAC2012-RULE_13_2-h" origId="CODSTA-MC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of an assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The standard header file &lt;stdarg.h> or &lt;cstdarg> shall not be used" id="MISRAC2012-RULE_17_1-c" origId="CODSTA-136_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_10" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="MISRAC2012-RULE_17_10-a" origId="CODSTA-204" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_11" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="MISRAC2012-RULE_17_11-a" origId="BD-PB-NORETDECL" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_12" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRAC2012-RULE_17_12-a" origId="MISRA2004-16_9" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_13" desc="Do not include any type qualifiers in the specification of a function type" id="MISRAC2012-RULE_17_13-a" origId="CODSTA-221" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="6;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="2;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="35"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_9" desc="Never return from functions that should not return" id="MISRAC2012-RULE_17_9-a" origId="BD-PB-NORETURN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_10" desc="Pointers to variably-modified array types should not be used" id="MISRAC2012-RULE_18_10-a" origId="CODSTA-112_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with thread storage duration shall not be assigned to an object with static storage duration" id="MISRAC2012-RULE_18_6-c" origId="CODSTA-231" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length arrays should not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_9" desc="Do not modify objects with temporary lifetime" id="MISRAC2012-RULE_18_9-a" origId="CODSTA-196" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_1_5-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="MISRAC2012-RULE_1_5-b" origId="CODSTA-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="4;" cat="MISRAC2012-RULE_1_5" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_1_5-c" origId="CODSTA-159" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the macro ATOMIC_VAR_INIT" id="MISRAC2012-RULE_1_5-d" origId="CODSTA-209_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the 'bool', 'false' or 'true' identifiers in the #undef directive" id="MISRAC2012-RULE_1_5-e" origId="PREPROC-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not use the ungetc function on a stream with the file position indicator zero" id="MISRAC2012-RULE_1_5-f" origId="BD-PB-UNGETC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_5" desc="Do not pass 0 value as a size argument to the realloc function" id="MISRAC2012-RULE_1_5-g" origId="BD-API-REALLOC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" origId="MISRA2004-20_12" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="2;" cat="MISRAC2012-RULE_21_10" desc="The time handling functions and macros of the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-b" origId="MISRA2004-20_12_b" sev="2" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="5;" cat="MISRAC2012-RULE_21_10" desc="The types defined in the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-c" origId="MISRA2004-20_12_c" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The standard header file &lt;fenv.h> shall not be used" id="MISRAC2012-RULE_21_12-b" origId="CODSTA-109_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_22" desc="All arguments to any type-generic macros declared in &lt;tgmath.h> shall have appropriate essential type" id="MISRAC2012-RULE_21_22-a" origId="CODSTA-108_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_23" desc="All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" id="MISRAC2012-RULE_21_23-a" origId="CODSTA-108_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_24" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="MISRAC2012-RULE_21_24-a" origId="SECURITY-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_25" desc="Only 'memory_order_seq_cst' should be used as an explicit memory order argument" id="MISRAC2012-RULE_21_25-a" origId="CODSTA-MC-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_26" desc="The Standard Library function mtx_timedlock() shall not be invoked on a mutex that does not support timeout" id="MISRAC2012-RULE_21_26-a" origId="BD-TRS-TIMEDLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="MISRAC2012-RULE_21_6" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_11" desc="Do not join or detach a thread that was previously joined or detached" id="MISRAC2012-RULE_22_11-a" origId="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_12" desc="Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" id="MISRAC2012-RULE_22_12-a" origId="CODSTA-MC-22" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_13" desc="Thread objects, thread synchronization objects and thread-specific storage pointers shall not have automatic storage duration" id="MISRAC2012-RULE_22_13-a" origId="CODSTA-MC-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_14" desc="A thread synchronization object should not be initialized by a thread" id="MISRAC2012-RULE_22_14-a" origId="BD-TRS-THRINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_14" desc="The second argument passed to the 'mtx_init()' function call should be either 'mtx_plain', 'mtx_timed', 'mtx_plain | mtx_recursive', or 'mtx_timed | mtx_recursive'" id="MISRAC2012-RULE_22_14-b" origId="CODSTA-MC-21" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_15" desc="A thread synchronization object should not be destroyed by a thread" id="MISRAC2012-RULE_22_15-a" origId="BD-TRS-THRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_16" desc="Do not abandon unreleased locks" id="MISRAC2012-RULE_22_16-a" origId="BD-TRS-LOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_17" desc="Do not release a lock that has not been acquired" id="MISRAC2012-RULE_22_17-a" origId="BD-TRS-REVLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_18" desc="Avoid double locking" id="MISRAC2012-RULE_22_18-a" origId="BD-TRS-DLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_19" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="MISRAC2012-RULE_22_19-a" origId="GLOBAL-CONDMUTEXVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_20" desc="A thread-specific storage should not be created by a thread" id="MISRAC2012-RULE_22_20-a" origId="BD-TRS-THRTSS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_1" desc="A generic selection should only be expanded from a macro" id="MISRAC2012-RULE_23_1-a" origId="CODSTA-MC-08" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_1" desc="A generic selection used in a macro definition should have a macro parameter in the controlling expression" id="MISRAC2012-RULE_23_1-b" origId="CODSTA-MC-10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_2" desc="A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" id="MISRAC2012-RULE_23_2-a" origId="CODSTA-MC-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_3" desc="A generic selection shall indicate at least one non-default association" id="MISRAC2012-RULE_23_3-a" origId="CODSTA-MC-07" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_4" desc="A generic association shall list an appropriate type" id="MISRAC2012-RULE_23_4-a" origId="CODSTA-MC-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_5" desc="A generic selection should not depend on implicit pointer type conversion" id="MISRAC2012-RULE_23_5-a" origId="CODSTA-MC-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_6" desc="The controlling expression of a generic selection shall have an essential type that matches its standard type" id="MISRAC2012-RULE_23_6-a" origId="CODSTA-MC-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_6" desc="Enumerated types should not be mixed with integer types in generic selections" id="MISRAC2012-RULE_23_6-b" origId="CODSTA-MC-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_7" desc="A generic selection that is expanded from a macro shall evaluate its argument only once" id="MISRAC2012-RULE_23_7-a" origId="CODSTA-MC-15" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_23_8" desc="The default association shall be placed first or last in the association list" id="MISRAC2012-RULE_23_8-a" origId="CODSTA-MC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="Avoid unreachable methods" id="MISRAC2012-RULE_2_1-h" origId="BD-PB-UCMETH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with external linkage" id="MISRAC2012-RULE_2_8-a" origId="GLOBAL-UNUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with internal linkage" id="MISRAC2012-RULE_2_8-b" origId="OPT-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused local variables" id="MISRAC2012-RULE_2_8-c" origId="OPT-02" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6-a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7-a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-b" origId="GLOBAL-REUSEDEXTFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define objects with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define functions with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_3" desc="A member of a union shall not be declared as a bit-field" id="MISRAC2012-RULE_6_3-a" origId="CODSTA-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="26"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_5" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="MISRAC2012-RULE_7_5-a" origId="CODSTA-220" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_6" desc="The small integer variants of the minimum-width integer constant macros should not be used" id="MISRAC2012-RULE_7_6-a" origId="CODSTA-220_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with external linkage shall be the same" id="MISRAC2012-RULE_8_15-a" origId="GLOBAL-ALIGNDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with internal linkage shall be the same" id="MISRAC2012-RULE_8_15-b" origId="CODSTA-MC-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_16" desc="The zero-alignment specifier should not be used in an object declaration" id="MISRAC2012-RULE_8_16-a" origId="CODSTA-MC-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_17" desc="A declaration of an object should contain at most one explicit alignment specifier" id="MISRAC2012-RULE_8_17-a" origId="CODSTA-MC-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="2;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="4;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have no more then one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have external definition" id="MISRAC2012-RULE_8_6-b" origId="GLOBAL-NOEXTERNDEF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="6;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_6" desc="An initializer using chained designators shall not contain initializers without designators" id="MISRAC2012-RULE_9_6-a" origId="PB-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_7" desc="Atomic objects shall be properly initialized before being accessed" id="MISRAC2012-RULE_9_7-a" origId="BD-PB-NOTINITAT" sev="1" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="15;" authUrg="6;" id="1" total="15"/>
            <Severity authTot="147;" authUrg="30;" id="2" total="147"/>
            <Severity authTot="41;" authUrg="14;" id="4" total="41"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2967b220-720f-3028-9c7e-b7304d0070e1" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="1" tool="c++test" lineHash="-523314505" unbViolId="c348bc8c-7443-3f29-abf2-04814badcd0a" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c21ad71-967e-30e8-8302-b2fb242df117" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="2" locRef="1" tool="c++test" lineHash="-523314505" unbViolId="da14c211-fbfe-3063-b67c-8de47e6c74dd" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="16" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-1564703446" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b470887f-89cf-3e5f-9772-d52f3b7dad01" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="16" goals="1," locStartln="16" sev="2" locRef="1" tool="c++test" lineHash="-1564703446" unbViolId="c45b5d76-a115-3f7c-bd75-c1139089c788" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="16" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-b" lnHash="-1564703446" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1f51e3b-ab39-3703-bc66-b9d4b46cbe84" locEndPos="23" urgent="true" prio="Not Defined" locEndLn="16" goals="1," locStartln="16" sev="2" locRef="1" tool="c++test" lineHash="-1564703446" unbViolId="4eb0f53a-d2fc-3cbc-a5ab-040179321bbe" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Usage of 'ctime' function is not allowed" ln="17" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-b" lnHash="-237631284" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d704c694-6618-39c7-b4a6-50ca9a82d70c" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="17" goals="1," locStartln="17" sev="2" locRef="1" tool="c++test" lineHash="-237631284" unbViolId="ee1a735b-9edd-346a-bb8c-3a2c752aa3db" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="The 'sprintf' library function should not be used" ln="19" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_6-a" lnHash="369521280" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d6c2bf9-2487-324c-9d6d-1a228c56f8bc" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="19" goals="1," locStartln="19" sev="2" locRef="1" tool="c++test" lineHash="369521280" unbViolId="7837b766-07e2-34bd-8cb7-9f765b43e748" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_17_7-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64479392-0131-3400-a840-c03933bed72c" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="19" goals="1," locStartln="19" sev="2" locRef="1" tool="c++test" lineHash="369521280" unbViolId="a5cddfcf-24ec-3abd-95ac-5a2bcfd77441" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_17_7-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2380c1dc-d1a4-3d56-b0cc-5c114c0fd483" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="20" goals="1," locStartln="20" sev="2" locRef="1" tool="c++test" lineHash="-1350296736" unbViolId="0dc17b96-d0f9-3aae-b641-adf694a07b16" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="27" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-1989025327" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2277309a-6ed6-3f6a-9187-e64111780767" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="27" goals="1," locStartln="27" sev="2" locRef="1" tool="c++test" lineHash="-1989025327" unbViolId="9e39a7e0-ab50-3f51-9b62-e27b4e42be30" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="Parameter 'new_time' is not used in function 'set_time'" ln="27" locFile="/VSCodeIntegrate/clock.c" auth="syoung" rule="MISRAC2012-RULE_2_7-a" lnHash="-1989025327" rule.header="There should be no unused parameters in functions" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a257fc64-d0a3-340f-a4b4-e7301f596e81" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="27" goals="1," locStartln="27" sev="4" locRef="1" tool="c++test" lineHash="-1989025327" unbViolId="073189cd-395e-381f-a1e9-5d93ba543d9e" risk="Undefined" locType="sr" hash="1931614703"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/VSCodeIntegrate/driver.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb8a6268-96b7-3fa9-b77b-99b9a14dda26" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="4" locRef="2" tool="c++test" lineHash="-1050535651" unbViolId="ff4c5160-77c2-3ccc-ba20-3aa4e9f0fff4" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="-1050535651" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1050535651" unbViolId="fdb8db1b-b58a-327e-b02a-87e2cc51c40e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="bf2ac0ab-13f8-3f85-97f0-2dbe4bb71fc5" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_1_5-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="0f40b09e-4de0-30af-9422-7d974beb547d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2f57c65a-9705-3ca8-a9c2-0d6d05efc9ce" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="4828ede5-3567-3675-902e-6cd9c3639ba8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1363f55c-1219-3c07-8b4f-fc1d5c2408d8" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="13" goals="0,"/>
    <StdViol msg="The function 'print_menu_get_action' is referenced only in the translation unit where it is defined" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="-1050535651" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="-1050535651" unbViolId="97f4faf6-b751-3826-821e-dc03254a1f50" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="5b9d6978-06f6-319f-8cc0-2aedaa785d91" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="13" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/VSCodeIntegrate/driver.c" locStartln="15" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="d7f2e8c3-d5c8-3c91-85c1-f149696ef672" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c110a50b-4e9d-3ac0-86d0-871d9c103d22" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="15" goals="0,"/>
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/VSCodeIntegrate/driver.c" locStartln="15" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="6e4172ab-130e-3d5d-9e03-e5e2c6737dae" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e336b21a-b86d-3773-9605-9bd2794a2f5f" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="15" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/VSCodeIntegrate/driver.c" locStartln="16" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="236a0991-2c03-3a56-bdc4-273d547a1684" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="84e3093d-52ad-3e46-a75f-00a62f010796" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="16" goals="0,"/>
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/VSCodeIntegrate/driver.c" locStartln="16" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="32f046ba-ca61-39df-868b-1d39b9b4c67d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="be1fe1b3-838c-3e18-ad6a-89fb11174ab8" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="16" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/VSCodeIntegrate/driver.c" locStartln="17" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="1fdfa9ac-344d-30fc-beba-5ef8eb36ebde" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f0b8d064-ddee-363a-98f3-85cfa9b8c22b" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="17" goals="0,"/>
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/VSCodeIntegrate/driver.c" locStartln="17" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="b18186c0-759d-3137-8494-653778a770c8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5a1e45f2-ffb1-35e3-bb0d-2d8b87af0a46" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="17" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/VSCodeIntegrate/driver.c" locStartln="18" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="d2903f11-e185-3282-a1b9-f1bb6faf0a2a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="10ab67e7-3f4f-35bd-a252-2b2c555f6423" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="18" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/VSCodeIntegrate/driver.c" locStartln="18" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="561b4592-f0f4-30c8-b9e0-7be50556ef16" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="30082a6e-fa23-3011-a8a9-8a5ae4311936" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="18" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/VSCodeIntegrate/driver.c" locStartln="19" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="45c85eb3-8ddd-30b0-bc5c-46f04ade119d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="145875c6-3c73-3bf4-aab7-0cf267b7c4df" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="19" goals="0,"/>
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/VSCodeIntegrate/driver.c" locStartln="19" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="261903f3-f263-3c09-baf3-43412159afd9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="62adf2df-d3c8-38da-bb88-340f10714c0c" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="19" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/VSCodeIntegrate/driver.c" locStartln="20" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="483ee681-0424-3e6a-8910-45389e89b46c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="45d66967-5c97-3423-8e4d-76277751c192" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="20" goals="0,"/>
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/VSCodeIntegrate/driver.c" locStartln="20" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="de1807a5-402b-37bd-bf31-bbc6b5b19b64" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f50cf3ec-a2d6-3258-bc88-4c76b244c5fc" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="20" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/VSCodeIntegrate/driver.c" locStartln="21" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="5e5be6f0-7eb9-3f36-822c-f491d3644add" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="db32c6a5-bd3a-317b-b528-9323b18f44f1" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="21" goals="0,"/>
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/VSCodeIntegrate/driver.c" locStartln="21" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="0e3a3bf6-e2e1-3430-a5ac-dfe9378fa852" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ffb4c478-9a5a-3dae-8634-14ea584a18d9" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="21" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/VSCodeIntegrate/driver.c" locStartln="22" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="c4a99267-51d4-304a-9a9e-0b935109edab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="54729b1f-0de7-3eb1-a05e-05aa2657e457" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="22" goals="0,"/>
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/VSCodeIntegrate/driver.c" locStartln="22" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="818d18ca-86c8-3426-a094-014a27e85368" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1a655b03-7d2e-38d0-aa6b-894873af565e" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="22" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/VSCodeIntegrate/driver.c" locStartln="23" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="9bed677e-849e-378f-bdeb-b13eda1865a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7bbae58c-3fb9-3721-9fa9-932e976d6719" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="23" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/VSCodeIntegrate/driver.c" locStartln="23" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="98eb1ee3-db7a-3b1b-ada2-ce23c2c578f4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e2ea6f4c-4c51-36f4-864e-46c9ca960d3a" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="23" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/VSCodeIntegrate/driver.c" locStartln="24" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="06a4b04a-ab0b-3648-8143-401c21f0f9b1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8571d2ee-18b7-32e2-a2ee-25b1648cdd72" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="24" goals="0,"/>
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/VSCodeIntegrate/driver.c" locStartln="24" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="8a70cff8-e519-3e25-8538-f10e0f916ed9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="667ab049-20b9-3b6d-8574-6fbfb66c19de" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="24" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/VSCodeIntegrate/driver.c" locStartln="25" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="fbe43af2-814b-38eb-a31a-9ed3bd2b1bcd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="bed32d48-d00c-36cc-99a8-e63882fbc494" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="25" goals="0,"/>
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/VSCodeIntegrate/driver.c" locStartln="25" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="fed5da3a-edce-3d8c-a9bf-115a20e1c7a8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="20f271c4-f681-3a58-9ff8-cb8550abadc7" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="25" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/VSCodeIntegrate/driver.c" locStartln="26" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="75994f2f-71f9-381c-abf7-465712ac7dfb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="995f16ca-7a00-387f-89cf-1ba0e8fc3e8d" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="26" goals="0,"/>
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/VSCodeIntegrate/driver.c" locStartln="26" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="7cfca01a-fa4c-3059-aa23-7f3c824caa25" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="859f9e5f-94f8-3162-9b69-7286996faf41" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="26" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/VSCodeIntegrate/driver.c" locStartln="28" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="81a1c5ad-2e20-35b9-8033-32fa305018e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6fd20a13-8791-35b5-b43c-28cb965ce36e" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="28" goals="0,"/>
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/VSCodeIntegrate/driver.c" locStartln="28" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="73df4ad8-6681-3512-a11e-daed8861988f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ed81983e-90e1-300f-8c7e-f41d1e9667d2" locEndPos="18" locType="sr" prio="Not Defined" hash="65740504" locEndLn="28" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/VSCodeIntegrate/driver.c" locStartln="29" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-495843510" unbViolId="a1b6c720-dd58-3400-9902-7ec5a00d16e7" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="89a35d9d-def6-373a-a662-28dc45b0fe5b" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="29" goals="0,"/>
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/VSCodeIntegrate/driver.c" locStartln="32" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="2093791071" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="2093791071" unbViolId="cedcc680-c294-3365-8d59-f62e7f05e939" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d440f02b-c5fd-349f-87f6-edd25fca154d" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/VSCodeIntegrate/driver.c" locStartln="32" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_1_5-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="1c3f8a6b-79d1-3f79-8b53-c1ecd07d0fc1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ec444b72-f339-3e69-8dd7-1050e29269a0" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/VSCodeIntegrate/driver.c" locStartln="32" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="554ebf2c-e2e6-3a24-a9c9-f23b7060b89b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="326a726b-bdb1-3b02-bf73-d0eaba70b3e7" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="The function 'main_loop' is referenced only in the translation unit where it is defined" ln="32" locFile="/VSCodeIntegrate/driver.c" locStartln="32" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="2093791071" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2093791071" unbViolId="e8d9f4f6-addd-35c3-9fee-b1c38826d746" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="f91f1cce-9f79-3a6f-91d9-d7c84196aa3a" locEndPos="6" locType="sr" prio="Not Defined" hash="65740504" locEndLn="32" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/VSCodeIntegrate/driver.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="985e3a65-b186-3f83-a1dd-8cc7d54a257c" locEndPos="9" urgent="true" prio="Not Defined" locEndLn="35" goals="1," locStartln="35" sev="4" locRef="2" tool="c++test" lineHash="1236489322" unbViolId="eb96f4cb-4ffe-387f-b53a-f867187e38de" risk="Undefined" locType="sr" hash="65740504"/>
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/VSCodeIntegrate/driver.c" locStartln="35" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1236489322" unbViolId="2162bc35-fed4-3b11-bbc4-bd12a689e20a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ac4d53fb-da38-3f5f-a09b-74ad392c5f21" locEndPos="22" locType="sr" prio="Not Defined" hash="65740504" locEndLn="35" goals="0,"/>
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/VSCodeIntegrate/driver.c" locStartln="40" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1326866858" unbViolId="92e4ea68-b4a4-3271-9757-3368f1a84343" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="37c9374a-678e-3835-a783-2798e47839b3" locEndPos="19" locType="sr" prio="Not Defined" hash="65740504" locEndLn="40" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/VSCodeIntegrate/driver.c" locStartln="42" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="030bc201-8aee-3b60-9c0b-f3e3b0942469" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5601c15b-807f-33b4-906c-2e980b9c5029" locEndPos="17" locType="sr" prio="Not Defined" hash="65740504" locEndLn="42" goals="0,"/>
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/VSCodeIntegrate/driver.c" locStartln="42" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="5cff505f-ab3b-3c9a-b1c0-4ab09e292487" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="caa9770e-b8d3-3e96-acb4-6544c2add8fd" locEndPos="30" locType="sr" prio="Not Defined" hash="65740504" locEndLn="42" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/VSCodeIntegrate/driver.c" locStartln="44" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="81b86829-1f59-3b62-be75-6eff5dd0bc27" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="97873d6b-7d43-3dc6-904a-a3f28b311f56" locEndPos="17" locType="sr" prio="Not Defined" hash="65740504" locEndLn="44" goals="0,"/>
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/VSCodeIntegrate/driver.c" locStartln="44" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="5618be9e-4d58-32d2-91aa-bc2b634e8180" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="518ba74b-1386-36c6-ab24-1f21f172f11c" locEndPos="30" locType="sr" prio="Not Defined" hash="65740504" locEndLn="44" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/VSCodeIntegrate/driver.c" locStartln="48" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="164384ee-7e74-3a18-8f77-7149037c3a4c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8e1e8155-c939-3942-801b-76bebfb8b46b" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="48" goals="0,"/>
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/VSCodeIntegrate/driver.c" locStartln="48" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="0a966070-438e-3a16-8e7a-71efa0208b65" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="73510716-726d-3c8e-8d24-f512308af981" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="48" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/VSCodeIntegrate/driver.c" locStartln="49" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-429052551" unbViolId="d2435ce3-09bd-32fa-9059-67b70dbd713b" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="59707b77-5528-3f32-8046-0791b2022cf0" locEndPos="33" locType="sr" prio="Not Defined" hash="65740504" locEndLn="49" goals="0,"/>
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/VSCodeIntegrate/driver.c" locStartln="52" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1582224491" unbViolId="8dff8786-0690-3244-a46f-d37c650d1eae" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="07a86e03-2e5e-3852-a193-012b238b200f" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="52" goals="0,"/>
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/VSCodeIntegrate/driver.c" locStartln="55" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1947009296" unbViolId="6bb33425-9f57-3e84-a1e8-ca86045cad1b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="da7ada30-ab42-3f1c-8cc5-b9f5505485e8" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="55" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/VSCodeIntegrate/driver.c" locStartln="59" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="e0265a45-3f05-3f06-b73b-727434ca2244" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8f9d2ccb-e87e-331e-9423-c699d8a6169b" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="59" goals="0,"/>
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/VSCodeIntegrate/driver.c" locStartln="59" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="239023e3-a43e-3f2b-b100-79db4853363e" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="05283683-f6a0-3401-9e72-35b24b35cafe" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="59" goals="0,"/>
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/VSCodeIntegrate/driver.c" locStartln="60" sev="4" auth="syoung" locRef="2" rule="MISRAC2012-RULE_15_5-a" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="1b10e0c5-2a3a-34b8-b06d-a6307171da57" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="48db3c42-fc1a-3776-af91-65cb9726df73" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="60" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/VSCodeIntegrate/driver.c" locStartln="63" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="938c813a-c49d-3ed0-8bf3-bf099e8f6043" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0b490bcc-d4b6-35bd-a6b0-44920bda0ef1" locEndPos="13" locType="sr" prio="Not Defined" hash="65740504" locEndLn="63" goals="0,"/>
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/VSCodeIntegrate/driver.c" locStartln="63" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="9ed6e206-a3ed-359b-9b94-c7d573db8a13" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="eb49d5cc-d3f2-30f1-adbc-6669937aabcd" locEndPos="26" locType="sr" prio="Not Defined" hash="65740504" locEndLn="63" goals="0,"/>
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/VSCodeIntegrate/driver.c" locStartln="69" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_1_5-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="6df29a4a-0d38-3d3d-a1c2-18d4f861ffa8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="92940e3b-902b-3fea-9950-d5a5c4b19738" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="69" goals="0,"/>
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/VSCodeIntegrate/driver.c" locStartln="69" sev="2" auth="syoung" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="f6a06184-4486-303c-a3dd-414c5864ab46" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="31c8188c-2023-32a2-8adf-e1aa336991cb" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="69" goals="0,"/>
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/VSCodeIntegrate/driver.c" locStartln="71" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="932563601" unbViolId="4c210803-9810-3601-92c9-a0419245f9d7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0ae5c5ff-044a-35ef-b333-7eedd7a06d0d" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="71" goals="0,"/>
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/VSCodeIntegrate/driver.c" locStartln="72" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-660983347" unbViolId="5efab174-2f36-3076-a5be-37c9421d73c1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7558eaf2-8fa4-310e-8684-2ca1f112d2d4" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="72" goals="0,"/>
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/VSCodeIntegrate/driver.c" locStartln="73" sev="1" auth="syoung" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="699424085" unbViolId="97a4bbc5-2140-3518-96bb-ec8748722ba7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="103916ff-1175-3f37-9330-c9a1eb3c8d42" locEndPos="5" locType="sr" prio="Not Defined" hash="65740504" locEndLn="73" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21408012-01ac-3c6b-97c1-e1735bbf4855" locEndPos="7" urgent="true" prio="Not Defined" locEndLn="17" goals="1," locStartln="17" sev="4" locRef="3" tool="c++test" lineHash="1227318948" unbViolId="2e14864d-4cbb-3edb-9ec2-d6a70e178682" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Declaration of object 'max_records' does not precede its definition" ln="17" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="1227318948" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a1c77e3-aa6b-349d-a5a3-36537697e443" locEndPos="11" urgent="true" prio="Not Defined" locEndLn="17" goals="1," locStartln="17" sev="2" locRef="3" tool="c++test" lineHash="1227318948" unbViolId="2fc5d687-e268-305a-99a0-27f15e4a02fc" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="The object 'max_records' is referenced only in the translation unit where it is defined" ln="17" locFile="/VSCodeIntegrate/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1227318948" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1227318948" unbViolId="9a3a335d-5d7b-32b4-b962-ddbe8f27eecc" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="18b1b12f-c9d2-3faa-ae9a-ad0a9baad2e1" locEndPos="11" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="17" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51c30b4b-84f8-3a17-9360-8a168539b91e" locEndPos="8" urgent="true" prio="Not Defined" locEndLn="18" goals="1," locStartln="18" sev="4" locRef="3" tool="c++test" lineHash="1846901926" unbViolId="8d3afd8f-e000-3a0f-b517-d6bf89f6bdae" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/VSCodeIntegrate/timer.c" locStartln="20" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="635687db-8ccd-3056-bf80-fa76e74bf6a1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8471c180-1815-3189-99b9-6a95bd53e65a" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="20" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/VSCodeIntegrate/timer.c" locStartln="20" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="d1720d3e-43a2-364f-add5-f52150c676d7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="9d79f5a2-0293-3eb3-9cfe-61c3629a3502" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="20" goals="0,"/>
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/VSCodeIntegrate/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="76bf5a61-b053-32ca-bb8d-b8f76e31988a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="629c1b05-d325-3ee0-b00a-8b2865ba7639" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="22" goals="0,"/>
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned long' and 'signed char'" ln="22" locFile="/VSCodeIntegrate/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_10_4-a" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="54ebcd65-3699-3602-a9a5-3d58dc9b6e95" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ae8acca1-4e1a-3c29-a56b-85f2d9cd0b61" locEndPos="30" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="22" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/VSCodeIntegrate/timer.c" locStartln="25" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="0b626edb-821c-3d98-ab72-fd423226c853" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7e6e3f09-2279-3614-8972-1af0c927f53f" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/VSCodeIntegrate/timer.c" locStartln="25" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="bb27a5af-c1b9-36b8-8ea5-19c6e0f703fb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0500d597-613b-3eab-9f59-9a1c9781d063" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8744fcb9-b4e2-3ed4-9e29-5904cbd1bdbc" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="28" goals="1," locStartln="28" sev="4" locRef="3" tool="c++test" lineHash="1679375043" unbViolId="4b6bbb16-c8d6-3fbe-9309-961b53d20ea7" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_8_4-a" lnHash="1780718607" rule.header="A declaration shall be visible when an object or function with external linkage is defined" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dad624e-b953-3c48-bf23-e25d52c4581d" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="38" goals="1," locStartln="38" sev="2" locRef="3" tool="c++test" lineHash="1780718607" unbViolId="18596145-73cb-313e-a182-f12df446050f" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/VSCodeIntegrate/timer.c" locStartln="38" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="f7bb024a-5ab6-3179-9bd4-409184efcea2" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a6240cb5-a0f7-3538-b6ca-2ffead27f3b8" locEndPos="22" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="38" goals="0,"/>
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/VSCodeIntegrate/timer.c" locStartln="38" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="2905c8c8-8712-3bbe-a625-ffabeaf82915" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5a5a6ffb-3957-3df0-84ff-a4d9ff08cd64" locEndPos="22" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="38" goals="0,"/>
    <StdViol msg="The function 'query_user' is referenced only in the translation unit where it is defined" ln="38" locFile="/VSCodeIntegrate/timer.c" locStartln="38" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1780718607" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1780718607" unbViolId="65db485a-14d7-312a-9326-aa9bc82a97ed" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="6e9700ce-1bb0-3aa2-a0bb-e51015a04d2c" locEndPos="22" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="38" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="621530644" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="89eb047b-b499-37d5-945e-66fb67062d5d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="fdde067d-aa75-39e3-9399-40eb29f95ad0" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="c17ff8d5-892a-37a5-979b-d780f98ae27e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="da547095-2aaf-36a7-8c08-3011b400048f" locEndPos="9" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="e1ad2aef-4042-3c3a-8f19-522756429c9d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="27e43741-915c-3884-8dbb-c86da4ef7c09" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="ec716bc8-96ca-3c6e-aad3-6147d071f398" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="140bc354-41b7-3d5c-be76-62a99f3e4d0a" locEndPos="27" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_2_8-c" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="4c0a066e-0ac8-3c84-bd0b-85ffcf0796aa" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="879eaf6c-ab66-3dcb-800b-de673ec2a430" locEndPos="34" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="42" locFile="/VSCodeIntegrate/timer.c" locStartln="42" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-c" lnHash="1079331828" rule.header="The types defined in the library &lt;time.h> shall not be used" tool="c++test" lineHash="1079331828" unbViolId="e5244cad-32ad-396a-80b3-97f795fb27d8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1cc9279d-fe3d-310d-b7d6-c8e49b6ea9aa" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="42" goals="0,"/>
    <StdViol msg="The 'tm' identifier should not be used" ln="43" locFile="/VSCodeIntegrate/timer.c" locStartln="43" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-c" lnHash="1350390768" rule.header="The types defined in the library &lt;time.h> shall not be used" tool="c++test" lineHash="1350390768" unbViolId="c2a2ac08-853d-3e82-9579-aa3428478579" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="276b39ee-11b6-3bb3-8e43-940a3116dd61" locEndPos="12" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="43" goals="0,"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="45" locFile="/VSCodeIntegrate/timer.c" locStartln="45" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="1705568950" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="1705568950" unbViolId="63fc9d73-08fe-33c4-9a14-b81b16db1a34" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="92bebe54-a74c-3e96-ab0f-3e61d45a0c5e" locEndPos="13" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="45" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="46" locFile="/VSCodeIntegrate/timer.c" locStartln="46" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1526808077" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1526808077" unbViolId="6bf0f959-de23-369b-9a24-71cf53acd43f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e26fed4c-9a23-358b-afab-a4496fea278c" locEndPos="14" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="46" goals="0,"/>
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_5-a" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="5d95a9b8-41f2-3996-bfcc-d27835a07c3c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5278a779-0924-3951-b53c-580f8f5322c9" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="7af7f0ac-6b15-355e-9275-1283b9184b6d" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="8260f5ac-f90d-3f80-a1ee-0b5fe3eb9edd" locEndPos="40" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="64afb472-6f64-33ce-95f6-fcebd0d179bb" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="fa74c15d-44d6-318a-b616-e07cee9c58c5" locEndPos="40" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="48" goals="0,"/>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_7-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-694228954" lang="cpp" violId="e8ac81f0-059e-3866-8394-6d69995df8d7" locEndPos="0" prio="Not Defined" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="3afc90cd-7466-3f54-926d-f93ccc3b202b" risk="Undefined" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/VSCodeIntegrate/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/VSCodeIntegrate/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/VSCodeIntegrate/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/VSCodeIntegrate/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48"/>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/VSCodeIntegrate/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78414068" lang="cpp" violId="a584c56a-82f3-3240-8439-5ee8256081b2" locEndPos="0" prio="Not Defined" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="d86ddae6-229e-339b-a661-5bfd5525d2a7" risk="Undefined" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/VSCodeIntegrate/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/VSCodeIntegrate/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/VSCodeIntegrate/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/VSCodeIntegrate/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/VSCodeIntegrate/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/VSCodeIntegrate/timer.c" locStartln="49" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="3803195d-9bfb-344c-b857-d55357236158" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="cca21df2-cef3-3b53-afd4-55aa88f3f840" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="49" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/VSCodeIntegrate/timer.c" locStartln="52" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="bc15b0c1-30a1-3a77-9de3-0cd33fe7e393" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="497fb4ff-01d7-36dd-8805-915ebc71e44a" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="52" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/VSCodeIntegrate/timer.c" locStartln="52" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="9cc17266-d251-35be-a0da-c87b418667c8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="08a97de7-e6a4-3d69-b6e6-9cb9764af132" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="52" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48c7d0c5-73da-3abb-8540-37c4d84324d0" locEndPos="23" urgent="true" prio="Not Defined" locEndLn="53" goals="1," locStartln="53" sev="1" locRef="3" tool="c++test" lineHash="1051372518" unbViolId="b0a5e683-7c4f-37e4-ae66-37adb3645b93" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/VSCodeIntegrate/timer.c" locStartln="54" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="3c121d88-7a1f-32f3-809b-c81ecf720f00" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="9275ef9c-9d41-3671-b5ff-d1dd2dc2e440" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="54" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/VSCodeIntegrate/timer.c" locStartln="54" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="d9537f04-79ef-39d6-830a-1549a541b590" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="87b58423-0471-3e07-8884-ba91e7866f20" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="54" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="142c8b5f-f42e-319d-bad3-6a6914da110f" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="55" goals="1," locStartln="55" sev="1" locRef="3" tool="c++test" lineHash="-1585297472" unbViolId="580d45ac-5544-3b02-bbf1-4e1b2ace3b77" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="57" locFile="/VSCodeIntegrate/timer.c" locStartln="57" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-731975428" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-731975428" unbViolId="a94e9a53-24bd-3634-adf1-6c215473c79e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="729718e2-a8fa-3010-abeb-be8101ce0181" locEndPos="29" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="57" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/VSCodeIntegrate/timer.c" locStartln="60" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="053b09cc-bf8e-3171-ab3f-688416e58613" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="64e40ae8-e0a3-38a5-af34-286d1743d72b" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="60" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/VSCodeIntegrate/timer.c" locStartln="60" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="de18df3e-5809-3a5e-a7aa-eaf4c40373ad" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a2b0dbf4-aec6-3835-983f-070ce4eb7012" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="60" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b45df944-202b-3072-8aa7-5997d2c1a75c" locEndPos="23" urgent="true" prio="Not Defined" locEndLn="61" goals="1," locStartln="61" sev="1" locRef="3" tool="c++test" lineHash="1051372518" unbViolId="68c57a08-3807-3af9-8c10-e187c8453962" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/VSCodeIntegrate/timer.c" locStartln="62" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="9fa8ab23-8f62-3992-b91a-d33f71352466" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="edd94230-5e7d-3857-bb4b-5c069c44f687" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="62" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/VSCodeIntegrate/timer.c" locStartln="62" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="3386869b-0517-3771-a9cb-52976c2d2940" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d2538ed8-8183-3c58-9296-bd957b235c53" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="62" goals="0,"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cca23664-512e-3cf4-8d50-14296be9f752" locEndPos="22" urgent="true" prio="Not Defined" locEndLn="63" goals="1," locStartln="63" sev="1" locRef="3" tool="c++test" lineHash="-1585297472" unbViolId="2d9116c3-958c-3c09-8499-b15a21917094" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Usage of 'mktime' function is not allowed" ln="65" locFile="/VSCodeIntegrate/timer.c" locStartln="65" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1409060683" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1409060683" unbViolId="7f42fee0-c78b-38d8-b896-287e2694ab3f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2a32031e-c7ec-3307-a6dd-7c36b90572e9" locEndPos="27" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="65" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/VSCodeIntegrate/timer.c" locStartln="68" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="7a4cb19c-7a4a-30ae-8d23-46c97f983d57" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="ea645c37-47c4-32aa-8d34-ff716232dad1" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="68" goals="0,"/>
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/VSCodeIntegrate/timer.c" locStartln="68" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="eea589a6-94f7-3c9e-9b34-46cabe802524" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7b06e876-e558-327f-8ae9-7cf54e795327" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="68" goals="0,"/>
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_10_3-b" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94f1c31e-bc81-38a6-9c5c-1a69721648b7" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="69" goals="1," locStartln="69" sev="2" locRef="3" tool="c++test" lineHash="1021803899" unbViolId="6d346931-584e-3a0b-9329-b288e3325db9" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="add5dd2e-1324-3acb-aef0-f6401ef99ef4" locEndPos="27" urgent="true" prio="Not Defined" locEndLn="69" goals="1," locStartln="69" sev="1" locRef="3" tool="c++test" lineHash="1021803899" unbViolId="9fc612af-c40b-32df-bd94-a2d3f6cb61a8" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/VSCodeIntegrate/timer.c" locStartln="74" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="71468377-4419-3c4e-9fc8-6c8a1e6558d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6cc688c4-4fef-31b9-9784-1299499e3e6f" locEndPos="1" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="74" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/VSCodeIntegrate/timer.c" locStartln="74" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="fd2855cf-f29a-3d0b-80a2-822a31a87f43" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2c08366c-ef9a-36ef-b484-3d28c8c71cf6" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="74" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/VSCodeIntegrate/timer.c" locStartln="74" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="e0ee4094-c5b8-3129-8fba-9ce0cbc39e27" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="db7814e7-af6f-3c58-83c9-003cd0044669" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="74" goals="0,"/>
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_17_3-a" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f975f7d-c50e-35b4-8f91-256ce98b5b8f" locEndPos="14" urgent="true" prio="Not Defined" locEndLn="78" goals="1," locStartln="78" sev="1" locRef="3" tool="c++test" lineHash="-174357818" unbViolId="e23f7e7e-4851-3603-aeef-a97263b563fe" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Test of a value against zero should be made explicit" ln="80" locFile="/VSCodeIntegrate/timer.c" locStartln="80" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="-1502932978" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="-1502932978" unbViolId="82fb677f-2992-3b72-8dc2-e34d9d986bee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="73ad9041-1727-3414-b6ff-d4c329c1ecbe" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="80" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/VSCodeIntegrate/timer.c" locStartln="83" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="fa98ccd1-9105-3f8a-8f70-14187b65b155" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="a081a8ff-c1b1-362c-bf06-140efc65c242" locEndPos="9" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="83" goals="0,"/>
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/VSCodeIntegrate/timer.c" locStartln="85" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="d197d1e5-531a-3eb2-9762-729cdcb6bfad" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0846f8c7-cd1b-31b6-8b91-7ffbc49106b5" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="85" goals="0,"/>
    <StdViol msg="The function 'add_timer_record' is referenced only in the translation unit where it is defined" ln="88" locFile="/VSCodeIntegrate/timer.c" locStartln="88" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="2049209490" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2049209490" unbViolId="a46704b1-85dc-3b69-9a6a-af1eed95f32a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="20dfc973-5d71-32b0-bfe9-cb0ed6764a23" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="88" goals="0,"/>
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/VSCodeIntegrate/timer.c" locStartln="98" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_13_3-a" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" tool="c++test" lineHash="-1933903777" unbViolId="1d6fc143-7e79-38dc-863f-c717aee0cac7" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7d03c49d-ae65-36e4-948d-38f9c562fcf7" locEndPos="23" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="98" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/VSCodeIntegrate/timer.c" locStartln="100" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="d2aff697-416e-3e67-bb42-f9b5c562fb9d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="1bfc3fad-b09d-3427-9bc2-06a9e517bcd8" locEndPos="9" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="100" goals="0,"/>
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/VSCodeIntegrate/timer.c" locStartln="100" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="fede1f83-95f1-3d8a-8d20-780a16f15284" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6909ee5e-c657-324c-8b03-f382fe5ab266" locEndPos="22" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="100" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/VSCodeIntegrate/timer.c" locStartln="108" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="073ccefe-469d-3a3f-8e13-9c562f051558" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="79abf0a6-12fb-369c-af67-64647191274a" locEndPos="26" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="108" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/VSCodeIntegrate/timer.c" locStartln="111" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="6fc403be-52a8-3023-806c-ee96fb629ad9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="cc61c551-4d99-3fe5-aa5c-626bd8b24756" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="111" goals="0,"/>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRAC2012-DIR_4_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="19b02d4d-1a43-3cd6-8917-23276e161e82" locEndPos="0" prio="Not Defined" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="f8271519-065b-39ee-ad1e-183cfd034310" risk="Undefined" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/VSCodeIntegrate/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/VSCodeIntegrate/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRAC2012-RULE_18_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="93512093" lang="cpp" violId="80692af3-8e15-3644-b8af-223698b8f4b0" locEndPos="0" prio="Not Defined" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="44e293e8-683f-3a9f-bd3c-fca2e8c600f4" risk="Undefined" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/VSCodeIntegrate/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/VSCodeIntegrate/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/VSCodeIntegrate/timer.c" locStartln="116" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_9-a" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="6e4b1880-9048-398b-8eb3-9dc8bbd39e66" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="6131fd3d-9caa-3336-9723-cca2bc4f1ff1" locEndPos="13" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="116" goals="0,"/>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/VSCodeIntegrate/timer.c" locStartln="116" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_11_9-b" lnHash="1747357394" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="671befb7-5e0f-38d3-b8c3-ab212307f990" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f386cd80-cd9f-3f55-8ed3-eecbc78de5fa" locEndPos="13" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="116" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/VSCodeIntegrate/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="d67aaf76-6043-311d-a69b-32a29e30e3b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="078e003a-a18c-3982-9f42-5a500678827e" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="123" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/VSCodeIntegrate/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="2d178071-a8e0-3923-ad3e-14c15e291200" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e36617ad-cfca-3c54-aaca-5327bdab7b43" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="123" goals="0,"/>
    <StdViol msg="The function 'format_timer_record' is referenced only in the translation unit where it is defined" ln="126" locFile="/VSCodeIntegrate/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1296456001" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1296456001" unbViolId="f13a1c34-a802-3cf4-934c-68fd2b2f480b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="d0c3c569-9b89-36ae-b05c-e5f75cd4e1b5" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/VSCodeIntegrate/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="1d4abc7c-7350-346e-8294-549d8308098a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="78d0d841-33e7-3f10-b72a-cf43c0250002" locEndPos="26" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="133" locFile="/VSCodeIntegrate/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-23883783" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="5ccd9798-bcf8-3193-b2c4-bcfb88f8964a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="23a7a377-0c96-3642-ac95-028b383d0552" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/VSCodeIntegrate/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="1eecba1b-032c-3db3-adb5-45fb560d5979" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="877c8242-c556-3f9a-b443-b6a44653b54e" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="133" locFile="/VSCodeIntegrate/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-23883783" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-23883783" unbViolId="9a97ce46-ef77-3336-8c36-6f0d8066f367" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="33010548-e651-30af-9c8f-31deaf9d25be" locEndPos="38" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Usage of 'strftime' function is not allowed" ln="134" locFile="/VSCodeIntegrate/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1644342585" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="3797e927-5a64-313d-95c5-807ab277aeba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7b9b64c2-226f-306f-9167-a29065455eb2" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/VSCodeIntegrate/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="6c04b5b7-c062-3036-8882-9baf1a9f043b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d65e2b07-fa52-3ca2-a7c1-84bc92319024" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="134" goals="0,"/>
    <StdViol msg="Usage of 'localtime' function is not allowed" ln="134" locFile="/VSCodeIntegrate/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_21_10-b" lnHash="-1644342585" rule.header="The time handling functions and macros of the library &lt;time.h> shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="8b3c7f66-051f-301c-9c7d-d1d3e7ab6f39" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f947445c-90c0-387c-8b91-f6fdb05e53ca" locEndPos="36" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="134" goals="0,"/>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="MISRAC2012-RULE_14_3-ac" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="ae0200d8-fa2c-3f92-ac10-6549057beac8" locEndPos="0" prio="Not Defined" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="0a902201-5847-3513-8cc5-ec2c84f1a512" risk="Undefined" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/VSCodeIntegrate/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/VSCodeIntegrate/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/VSCodeIntegrate/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Test of a value against zero should be made explicit" ln="136" locFile="/VSCodeIntegrate/timer.c" locStartln="136" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="130267201" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="130267201" unbViolId="af692b4b-e7c6-345e-8e77-b25000cd0989" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="9f3cc336-87df-358c-8359-ecc752aff2f1" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="136" goals="0,"/>
    <StdViol msg="The 'sprintf' library function should not be used" ln="137" locFile="/VSCodeIntegrate/timer.c" auth="syoung" rule="MISRAC2012-RULE_21_6-a" lnHash="201551585" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="914de32d-26f4-3d0b-ab5a-fffc556a5fcd" locEndPos="9" urgent="true" prio="Not Defined" locEndLn="137" goals="1," locStartln="137" sev="2" locRef="3" tool="c++test" lineHash="201551585" unbViolId="a87d8479-cb41-35b5-90ea-cc5174ef9a01" risk="Undefined" locType="sr" hash="-275311578"/>
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/VSCodeIntegrate/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="14c66e6d-9516-34ee-9715-fa0dbaeb8b31" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="199f2cbb-3843-3bfa-8e37-245acee72a58" locEndPos="9" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="137" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/VSCodeIntegrate/timer.c" locStartln="142" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_1_5-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="8349c06f-10d3-3f8c-886b-1198100a9117" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c05a16e4-c4a2-31cb-be28-754fdfc17ef2" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="142" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/VSCodeIntegrate/timer.c" locStartln="142" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="216a5a48-69b9-39ab-8cf2-4bc56cf23938" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b990ef44-c049-3ce3-bcf2-4f39e3f2bb7a" locEndPos="6" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="142" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/VSCodeIntegrate/timer.c" locStartln="145" sev="4" auth="syoung" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="b8c116c7-cdc9-3c19-acd9-d17783e88748" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2cc4fb7b-2022-3c1f-a212-a34f2bd6c85e" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="145" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/VSCodeIntegrate/timer.c" locStartln="146" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="3661c4b3-78ed-30bd-8402-c4eb223a776d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="33f579f0-c800-377d-a681-95590ede7d71" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="146" goals="0,"/>
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/VSCodeIntegrate/timer.c" locStartln="146" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="be7a1e0a-e6c9-3b19-9f96-6b7ec2e3f60f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="2ee5aa26-7662-3869-a211-6a0c10de25fb" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="146" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/VSCodeIntegrate/timer.c" locStartln="147" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="39ac3ef4-1060-3493-950e-b1aa2306e7e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="87d80772-0c54-3e04-b283-6ac9c9357d7a" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="147" goals="0,"/>
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/VSCodeIntegrate/timer.c" locStartln="147" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="c52257f3-5255-3a11-a4c6-8060f4b40e2d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="f77ba4ea-a701-351d-a363-83ae007f7691" locEndPos="18" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="147" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/VSCodeIntegrate/timer.c" locStartln="151" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="20657fe9-6fd8-3421-a25a-fc300fe9923b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="70ef763e-6e32-3a7c-b11a-d86287da789e" locEndPos="9" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="151" goals="0,"/>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/VSCodeIntegrate/timer.c" locStartln="153" sev="2" auth="syoung" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="e5648d1d-1f71-3900-a474-a892c6307de4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b68a8708-9f52-3aa8-ba21-32a5db56c0c4" locEndPos="5" locType="sr" prio="Not Defined" hash="-275311578" locEndLn="153" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/VSCodeIntegrate/stdinout.c" locStartln="16" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="0394b72e-7a54-38a2-ab10-4308c9a1ef11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="75288c20-1047-38dd-b44f-2c659012336e" locEndPos="1" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/VSCodeIntegrate/stdinout.c" locStartln="16" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_1_5-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="fbd987c4-1a03-3a44-a0db-1494687a17a1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e06406dd-7586-319b-a7e6-0cb08b325e1f" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/VSCodeIntegrate/stdinout.c" locStartln="16" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_8_2-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="8cb54f3e-3b69-383a-a2d2-32f23abd4878" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="251670e1-f586-3f8f-886b-5e540dd03199" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="16" goals="0,"/>
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/VSCodeIntegrate/stdinout.c" locStartln="18" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-RULE_2_8-c" lnHash="-695983806" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="-695983806" unbViolId="cf048141-50fe-385f-8843-5d10f95569cb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0e147880-d0ff-31c9-aecd-09eb2b342ee9" locEndPos="10" locType="sr" prio="Not Defined" hash="844867668" locEndLn="18" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/VSCodeIntegrate/stdinout.c" locStartln="19" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="5d03e25a-6bac-3126-b364-7c8230198403" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="0f7ae4b9-973a-3762-991b-802e702921a8" locEndPos="5" locType="sr" prio="Not Defined" hash="844867668" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/VSCodeIntegrate/stdinout.c" locStartln="35" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="ca047457-8e53-3823-9995-a9d4906407d2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="02bfca55-4445-34f5-82dd-a76b5046298b" locEndPos="12" locType="sr" prio="Not Defined" hash="844867668" locEndLn="35" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="46" locFile="/VSCodeIntegrate/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="1849933771" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="1849933771" unbViolId="753f256b-11a1-3fcf-893d-acc90fb65755" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="bfd24353-1012-329c-ba51-757f120035a9" locEndPos="13" locType="sr" prio="Not Defined" hash="844867668" locEndLn="46" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/VSCodeIntegrate/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="bac02e33-fbb6-347c-9831-6e9b5677ede5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="b0732bef-12ac-3612-a065-fec7db8328cd" locEndPos="1" locType="sr" prio="Not Defined" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/VSCodeIntegrate/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRAC2012-RULE_8_13-a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="7c367d0a-87d5-38cf-bd65-eae04ac90975" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="7cca3145-a2b0-3439-9a04-3380bedf83fa" locEndPos="24" locType="sr" prio="Not Defined" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="The 'printf' library function should not be used" ln="54" locFile="/VSCodeIntegrate/stdinout.c" locStartln="54" sev="2" auth="syoung" locRef="4" rule="MISRAC2012-RULE_21_6-a" lnHash="-206127679" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-206127679" unbViolId="816c7691-fea0-3fa4-80f3-2256089241e7" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="e3c3e3a7-d65c-364e-b4fb-145b562fe099" locEndPos="13" locType="sr" prio="Not Defined" hash="844867668" locEndLn="54" goals="0,"/>
    <StdViol msg="Do not use reserved identifiers : _consts_h_" ln="3" locFile="/VSCodeIntegrate/consts.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="-2108418455" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5e0057c-6a24-330c-87c3-ec03fa77ff04" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="5" tool="c++test" lineHash="-2108418455" unbViolId="53a8fb9c-ff1c-3cdc-9094-ecfdbf58906a" risk="Undefined" locType="sr" hash="1651539479"/>
    <StdViol msg="Do not use reserved identifiers : _input_h_" ln="3" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="554854633" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567eb962-128e-36d0-946c-631571f62019" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="6" tool="c++test" lineHash="554854633" unbViolId="c75f59e1-3017-361d-9863-78f8e9c2dc05" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="6" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-155000900" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882ad024-9608-3555-847f-3cd82f80bd57" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="4" locRef="6" tool="c++test" lineHash="-155000900" unbViolId="e4419465-65ff-3cbc-a38a-5a418809b887" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="6" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-155000900" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9992dc0-50d8-3dff-a2ec-4729a7bfd298" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="2" locRef="6" tool="c++test" lineHash="-155000900" unbViolId="43067d32-00de-3ffd-9df5-b66580b51f02" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="6" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-155000900" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9194ca98-a0d5-359d-afcb-9eaca49eb822" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="6" goals="1," locStartln="6" sev="2" locRef="6" tool="c++test" lineHash="-155000900" unbViolId="260083c5-8c26-348a-8766-255fe587c5e8" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1729353454" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74b438a9-4002-3e25-988b-162f843061a0" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="4" locRef="6" tool="c++test" lineHash="-1729353454" unbViolId="96465626-5d23-37f2-9c5c-6a6abcfac1d3" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Names shall be given for all the parameters in function 'print_string'" ln="9" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-a" lnHash="-1729353454" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd63017f-88c2-30ba-924a-ef5e49646a6f" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="2" locRef="6" tool="c++test" lineHash="-1729353454" unbViolId="7120b947-638d-3d8e-9398-c95d8d30ea16" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="12" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-1128300596" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="615569aa-db28-31ee-99d8-31b2f127f3d3" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="4" locRef="6" tool="c++test" lineHash="-1128300596" unbViolId="56a95840-cca1-376f-b793-67ff3fc4cb25" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'print_string_array' is not in prototype form" ln="12" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="-1128300596" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd68576d-7f0b-3b62-afc5-cd42d96bd538" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="6" tool="c++test" lineHash="-1128300596" unbViolId="24c46ddb-b72d-304b-9f24-6138a4217361" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="Function 'print_string_array' is not in prototype form" ln="12" locFile="/VSCodeIntegrate/inout.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="-1128300596" rule.header="Function types shall be in prototype form" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1060d18-4a55-3ed2-9445-fb8402cab782" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="6" tool="c++test" lineHash="-1128300596" unbViolId="2fabf9dd-b066-3eec-b843-5916ec8b5128" risk="Undefined" locType="sr" hash="-311681184"/>
    <StdViol msg="The 'print_string_array' function has no definition" ln="12" locFile="/VSCodeIntegrate/inout.h" locStartln="12" sev="2" auth="syoung" locRef="6" rule="MISRAC2012-RULE_8_6-b" lnHash="-1128300596" rule.header="An identifier with external linkage shall have external definition" tool="c++test" lineHash="-1128300596" unbViolId="7ac915c5-76b1-3776-9558-d414fbaec960" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" risk="Undefined" lang="cpp" violId="982dcc29-5a60-30fc-9d63-e184fe9c0ae9" locEndPos="5" locType="sr" prio="Not Defined" hash="-311681184" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use reserved identifiers : _clock_h_" ln="3" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="1162366501" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="981b9f77-9eb7-307c-a83e-21268fdc6cbd" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="7" tool="c++test" lineHash="1162366501" unbViolId="65d73d78-ca08-3edf-939f-a37f2e6fc12b" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_10-a" lnHash="-1042055562" rule.header="The standard header files &lt;time.h> or &lt;ctime> shall not be used" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="133fb67e-71c4-3603-8775-8bff226eed8f" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="5" goals="1," locStartln="5" sev="2" locRef="7" tool="c++test" lineHash="-1042055562" unbViolId="c9841515-6c8c-3733-82e4-233ca621854d" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="8" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_1_5-c" lnHash="957119588" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6cb97cd-76fb-39e7-bb95-470e270cfeab" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="8" goals="1," locStartln="8" sev="2" locRef="7" tool="c++test" lineHash="957119588" unbViolId="a8c14d09-5946-3ed5-9e24-c0de5fb78b4f" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Function 'display_time' is not in prototype form" ln="8" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_8_2-c" lnHash="957119588" rule.header="Function types shall be in prototype form" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41ccc3fb-ed62-3798-8bde-2d120f693e78" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="8" goals="1," locStartln="8" sev="2" locRef="7" tool="c++test" lineHash="957119588" unbViolId="5cdb06a7-bc7e-336a-9de0-8956d282ef0c" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Names shall be given for all the parameters in function 'set_time'" ln="11" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_8_2-a" lnHash="-701432954" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fd2fa97-a257-3cf0-8e15-4b97b4b261f4" locEndPos="6" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="7" tool="c++test" lineHash="-701432954" unbViolId="e5a26793-f409-39e8-b08e-9cdb942b3831" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/VSCodeIntegrate/clock.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="-701432954" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a92a3fa0-7b90-3186-bb37-525b0e287857" locEndPos="15" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="7" tool="c++test" lineHash="-701432954" unbViolId="23af3def-6484-33b8-86ab-d98ecdb0ab47" risk="Undefined" locType="sr" hash="-1204881763"/>
    <StdViol msg="Do not use reserved identifiers : _timer_h_" ln="3" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_1-a" lnHash="-1992342642" rule.header="Do not #define or #undef identifiers with names which start with underscore" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b7a1d4-02c3-3982-be40-928a92a9e5eb" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="3" goals="1," locStartln="3" sev="2" locRef="8" tool="c++test" lineHash="-1992342642" unbViolId="c187f637-ddd1-3cd6-847f-98ae8d64e6de" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="5" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-a" lnHash="-1042055562" rule.header="The standard header files &lt;time.h> or &lt;ctime> shall not be used" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3682b424-3ab4-3606-903f-5aafca04c7e8" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="5" goals="1," locStartln="5" sev="2" locRef="8" tool="c++test" lineHash="-1042055562" unbViolId="ad3f1e90-b612-343e-9626-fbf05864fb05" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Consider hiding the implementation of the structure 'timer_record' in a translation unit 'driver.c'" ln="9" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_8-a" lnHash="507216118" rule.header="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cc84cb1-2897-39f7-b2f2-1d8768be2725" locEndPos="8" urgent="true" prio="Not Defined" locEndLn="9" goals="1," locStartln="9" sev="4" locRef="8" tool="c++test" lineHash="507216118" unbViolId="e344f0b5-4443-3012-ade8-225256b67d2c" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="11" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="2125380426" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3c9c458-89c1-342c-ba74-4a6531c9718d" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="11" goals="1," locStartln="11" sev="2" locRef="8" tool="c++test" lineHash="2125380426" unbViolId="1ce1795a-18e4-34e6-b5a5-638e02cfa3b7" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The 'time_t' identifier should not be used" ln="12" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-RULE_21_10-c" lnHash="1676941809" rule.header="The types defined in the library &lt;time.h> shall not be used" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e90e2354-fbbe-31f5-90f6-63e96f780a5d" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="12" goals="1," locStartln="12" sev="2" locRef="8" tool="c++test" lineHash="1676941809" unbViolId="630c4245-e1bf-3d2b-8383-f997a3bb7624" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="The basic numerical type 'unsigned' should not be used" ln="13" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-391931805" rule.header="typedefs should be used in place of the basic types" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf19842a-75a9-3a82-84f6-74dee0caf687" locEndPos="5" urgent="true" prio="Not Defined" locEndLn="13" goals="1," locStartln="13" sev="4" locRef="8" tool="c++test" lineHash="-391931805" unbViolId="15039713-690b-3e9f-a571-e2fc8ebdae48" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="17" locFile="/VSCodeIntegrate/timer.h" locStartln="17" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="-571522376" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-571522376" unbViolId="a71dab43-e761-39f1-8c88-0b7a226d7a82" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d3893297-1681-3c23-a259-f3dfca7ece9c" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="17" goals="0,"/>
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="17" locFile="/VSCodeIntegrate/timer.h" locStartln="17" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="-571522376" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-571522376" unbViolId="5262eb0a-4ece-3bde-a720-973a1bb8ab24" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="c2727084-ed26-3f6b-91cc-267263a7d3d2" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="17" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="18" locFile="/VSCodeIntegrate/timer.h" locStartln="18" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="-750737473" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-750737473" unbViolId="c1922c38-8fa1-3573-9390-659ec8cadf17" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="cccdada6-a445-36fe-a6d0-745b6de147a7" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="18" locFile="/VSCodeIntegrate/timer.h" locStartln="18" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="-750737473" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-750737473" unbViolId="f9a30cbf-5de7-3b96-8505-0a540d485d67" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="4377ea1e-6b9b-37d3-9253-5000129b887b" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="18" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="21" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1408320612" rule.header="typedefs should be used in place of the basic types" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d4b2b94-e1bf-370a-acdc-4ecef1f3d1e4" locEndPos="1" urgent="true" prio="Not Defined" locEndLn="21" goals="1," locStartln="21" sev="4" locRef="8" tool="c++test" lineHash="1408320612" unbViolId="e4294976-2aac-30b4-8be3-34abde636c7e" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="21" locFile="/VSCodeIntegrate/timer.h" locStartln="21" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="1408320612" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408320612" unbViolId="618a8649-a4ef-39b2-bc18-9a0f20c975a6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5e850664-7a93-3a39-b876-8d279998ec08" locEndPos="5" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="21" goals="0,"/>
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="21" locFile="/VSCodeIntegrate/timer.h" locStartln="21" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="1408320612" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408320612" unbViolId="7e0a3061-7afb-3c00-8dea-60c68596fae6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="25a7f810-67ae-3568-a58b-80da3901ff70" locEndPos="5" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="21" goals="0,"/>
    <StdViol msg="Names shall be given for all the parameters in function 'add_timer_record'" ln="24" locFile="/VSCodeIntegrate/timer.h" locStartln="24" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="431182393" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="431182393" unbViolId="bebee565-c4db-341a-84ba-3856597c4151" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="135c5cf7-b3e2-39aa-a61a-a71da1bdcc93" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="24" goals="0,"/>
    <StdViol msg="Names shall be given for all the parameters in function 'delete_timer_record'" ln="27" locFile="/VSCodeIntegrate/timer.h" locStartln="27" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="1493922828" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="1493922828" unbViolId="18735df3-10a1-3cbe-957d-84937070990a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="5d940b29-eafb-3201-b638-87fcd102fa27" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="1493922828" rule.header="typedefs should be used in place of the basic types" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba2fac22-a3a0-3c41-ada2-e6424089bc40" locEndPos="26" urgent="true" prio="Not Defined" locEndLn="27" goals="1," locStartln="27" sev="4" locRef="8" tool="c++test" lineHash="1493922828" unbViolId="30d6ddd7-4f76-3125-b811-1d0a24441723" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Names shall be given for all the parameters in function 'format_timer_record'" ln="30" locFile="/VSCodeIntegrate/timer.h" locStartln="30" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-a" lnHash="-70128892" rule.header="Identifiers shall be given for all of the parameters in a function prototype declaration" tool="c++test" lineHash="-70128892" unbViolId="21e682a6-3c15-3393-a2d2-43c1ca53cc4c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="d486fe5c-a890-3667-8ef3-6bb5963670ac" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/VSCodeIntegrate/timer.h" auth="syoung" rule="MISRAC2012-DIR_4_6-b" lnHash="-70128892" rule.header="typedefs should be used in place of the basic types" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="621c01ee-bdc6-3b9f-ade6-fe101d2d023f" locEndPos="26" urgent="true" prio="Not Defined" locEndLn="30" goals="1," locStartln="30" sev="4" locRef="8" tool="c++test" lineHash="-70128892" unbViolId="5165d853-f46e-309e-9b49-8f9e5454e523" risk="Undefined" locType="sr" hash="-311568100"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="33" locFile="/VSCodeIntegrate/timer.h" locStartln="33" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_1_5-c" lnHash="706074743" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="706074743" unbViolId="40de2c7e-6227-3adf-86f1-56464a179201" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="10b11667-7b0e-3b6d-9019-5311e02e2b96" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="33" goals="0,"/>
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="33" locFile="/VSCodeIntegrate/timer.h" locStartln="33" sev="2" auth="syoung" locRef="8" rule="MISRAC2012-RULE_8_2-c" lnHash="706074743" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="706074743" unbViolId="ecd8444c-b7db-3dda-bb52-1801092667b1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" risk="Undefined" lang="cpp" violId="925ee225-d74d-32ac-b84c-a6303e760b79" locEndPos="6" locType="sr" prio="Not Defined" hash="-311568100" locEndLn="33" goals="0,"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="203">
            <Project id="VSCodeIntegrate" name="VSCodeIntegrate" supp="0" total="203">
               <Res loc="/VSCodeIntegrate/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="10"/>
               <Res loc="/VSCodeIntegrate/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="58"/>
               <Res loc="/VSCodeIntegrate/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="88"/>
               <Res loc="/VSCodeIntegrate/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="10"/>
               <Res loc="/VSCodeIntegrate/consts.h" locRef="5" locType="sr" name="consts.h" supp="0" total="1"/>
               <Res loc="/VSCodeIntegrate/inout.h" locRef="6" locType="sr" name="inout.h" supp="0" total="10"/>
               <Res loc="/VSCodeIntegrate/clock.h" locRef="7" locType="sr" name="clock.h" supp="0" total="6"/>
               <Res loc="/VSCodeIntegrate/timer.h" locRef="8" locType="sr" name="timer.h" supp="0" total="20"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>