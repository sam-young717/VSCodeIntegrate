<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="2025-04-03" climode="true" endTime="2025-04-03T11:27:52-04:00" execEnv="linux_x86_64" hasViols="true" id="1742325476516" lang="en" machine="syoung-pc" prjModule="VSCodeIntegrate" project="" tag="${scontrol_branch}-linux_x86_64" time="2025-04-03T11:27:35-04:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="syoung">
   <TestConfig machine="syoung-pc" name="MISRA C++ 2023" pseudoUrl="builtin://MISRA C++ 2023" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
      <History>
         <Graph id="gls">
            <Categories>
               <Category color="red" name="Total" pos="0"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Tasks" yTitle2="Total Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,</X>
               <Y>50,50,50,50,</Y>
               <Delta>0,</Delta>
            </Total>
         </Graph>
      </History>
   
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="syoung" hash="-249486341" locRef="1" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.c" totLns="30" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.c"/>
         <Loc auth="syoung" hash="65740504" locRef="2" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="driver.c" totLns="76" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/driver.c"/>
         <Loc auth="syoung" hash="-275311578" locRef="3" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.c" totLns="155" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.c"/>
         <Loc auth="syoung" hash="844867668" locRef="4" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="stdinout.c" totLns="55" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/stdinout.c"/>
         <Loc auth="syoung" hash="1651539479" locRef="5" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="consts.h" totLns="9" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/consts.h"/>
         <Loc auth="syoung" hash="-311681184" locRef="6" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="inout.h" totLns="15" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/inout.h"/>
         <Loc auth="syoung" hash="-1204881763" locRef="7" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="clock.h" totLns="14" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/clock.h"/>
         <Loc auth="syoung" hash="-311568100" locRef="8" projId="VSCodeIntegrate" projPath="/VSCodeIntegrate" project="VSCodeIntegrate" resProjPath="timer.h" totLns="36" uri="file:/mnt/c/Users/syoung/Documents/RepoLinux/VSCodeIntegrate/timer.h"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:13">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="390" id="VSCodeIntegrate" name="VSCodeIntegrate" qfixErrs="0" suppErrs="0" totErrs="95" totFiles="8" totLns="390"/>
      </Projects>
      
      <History>
         <Graph id="lns">
            <Categories>
               <Category color="blue" name="Total Lines" pos="0"/>
               <Category color="green" name="Checked Lines" pos="1"/>
               <Category authPos="0" color="red" name="Tasks" pos="2"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Lines" yTitle2="Tasks">
               <X>03-20-25,03-24-25,03-31-25,04-03-25,</X>
               <Y>390,390,390,390,390,390,390,390,167,167,167,95,</Y>
               <Delta>0,0,-72,</Delta>
            </Total>
            <Authors title="" xTitle="Date" yTitle="Total Tasks">
               <Author name="syoung">
                  <X>03-20-25,03-24-25,03-31-25,04-03-25,</X>
                  <Y>167,167,167,95,</Y>
                  <Delta>-72,</Delta>
               </Author>
            </Authors>
         </Graph>
      </History>
   
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="MISRA C++ 2023" name="MISRACPP2023" rules="273" total="0">
               <Category authTot="1;" authUrg="0;" desc="Rule 4.1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRACPP2023-4_1_3" rules="4" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1.2 (Advisory) Deprecated features should not be used" name="MISRACPP2023-4_1_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.1 (Advisory) The goto statement should not be used" name="MISRACPP2023-9_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.3 (Required) The goto statement shall jump to a label declared later in the function body" name="MISRACPP2023-9_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.3.1 (Required) Predicates shall not have persistent side effects" name="MISRACPP2023-28_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.2 (Required) A goto statement shall reference a label in a surrounding block" name="MISRACPP2023-9_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.5 (Required) A function with non-void return type shall return a value on all paths" name="MISRACPP2023-9_6_5" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="Rule 5.10.1 (Required) User-defined identifiers shall have an appropriate form" name="MISRACPP2023-5_10_1" rules="7" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.4 (Required) A function declared with the [[noreturn]] attribute shall not return" name="MISRACPP2023-9_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.2.3 (Advisory) Types with limited visibility should be used at least once" name="MISRACPP2023-0_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.2.4 (Advisory) Functions with limited visibility should be used at least once" name="MISRACPP2023-0_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4.1 (Required) The literal value zero shall be the only value assigned to errno" name="MISRACPP2023-22_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2.1 (Required) An explicit type conversion shall not be an expression statement" name="MISRACPP2023-9_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3.2 (Advisory) The declaration of an object should contain no more than two levels of pointer indirection" name="MISRACPP2023-11_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3.1 (Advisory) Variables of array type should not be declared" name="MISRACPP2023-11_3_1" rules="1" total="0"/>
               <Category authTot="5;" authUrg="1;" desc="Rule 0.2.1 (Advisory) Variables with limited visibility should be used at least once" name="MISRACPP2023-0_2_1" rules="2" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.2 (Required) An exception of class type shall be caught by const reference or reference" name="MISRACPP2023-18_3_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 0.2.2 (Required) A named function parameter shall be used at least once" name="MISRACPP2023-0_2_2" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.1 (Advisory) There should be at least one exception handler to catch all otherwise unhandled exceptions" name="MISRACPP2023-18_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.3 (Required) Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases" name="MISRACPP2023-18_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1.2 (Required) The volatile qualifier shall be used appropriately" name="MISRACPP2023-10_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.3 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation" name="MISRACPP2023-19_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.20.1 (Advisory) An unsigned arithmetic operation with constant operands should not wrap" name="MISRACPP2023-8_20_1" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 10.1.1 (Advisory) The target type of a pointer or lvalue reference parameter should be const-qualified appropriately" name="MISRACPP2023-10_1_1" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.2 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRACPP2023-19_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.1 (Required) The defined preprocessor operator shall be used appropriately" name="MISRACPP2023-19_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.0.1 (Advisory) Parentheses should be used to make the meaning of an expression appropriately explicit" name="MISRACPP2023-8_0_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 30.0.2 (Required) Reads and writes on the same file stream shall be separated by a positioning operation" name="MISRACPP2023-30_0_2" rules="1" total="0"/>
               <Category authTot="22;" authUrg="10;" desc="Rule 6.9.2 (Advisory) The names of the standard signed integer types and standard unsigned integer types should not be used" name="MISRACPP2023-6_9_2" rules="1" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.9.1 (Required) The same type aliases shall be used in all declarations of the same entity" name="MISRACPP2023-6_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.5.2 (Advisory) Internal linkage should be specified appropriately" name="MISRACPP2023-6_5_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 5.7.2 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRACPP2023-5_7_2" rules="1" total="0"/>
               <Category authTot="4;" authUrg="2;" desc="Rule 6.5.1 (Advisory) A function or object with external linkage should be introduced in a header file" name="MISRACPP2023-6_5_1" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7.1 (Required) The character sequence /* shall not be used within a C-style comment" name="MISRACPP2023-5_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7.3 (Required) Line-splicing shall not be used in // comments" name="MISRACPP2023-5_7_3" rules="1" total="0"/>
               <Category authTot="7;" authUrg="5;" desc="Rule 30.0.1 (Required) The C Library input/output functions shall not be used" name="MISRACPP2023-30_0_1" rules="2" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.11 (Required) An argument passed via ellipsis shall have an appropriate type" name="MISRACPP2023-8_2_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.10 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRACPP2023-8_2_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.1 (Required) The features of &lt;cstdarg> shall not be used" name="MISRACPP2023-21_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.1 (Required) The argument to std::move shall be a non-const lvalue" name="MISRACPP2023-28_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.2 (Required) The standard header file &lt;csetjmp> shall not be used" name="MISRACPP2023-21_10_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.2 (Required) Forwarding references and std::forward shall be used together" name="MISRACPP2023-28_6_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5.2 (Required) A for-range-initializer shall contain at most one function call" name="MISRACPP2023-9_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.18.1 (Mandatory) An object or subobject must not be copied to an overlapping object" name="MISRACPP2023-8_18_1" rules="3" total="0"/>
               <Category authTot="3;" authUrg="3;" desc="Rule 9.5.1 (Advisory) Legacy for statements should be simple" name="MISRACPP2023-9_5_1" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.5 (Required) A class shall only define an initializer-list constructor when it is the only constructor" name="MISRACPP2023-15_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.4 (Advisory) All direct, non-static data members of a class should be initialized before the class object is accessible" name="MISRACPP2023-15_1_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.6.1 (Required) Operations on a memory location shall be sequenced appropriately" name="MISRACPP2023-4_6_1" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.3 (Required) Conversion operators and constructors that are callable with a single argument shall be explicit" name="MISRACPP2023-15_1_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.3 (Required) The facilities provided by the standard header file &lt;csignal> shall not be used" name="MISRACPP2023-21_10_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.2 (Advisory) All constructors of a class should explicitly initialize all of its virtual base classes and immediate base classes" name="MISRACPP2023-15_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14.1 (Advisory) The right-hand operand of a logical &amp;&amp; or || operator should not contain persistent side effects" name="MISRACPP2023-8_14_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 24.5.2 (Required) The C++ Standard Library functions memcpy, memmove and memcmp from &lt;cstring> shall not be used" name="MISRACPP2023-24_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.18.2 (Advisory) The result of an assignment operator should not be used" name="MISRACPP2023-8_18_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.3 (Required) An object shall not be used while in a potentially moved-from state" name="MISRACPP2023-28_6_3" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 24.5.1 (Required) The character handling functions from &lt;cctype> and &lt;cwctype> shall not be used" name="MISRACPP2023-24_5_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.4 (Required) The result of std::remove, std::remove_if, std::unique and empty shall be used" name="MISRACPP2023-28_6_4" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 8.7.1 (Required) Pointer arithmetic shall not form an invalid pointer" name="MISRACPP2023-8_7_1" rules="5" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3.2 (Advisory) The built-in unary + operator should not be used" name="MISRACPP2023-8_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.1.2 (Required) The value returned by a function shall be used" name="MISRACPP2023-0_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4.1 (Required) Exception-unfriendly functions shall be noexcept" name="MISRACPP2023-18_4_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.1.1 (Advisory) A value should not be unnecessarily written to a local object" name="MISRACPP2023-0_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.6.1 (Advisory) The #pragma directive and the _Pragma operator should not be used" name="MISRACPP2023-19_6_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRACPP2023-8_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.1 (Required) An object's dynamic type shall not be used from within its constructor or destructor" name="MISRACPP2023-15_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.3 (Required) The ' or &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRACPP2023-19_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2.1 (Required) An enumeration shall be defined with an explicit underlying type" name="MISRACPP2023-10_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.2 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRACPP2023-19_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.1 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRACPP2023-19_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2.3 (Required) The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" name="MISRACPP2023-10_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3.1 (Advisory) The built-in unary - operator should not be applied to an expression of unsigned type" name="MISRACPP2023-8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2.2 (Advisory) Unscoped enumerations should not be declared" name="MISRACPP2023-10_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3.1 (Required) The union keyword shall not be used" name="MISRACPP2023-12_3_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6.2 (Required) Dynamic memory shall be managed automatically" name="MISRACPP2023-21_6_2" rules="3" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.3 (Required) Advanced memory management shall not be used" name="MISRACPP2023-21_6_3" rules="4" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 7.0.6 (Required) Assignment between numeric types shall be appropriate" name="MISRACPP2023-7_0_6" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.4 (Required) If a project defines either a sized or unsized version of a global operator delete, then both shall be defined" name="MISRACPP2023-21_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.5 (Required) A pointer to an incomplete class type shall not be deleted" name="MISRACPP2023-21_6_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 7.0.3 (Required) The numerical value of a character shall not be used" name="MISRACPP2023-7_0_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.2 (Required) There shall be no conversion to type bool" name="MISRACPP2023-7_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.5 (Required) Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" name="MISRACPP2023-7_0_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.4 (Required) The operands of bitwise operators and shift operators shall be appropriate" name="MISRACPP2023-7_0_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.1 (Required) There shall be no conversion from type bool" name="MISRACPP2023-7_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.0.1 (Advisory) Trigraph-like sequences should not be used" name="MISRACPP2023-5_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1.2 (Required) An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="MISRACPP2023-13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1.1 (Advisory) Classes should not be inherited virtually" name="MISRACPP2023-13_1_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 21.2.1 (Required) The library functions atof, atoi, atol and atoll from &lt;cstdlib> shall not be used" name="MISRACPP2023-21_2_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.4 (Required) A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" name="MISRACPP2023-6_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.3 (Required) The source code used to implement an entity shall appear only once" name="MISRACPP2023-6_2_3" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.2 (Required) All declarations of a variable or function shall have the same type" name="MISRACPP2023-6_2_2" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6.1 (Advisory) Dynamic memory should not be used" name="MISRACPP2023-21_6_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.1 (Required) The one-definition rule shall not be violated" name="MISRACPP2023-6_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.4 (Required) The macro offsetof shall not be used" name="MISRACPP2023-21_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.3 (Required) The library function system from &lt;cstdlib> shall not be used" name="MISRACPP2023-21_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.2 (Required) The string handling functions from &lt;cstring>, &lt;cstdlib>, &lt;cwchar> and &lt;cinttypes> shall not be used" name="MISRACPP2023-21_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4.1 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRACPP2023-9_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 15.8.1 (Required) User-provided copy assignment operators and move assignment operators shall handle self-assignment" name="MISRACPP2023-15_8_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4.2 (Required) The structure of a switch statement shall be appropriate" name="MISRACPP2023-9_4_2" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.19.1 (Advisory) The comma operator should not be used" name="MISRACPP2023-8_19_1" rules="1" total="0"/>
               <Category authTot="3;" authUrg="1;" desc="Rule 8.2.6 (Required) An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type" name="MISRACPP2023-8_2_6" rules="2" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.5 (Required) reinterpret_cast shall not be used" name="MISRACPP2023-8_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1.2 (Required) An empty throw shall only occur within the compound-statement of a catch handler" name="MISRACPP2023-18_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.4 (Required) Casts shall not be performed between a pointer to function and any other type" name="MISRACPP2023-8_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1.1 (Required) An exception object shall not have pointer type" name="MISRACPP2023-18_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.3 (Required) A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference" name="MISRACPP2023-8_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.9 (Required) The operand to typeid shall not be an expression of polymorphic class type" name="MISRACPP2023-8_2_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.0.1 (Required) A function shall not contain unreachable statements" name="MISRACPP2023-0_0_1" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5.2 (Advisory) Program-terminating functions should not be used" name="MISRACPP2023-18_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.5 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRACPP2023-19_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.8 (Required) An object pointer type shall not be cast to an integral type other than std::uintptr_t or std::intptr_t" name="MISRACPP2023-8_2_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 0.0.2 (Advisory) Controlling expressions should not be invariant" name="MISRACPP2023-0_0_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5.1 (Advisory) A noexcept function should not attempt to propagate an exception to the calling function" name="MISRACPP2023-18_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.4 (Required) Parentheses shall be used to ensure macro arguments are expanded appropriately" name="MISRACPP2023-19_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.7 (Advisory) A cast should not convert a pointer type to an integral type" name="MISRACPP2023-8_2_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.0.2 (Advisory) User-provided copy and move member functions of a class should have appropriate signatures" name="MISRACPP2023-15_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.3 (Required) The argument to a mixed-use macro parameter shall not be subject to further expansion" name="MISRACPP2023-19_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.0.1 (Required) Special member functions shall be provided appropriately" name="MISRACPP2023-15_0_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.2 (Required) A macro parameter immediately following a # operator shall not be immediately followed by a ## operator" name="MISRACPP2023-19_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.1 (Advisory) The # and ## preprocessor operators should not be used" name="MISRACPP2023-19_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.2 (Required) C-style casts and functional notation casts shall not be used" name="MISRACPP2023-8_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3.1 (Advisory) There should be no unnamed namespaces in header files" name="MISRACPP2023-10_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.1 (Required) A virtual base class shall only be cast to a derived class by means of dynamic_cast" name="MISRACPP2023-8_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.1 (Advisory) Bit-fields should not be declared" name="MISRACPP2023-12_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.3 (Required) A named bit-field with signed integer type shall not have a length of one bit" name="MISRACPP2023-12_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.2 (Required) A bit-field shall have an appropriate type" name="MISRACPP2023-12_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5.2 (Required) The address-of operator shall not be overloaded" name="MISRACPP2023-16_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5.1 (Required) The logical AND and logical OR operators shall not be overloaded" name="MISRACPP2023-16_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.7.2 (Required) Global variables shall not be used" name="MISRACPP2023-6_7_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 6.7.1 (Required) Local variables shall not have static storage duration" name="MISRACPP2023-6_7_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.11.1 (Advisory) The raw pointer constructors of std::shared_ptr and std::unique_ptr should not be used" name="MISRACPP2023-23_11_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.1 (Required) Within character literals and non raw-string literals, \ shall only be used to form a defined escape sequence or universal character name" name="MISRACPP2023-5_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3.1 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRACPP2023-9_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.3 (Required) Octal constants shall not be used" name="MISRACPP2023-5_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.2 (Required) Octal escape sequences, hexadecimal escape sequences and universal character names shall be terminated" name="MISRACPP2023-5_13_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1.1 (Advisory) Non-static data members should be either all private or all public" name="MISRACPP2023-14_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 0.3.2 (Required) A function call shall not violate the function's preconditions" name="MISRACPP2023-0_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.5 (Required) The lowercase form of &quot;L&quot; shall not be used as the first character in a literal suffix" name="MISRACPP2023-5_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6.3 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRACPP2023-11_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.4 (Required) Unsigned integer literals shall be appropriately suffixed" name="MISRACPP2023-5_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6.2 (Mandatory) The value of an object must not be read before it has been set" name="MISRACPP2023-11_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.7 (Required) String literals with different encoding prefixes shall not be concatenated" name="MISRACPP2023-5_13_7" rules="2" total="0"/>
               <Category authTot="19;" authUrg="13;" desc="Rule 11.6.1 (Advisory) All variables should be initialized" name="MISRACPP2023-11_6_1" rules="1" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3.1 (Required) The assert macro shall not be used with a constant-expression" name="MISRACPP2023-22_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.6 (Required) An integer-literal of type long long shall not use a single L or l in any suffix" name="MISRACPP2023-5_13_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 0.3.1 (Advisory) Floating-point arithmetic should be used appropriately" name="MISRACPP2023-0_3_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9.1 (Required) The built-in relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type, except where they point to elements of the same array" name="MISRACPP2023-8_9_1" rules="1" total="0"/>
               <Category authTot="4;" authUrg="1;" desc="Rule 10.0.1 (Advisory) A declaration should not declare more than one variable or member variable" name="MISRACPP2023-10_0_1" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.4 (Advisory) #undef should only be used for macros defined previously in the same file" name="MISRACPP2023-19_0_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.3 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRACPP2023-19_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4.1 (Required) The asm declaration shall not be used" name="MISRACPP2023-10_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.2 (Required) Function-like macros shall not be defined" name="MISRACPP2023-19_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.1 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRACPP2023-19_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1.2 (Advisory) Variables should be captured explicitly in a non-transient lambda" name="MISRACPP2023-8_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1.1 (Required) A non-transient lambda shall not implicitly capture this" name="MISRACPP2023-8_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.4 (Required) A comparison of a potentially virtual pointer to member function shall only be with nullptr" name="MISRACPP2023-13_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.3 (Required) The parameters in all declarations or overrides of a function shall either be unnamed or have identical names" name="MISRACPP2023-13_3_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.2 (Required) Parameters in an overriding virtual function shall not specify different default arguments" name="MISRACPP2023-13_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8.1 (Required) Function templates shall not be explicitly specialized" name="MISRACPP2023-17_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 26.3.1 (Advisory) std::vector should not be specialized with bool" name="MISRACPP2023-26_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.11.3 (Required) A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" name="MISRACPP2023-7_11_3" rules="1" total="0"/>
               <Category authTot="10;" authUrg="3;" desc="Rule 7.11.2 (Required) An array passed as a function argument shall not decay to a pointer" name="MISRACPP2023-7_11_2" rules="2" total="10"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.11.1 (Required) nullptr shall be the only form of the null-pointer-constant" name="MISRACPP2023-7_11_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6.1 (Advisory) Symmetrical operators should only be implemented as non-member functions" name="MISRACPP2023-16_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.4 (Advisory) Member functions returning references to their object should be ref-qualified appropriately" name="MISRACPP2023-6_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.3 (Required) An assignment operator shall not assign the address of an object with automatic storage duration to an object with a greater lifetime" name="MISRACPP2023-6_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.1 (Required) User-declared member functions shall use the virtual, override and final specifiers appropriately" name="MISRACPP2023-13_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.2 (Mandatory) A function must not return a reference or a pointer to a local variable with automatic storage duration" name="MISRACPP2023-6_8_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.1 (Required) An object shall not be accessed outside of its lifetime" name="MISRACPP2023-6_8_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.3 (Required) A name that is present in a dependent base shall not be resolved by unqualified lookup" name="MISRACPP2023-6_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.3 (Mandatory) The pointer returned by the C++ Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror must not be used following a subsequent call to the same function" name="MISRACPP2023-25_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.2 (Required) Derived classes shall not conceal functions that are inherited from their bases" name="MISRACPP2023-6_4_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.1 (Required) A variable declared in an inner scope shall not hide a variable declared in an outer scope" name="MISRACPP2023-6_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.4 (Required) The identifier main shall not be used for a function other than the global function main" name="MISRACPP2023-6_0_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.3 (Advisory) The only declarations in the global namespace should be main, namespace declarations and extern &quot;C&quot; declarations" name="MISRACPP2023-6_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.2 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRACPP2023-6_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.1 (Required) Block scope declarations shall not be visually ambiguous" name="MISRACPP2023-6_0_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.1 (Required) The setlocale and std::locale::global functions shall not be called" name="MISRACPP2023-25_5_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.2 (Mandatory) The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type" name="MISRACPP2023-25_5_2" rules="3" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRACPP2023-0_0_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRACPP2023-0_0_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRACPP2023-0_0_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in switch statement" id="MISRACPP2023-0_0_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in 'for' loop" id="MISRACPP2023-0_0_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRACPP2023-0_0_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRACPP2023-0_0_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRACPP2023-0_0_1-h" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="MISRACPP2023-0_0_1-i" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="A 'try' statement of a 'try-block' should contain a potentially-throwing statement" id="MISRACPP2023-0_0_1-j" origId="EXCEPT-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRACPP2023-0_0_2" desc="Avoid conditions that always evaluate to the same value" id="MISRACPP2023-0_0_2-a" origId="BD-PB-CC" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_1_1" desc="Avoid unused values" id="MISRACPP2023-0_1_1-a" origId="BD-PB-VOVR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRACPP2023-0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="1;" cat="MISRACPP2023-0_2_1" desc="A project should not contain unused local variables" id="MISRACPP2023-0_2_1-a" origId="OPT-02" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_1" desc="A project should not contain unused variables with internal linkage" id="MISRACPP2023-0_2_1-b" origId="OPT-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-0_2_2" desc="Eliminate unused parameters" id="MISRACPP2023-0_2_2-a" origId="OPT-03" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_2" desc="There shall be no unused named parameters in virtual functions" id="MISRACPP2023-0_2_2-b" origId="OPT-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_3" desc="Types declared in an unnamed namespace scope should be used at least once" id="MISRACPP2023-0_2_3-a" origId="OPT-46" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_3" desc="Types declared in a block scope should be used at least once" id="MISRACPP2023-0_2_3-b" origId="OPT-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_4" desc="Avoid unreachable methods" id="MISRACPP2023-0_2_4-a" origId="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use object representations to compare floating-point values" id="MISRACPP2023-0_3_1-a" origId="CODSTA-190" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRACPP2023-0_3_1-b" origId="CODSTA-225" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use floating point variables as loop counters" id="MISRACPP2023-0_3_1-c" origId="MISRA-065" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRACPP2023-0_3_1-d" origId="BD-PB-NANINF" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_2" desc="Do not pass incorrect values to library functions" id="MISRACPP2023-0_3_2-a" origId="BD-API-BADPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="MISRACPP2023-10_0_1" desc="Each variable should be declared in a separate declaration statement" id="MISRACPP2023-10_0_1-a" origId="FORMAT-33" sev="4" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-10_1_1" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-a" origId="MISRA2004-16_7" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_1" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_1" desc="Declare reference parameters as const references whenever possible" id="MISRACPP2023-10_1_1-c" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_2" desc="The volatile qualifier shall be used appropriately" id="MISRACPP2023-10_1_2-a" origId="CODSTA-306" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_1" desc="An enumeration shall be defined with an explicit underlying type" id="MISRACPP2023-10_2_1-a" origId="CODSTA-CPP-202" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_1" desc="An explicit or implicit enumerator value shall not be the result of a narrowing conversion" id="MISRACPP2023-10_2_1-b" origId="CODSTA-CPP-203" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_2" desc="Unscoped enumerations should not be declared" id="MISRACPP2023-10_2_2-a" origId="CODSTA-MCPP-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_3" desc="The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" id="MISRACPP2023-10_2_3-a" origId="CODSTA-313" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_3_1" desc="There shall be no unnamed namespaces in header files" id="MISRACPP2023-10_3_1-a" origId="CODSTA-CPP-74" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_4_1" desc="The 'asm' declaration should not be used" id="MISRACPP2023-10_4_1-a" origId="CODSTA-234" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_3_1" desc="C-style arrays shall not be used" id="MISRACPP2023-11_3_1-a" origId="STL-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_3_2" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRACPP2023-11_3_2-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="13;" cat="MISRACPP2023-11_6_1" desc="All non-class variables with automatic storage duration should be explicitly initialized" id="MISRACPP2023-11_6_1-a" origId="INIT-101" sev="4" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_6_2" desc="Avoid use before initialization" id="MISRACPP2023-11_6_2-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_6_3" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRACPP2023-11_6_3-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_1" desc="Do not declare member variables as bit-fields" id="MISRACPP2023-12_2_1-a" origId="CODSTA-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_2" desc="A bit-field shall have an appropriate type" id="MISRACPP2023-12_2_2-a" origId="CODSTA-304" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_2" desc="All enumeration values should be representable within the width of the bit-field" id="MISRACPP2023-12_2_2-b" origId="CODSTA-305" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_3" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRACPP2023-12_2_3-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_3_1" desc="The union keyword should not be used" id="MISRACPP2023-12_3_1-a" origId="CODSTA-111" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_1_1" desc="Classes should not be derived from virtual bases" id="MISRACPP2023-13_1_1-a" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_1_2" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRACPP2023-13_1_2-a" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="MISRACPP2023-13_3_1-a" origId="CODSTA-MCPP-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="MISRACPP2023-13_3_1-b" origId="CODSTA-MCPP-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_2" desc="Parameters in an overriding virtual function shall not specify different default arguments" id="MISRACPP2023-13_3_2-a" origId="CODSTA-CPP-210" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRACPP2023-13_3_3-a" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_3" desc="The parameters in all overrides of a function should either be unnamed or have identical names" id="MISRACPP2023-13_3_3-b" origId="NAMING-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_4" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="MISRACPP2023-13_3_4-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-14_1_1" desc="Non-static data members should be either all private or all public" id="MISRACPP2023-14_1_1-a" origId="CODSTA-CPP-201" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_0_1" desc="Special member functions shall be provided appropriately" id="MISRACPP2023-15_0_1-a" origId="CODSTA-MCPP-105" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_0_1" desc="Destructor shall have a non-empty body" id="MISRACPP2023-15_0_1-b" origId="OPT-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_0_2" desc="User-provided copy and move member functions of a class should have appropriate signatures" id="MISRACPP2023-15_0_2-a" origId="CODSTA-CPP-205" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under construction" id="MISRACPP2023-15_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under destruction" id="MISRACPP2023-15_1_1-b" origId="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_2" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRACPP2023-15_1_2-a" origId="PB-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_3" desc="Constructors allowing for conversion should be made explicit" id="MISRACPP2023-15_1_3-a" origId="CODSTA-CPP-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_3" desc="User-conversion cast operators should be made explicit" id="MISRACPP2023-15_1_3-b" origId="CODSTA-MCPP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of a non-aggregate class should be initialized at the top of a constructor body" id="MISRACPP2023-15_1_4-a" origId="INIT-19" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of an aggregate class should be initialized as soon as the object is created" id="MISRACPP2023-15_1_4-b" origId="INIT-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_5" desc="A class shall only define an initializer-list constructor when it is the only constructor" id="MISRACPP2023-15_1_5-a" origId="CODSTA-MCPP-47_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_8_1" desc="User-provided copy assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-a" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_8_1" desc="User-provided move assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-b" origId="OOP-34_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_5_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="MISRACPP2023-16_5_1-a" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_5_2" desc="The unary &amp; operator shall not be overloaded" id="MISRACPP2023-16_5_2-a" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_6_1" desc="Symmetrical operators should only be implemented as non-member functions" id="MISRACPP2023-16_6_1-a" origId="CODSTA-CPP-20_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-17_8_1" desc="Function templates shall not be explicitly specialized" id="MISRACPP2023-17_8_1-a" origId="TEMPL-09_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_1_1" desc="An exception object should not have pointer type" id="MISRACPP2023-18_1_1-a" origId="EXCEPT-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_1_2" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="MISRACPP2023-18_1_2-a" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_1" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRACPP2023-18_3_1-a" origId="EXCEPT-06" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_2" desc="A class type exception shall always be caught by reference" id="MISRACPP2023-18_3_2-a" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="MISRACPP2023-18_3_3-a" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_4_1" desc="Exception-unfriendly functions shall be noexcept" id="MISRACPP2023-18_4_1-a" origId="CODSTA-CPP-208" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_4_1" desc="Functions used as initializers of non-constexpr, non-local variables shall be noexcept" id="MISRACPP2023-18_4_1-b" origId="CODSTA-CPP-209" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_4_1" desc="Pass only 'noexcept' functions to exception-unfriendly functions" id="MISRACPP2023-18_4_1-c" origId="CODSTA-CPP-213" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_1" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRACPP2023-18_5_1-a" origId="BD-PB-NOEXCEPT" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-a" origId="PB-75" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-b" origId="PB-75_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-c" origId="PB-75_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'terminate' function should not be used" id="MISRACPP2023-18_5_2-d" origId="PB-75_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_1" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRACPP2023-19_0_1-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_2" desc="Function-like macros shall not be defined" id="MISRACPP2023-19_0_2-a" origId="PREPROC-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_3" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRACPP2023-19_0_3-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_4" desc="#undef should only be used for macros defined previously in the same file" id="MISRACPP2023-19_0_4-a" origId="PREPROC-25_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRACPP2023-19_1_1-a" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRACPP2023-19_1_2-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_3" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRACPP2023-19_1_3-a" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_1" desc="Use unique multiple include guards" id="MISRACPP2023-19_2_1-b" origId="PFO-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_2" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRACPP2023-19_2_2-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_3" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRACPP2023-19_2_3-a" origId="MISRA2004-19_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_1" desc="The # and ## preprocessor operators should not be used" id="MISRACPP2023-19_3_1-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_2" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRACPP2023-19_3_2-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_3" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRACPP2023-19_3_3-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_4" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRACPP2023-19_3_4-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRACPP2023-19_3_5-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_6_1" desc="The #pragma directive shall not be used" id="MISRACPP2023-19_6_1-a" origId="PREPROC-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_6_1" desc="The '_Pragma' operator should not be used" id="MISRACPP2023-19_6_1-b" origId="PREPROC-23_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRACPP2023-21_10_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_2" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRACPP2023-21_10_2-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_2" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRACPP2023-21_10_2-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_3" desc="The signal handling facilities of &lt;signal.h>, except for a call to the 'signal()' function with a value of SIG_IGN, shall not be used" id="MISRACPP2023-21_10_3-a" origId="CODSTA-244" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-21_2_1" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_1-a" origId="MISRA2004-20_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_2" desc="The string handling functions from &lt;cstring>, &lt;cstdlib>, &lt;cwchar> and &lt;cinttypes> shall not be used" id="MISRACPP2023-21_2_2-a" origId="CODSTA-242" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_3-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_4" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRACPP2023-21_2_4-a" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRACPP2023-21_6_1" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_1-a" origId="MISRA2004-20_4" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRACPP2023-21_6_2" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_2-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_2" desc="Any member function named 'allocate' or 'deallocate' enclosed by namespace 'std' should not be used" id="MISRACPP2023-21_6_2-b" origId="MRM-62_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_2" desc="The 'std::unique_ptr::release' function should not be used" id="MISRACPP2023-21_6_2-c" origId="MRM-62_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Destructor should not be called manually" id="MISRACPP2023-21_6_3-a" origId="MRM-31_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Do not declare the 'new' and 'delete' operators" id="MISRACPP2023-21_6_3-b" origId="MRM-59" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="The memory management functions from the &lt;new> and &lt;memory> headers should not be used" id="MISRACPP2023-21_6_3-c" origId="MRM-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Advanced memory management operators 'new' and 'delete' should not be used" id="MISRACPP2023-21_6_3-d" origId="MRM-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_4" desc="Define both sized and unsized versions of operator delete" id="MISRACPP2023-21_6_4-a" origId="CODSTA-MCPP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_5" desc="Do not delete objects with incomplete class at the point of deletion" id="MISRACPP2023-21_6_5-a" origId="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-22_3_1" desc="The 'assert' macro shall not be used with a constant expression" id="MISRACPP2023-22_3_1-a" origId="CODSTA-314" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-22_4_1" desc="The literal value zero shall be the only value assigned to errno" id="MISRACPP2023-22_4_1-a" origId="CODSTA-239" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-23_11_1" desc="The raw pointer constructors of 'std::shared_ptr' and 'std::unique_ptr' should not be used" id="MISRACPP2023-23_11_1-a" origId="CODSTA-MCPP-57" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-24_5_1" desc="The character handling functions from &lt;cctype> and &lt;cwctype> shall not be used" id="MISRACPP2023-24_5_1-a" origId="CODSTA-237" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-24_5_2" desc="The C++ Standard Library functions 'memcpy', 'memmove' and 'memcmp' from &lt;cstring> should not be used" id="MISRACPP2023-24_5_2-a" origId="CODSTA-238" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_1" desc="The 'setlocale' function should not be used" id="MISRACPP2023-25_5_1-a" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_1" desc="The 'std::locale::global' function should not be used" id="MISRACPP2023-25_5_1-b" origId="CODSTA-CPP-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRACPP2023-25_5_2-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRACPP2023-25_5_2-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="The address of the 'localeconv', 'getenv', 'setlocale' or, 'strerror' function should not be taken" id="MISRACPP2023-25_5_2-c" origId="CODSTA-185_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_3" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRACPP2023-25_5_3-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-26_3_1" desc="Avoid using vector&lt;bool>" id="MISRACPP2023-26_3_1-a" origId="STL-14" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_3_1" desc="Predicates shall not have persistent side effects" id="MISRACPP2023-28_3_1-a" origId="GLOBAL-PREDICATENOSE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="MISRACPP2023-28_6_1-a" origId="CODSTA-MCPP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should be used to forward forwarding references" id="MISRACPP2023-28_6_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should only be used to forward forwarding references" id="MISRACPP2023-28_6_2-b" origId="CODSTA-MCPP-13_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_3" desc="Do not subsequently use the argument to std::forward" id="MISRACPP2023-28_6_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_3" desc="Do not rely on the value of a moved-from object" id="MISRACPP2023-28_6_3-b" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_4" desc="The result of std::remove, std::remove_if, std::unique and empty shall be used" id="MISRACPP2023-28_6_4-a" origId="CODSTA-CPP-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="3;" cat="MISRACPP2023-30_0_1" desc="The input/output library stdio.h shall not be used" id="MISRACPP2023-30_0_1-a" origId="MISRA2004-20_9" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="MISRACPP2023-30_0_1" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRACPP2023-30_0_1-b" origId="CODSTA-110" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-30_0_2" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="MISRACPP2023-30_0_2-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="Do not include headers deprecated in the C++17 standard" id="MISRACPP2023-4_1_2-a" origId="CODSTA-MCPP-58" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="The 'uncaught_exception' function deprecated in the C++17 standard should not be used" id="MISRACPP2023-4_1_2-b" origId="CODSTA-MCPP-59" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="Do not use throw exception specifications" id="MISRACPP2023-4_1_2-c" origId="EXCEPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="A constexpr static data member should not be declared outside the class definition" id="MISRACPP2023-4_1_2-d" origId="OPT-44" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid incorrect shift operations" id="MISRACPP2023-4_1_3-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid signed integer overflows" id="MISRACPP2023-4_1_3-b" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid null pointer dereferencing" id="MISRACPP2023-4_1_3-c" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid division by zero" id="MISRACPP2023-4_1_3-d" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRACPP2023-4_6_1-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRACPP2023-4_6_1-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRACPP2023-4_6_1-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRACPP2023-4_6_1-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRACPP2023-4_6_1-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRACPP2023-4_6_1-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRACPP2023-4_6_1-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_0_1" desc="Trigraphs shall not be used" id="MISRACPP2023-5_0_1-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not declare entities in the standard library namespaces: posix, std and stdN" id="MISRACPP2023-5_10_1-a" origId="CODSTA-CPP-95_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="MISRACPP2023-5_10_1-b" origId="NAMING-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="An identifier shall not contain a double underscore '__'" id="MISRACPP2023-5_10_1-c" origId="NAMING-33_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="MISRACPP2023-5_10_1-d" origId="NAMING-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="A user-defined literal suffix should be directly preceded by a literal operator" id="MISRACPP2023-5_10_1-e" origId="NAMING-51_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRACPP2023-5_10_1" desc="A macro identifier should have an appropriate form" id="MISRACPP2023-5_10_1-f" origId="NAMING-55" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not declare identifiers with names reserved in the standard library" id="MISRACPP2023-5_10_1-g" origId="NAMING-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="MISRACPP2023-5_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_2" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRACPP2023-5_13_2-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_3" desc="Octal constants (other than zero) shall not be used" id="MISRACPP2023-5_13_3-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_4" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRACPP2023-5_13_4-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_5" desc="The lowercase form of 'L' shall not be used as the first character in a literal suffix" id="MISRACPP2023-5_13_5-a" origId="PORT-01_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_6" desc="An integer-literal of type long long shall not use a single 'L' or 'l' in any suffix" id="MISRACPP2023-5_13_6-a" origId="PORT-38" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_7" desc="String literals with different encoding prefixes shall not be concatenated" id="MISRACPP2023-5_13_7-a" origId="PB-38_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_7" desc="String literals with and without encoding prefixes should not be concatenated" id="MISRACPP2023-5_13_7-b" origId="PB-38_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRACPP2023-5_7_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="MISRACPP2023-5_7_2-a" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_7_3" desc="Line-splicing shall not be used in // comments" id="MISRACPP2023-5_7_3-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Always declare functions at file scope" id="MISRACPP2023-6_0_1-a" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Parameter names in function declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-b" origId="FORMAT-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-c" origId="FORMAT-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_2" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRACPP2023-6_0_2-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_3" desc="The global namespace shall only contain main() and namespace declarations" id="MISRACPP2023-6_0_3-a" origId="CODSTA-CPP-36" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_4" desc="The identifier main shall not be used for a function other than the global function main" id="MISRACPP2023-6_0_4-a" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_1" desc="The One Definition Rule shall not be violated" id="MISRACPP2023-6_2_1-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_2" desc="All declarations of an object or function shall have compatible types" id="MISRACPP2023-6_2_2-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_2" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRACPP2023-6_2_2-b" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="An identifier with external linkage shall have no more then one external definition" id="MISRACPP2023-6_2_3-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-b" origId="GLOBAL-ONEDEFTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-c" origId="GLOBAL-ONEDEFINLINE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="MISRACPP2023-6_2_3-d" origId="TEMPL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_4" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="MISRACPP2023-6_2_4-a" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_1" desc="Member variable names in derived classes should not be the same as member variable names in base classes" id="MISRACPP2023-6_4_1-f" origId="CODSTA-CPP-110" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_1" desc="A variable declared in an inner scope shall not hide a variable declared in an outer scope" id="MISRACPP2023-6_4_1-g" origId="CODSTA-303" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-a" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide non-equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_3" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRACPP2023-6_4_3-a" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="MISRACPP2023-6_5_1" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRACPP2023-6_5_1-a" origId="MISRA-023" sev="4" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_5_2" desc="Do not use static keyword except inside functions and classes" id="MISRACPP2023-6_5_2-a" origId="CODSTA-CPP-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_5_2" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRACPP2023-6_5_2-b" origId="MISRA-024" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-6_7_1" desc="Local variables shall not have static storage duration" id="MISRACPP2023-6_7_1-a" origId="CODSTA-04" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_7_2" desc="Global variables and static data members should not be used" id="MISRACPP2023-6_7_2-a" origId="CODSTA-CPP-82" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not point to a wrapped object that has been freed" id="MISRACPP2023-6_8_1-a" origId="BD-PB-WRAPESC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not read the value of a non-active union field" id="MISRACPP2023-6_8_1-b" origId="BD-PB-NAUNF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not use an object after its lifetime has ended" id="MISRACPP2023-6_8_1-c" origId="BD-PB-LIFETIME" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_2" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRACPP2023-6_8_2-a" origId="MISRA2004-17_6_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_2" desc="Never return lambdas that capture local objects by reference" id="MISRACPP2023-6_8_2-b" origId="CODSTA-MCPP-17" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_3" desc="The address of an object with automatic storage duration shall not be assigned to an object with a greater lifetime" id="MISRACPP2023-6_8_3-a" origId="CODSTA-311" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_4" desc="Member functions returning references to their object should be ref-qualified appropriately" id="MISRACPP2023-6_8_4-a" origId="CODSTA-CPP-206" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_9_1" desc="The same type aliases shall be used in all declarations of the same entity" id="MISRACPP2023-6_9_1-a" origId="CODSTA-67_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="10;" cat="MISRACPP2023-6_9_2" desc="The names of the standard signed integer types and standard unsigned integer types should not be used" id="MISRACPP2023-6_9_2-a" origId="CODSTA-223_c" sev="4" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_1" desc="There shall be no conversion from type bool" id="MISRACPP2023-7_0_1-a" origId="CODSTA-CPP-211" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_2" desc="There shall be no conversion to type bool" id="MISRACPP2023-7_0_2-a" origId="CODSTA-CPP-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_0_3" desc="The numerical value of a character shall not be used" id="MISRACPP2023-7_0_3-a" origId="CODSTA-316" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_4" desc="Operands of bitwise and complement operators shall have an unsigned type" id="MISRACPP2023-7_0_4-a" origId="CODSTA-307" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_4" desc="Operands of shift operators shall have an unsigned type" id="MISRACPP2023-7_0_4-b" origId="CODSTA-308" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_5" desc="Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" id="MISRACPP2023-7_0_5-a" origId="CODSTA-310" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_0_6" desc="Assignment between numeric types shall be appropriate" id="MISRACPP2023-7_0_6-a" origId="CODSTA-312" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="MISRACPP2023-7_11_1-a" origId="CODSTA-MCPP-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_1" desc="The 'NULL' identifier should not be used" id="MISRACPP2023-7_11_1-b" origId="CODSTA-CPP-111" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="3;" cat="MISRACPP2023-7_11_2" desc="An object of array type should not decay to a pointer when it is passed as a function argument" id="MISRACPP2023-7_11_2-a" origId="PB-41_b" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRACPP2023-7_11_2" desc="An object of array type should not be passed as a variadic argument to a function" id="MISRACPP2023-7_11_2-b" origId="PB-41_c" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_3" desc="A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" id="MISRACPP2023-7_11_3-a" origId="CODSTA-309" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_0_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRACPP2023-8_0_1-a" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_0_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRACPP2023-8_0_1-b" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRACPP2023-8_14_1-a" origId="MISRA2004-12_4_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRACPP2023-8_18_1-a" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-b" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-c" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_2" desc="The result of an assignment operator should not be used" id="MISRACPP2023-8_18_2-a" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_19_1" desc="The comma operator shall not be used" id="MISRACPP2023-8_19_1-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_1_1" desc="A non-transient lambda shall not implicitly capture this" id="MISRACPP2023-8_1_1-a" origId="CODSTA-MCPP-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_1_2" desc="Variables should be captured explicitly in a non-transient lambda" id="MISRACPP2023-8_1_2-a" origId="CODSTA-MCPP-103" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRACPP2023-8_20_1-a" origId="PB-73" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions in preprocessor directives should not lead to wraparound" id="MISRACPP2023-8_20_1-b" origId="PB-73_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_1" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRACPP2023-8_2_1-a" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_10" desc="Do not use recursion" id="MISRACPP2023-8_2_10-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_11" desc="An argument passed via ellipsis shall have an appropriate type" id="MISRACPP2023-8_2_11-a" origId="CODSTA-CPP-207" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRACPP2023-8_2_2-a" origId="CODSTA-CPP-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_3" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRACPP2023-8_2_3-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_4" desc="Casts shall not be performed between a pointer to a function and any other type" id="MISRACPP2023-8_2_4-a" origId="CODSTA-124_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_5" desc="Avoid using reinterpret_cast" id="MISRACPP2023-8_2_5-a" origId="CODSTA-CPP-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="MISRACPP2023-8_2_6" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-a" origId="CODSTA-65" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_6" desc="An object with enumeration type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-b" origId="CODSTA-65_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_7-a" origId="MISRA2004-11_3_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to 'intptr_t' and 'uintptr_t' types" id="MISRACPP2023-8_2_7-b" origId="CODSTA-240" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_8" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_8-a" origId="MISRA2004-11_3_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_9" desc="The operand to typeid shall not be an expression of polymorphic class type" id="MISRACPP2023-8_2_9-a" origId="CODSTA-CPP-204" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRACPP2023-8_3_1-a" origId="MISRA2004-12_9" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_3_2" desc="The built-in unary + operator should not be used" id="MISRACPP2023-8_3_2-a" origId="CODSTA-236" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid accessing arrays out of bounds" id="MISRACPP2023-8_7_1-a" origId="BD-PB-ARRAY" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRACPP2023-8_7_1-b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow when reading from a buffer" id="MISRACPP2023-8_7_1-c" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow when writing to a buffer" id="MISRACPP2023-8_7_1-d" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRACPP2023-8_7_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRACPP2023-8_7_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_9_1" desc="Do not compare two unrelated pointers" id="MISRACPP2023-8_9_1-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_2_1" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="MISRACPP2023-9_2_1-a" origId="PB-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRACPP2023-9_3_1-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_3_1" desc="'if' and 'else' should be followed by a compound statement" id="MISRACPP2023-9_3_1-b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_1" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRACPP2023-9_4_1-a" origId="CODSTA-241" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="The first or the last label of a switch statement should be the 'default' label unless all enumeration values are tested" id="MISRACPP2023-9_4_2-a" origId="CODSTA-61_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="Every switch branch should be unconditionally terminated" id="MISRACPP2023-9_4_2-b" origId="CODSTA-64_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRACPP2023-9_4_2-c" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRACPP2023-9_4_2-d" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="Every switch statement shall have at least two switch-clauses" id="MISRACPP2023-9_4_2-e" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="The 'switch' statement should not contain labels other than 'case' and 'default'" id="MISRACPP2023-9_4_2-f" origId="CODSTA-243" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="The condition of a 'switch' statement should only be preceded by an optional simple-declaration" id="MISRACPP2023-9_4_2-g" origId="CODSTA-MCPP-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="MISRACPP2023-9_5_1" desc="Legacy 'for' statements should be simple" id="MISRACPP2023-9_5_1-a" origId="CODSTA-315" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_5_2" desc="A for-range-initializer shall contain at most one function call" id="MISRACPP2023-9_5_2-a" origId="CODSTA-MCPP-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_1" desc="The goto statement shall not be used" id="MISRACPP2023-9_6_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_2" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRACPP2023-9_6_2-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_3" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRACPP2023-9_6_3-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_4" desc="Never return from functions that should not return" id="MISRACPP2023-9_6_4-a" origId="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_5" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRACPP2023-9_6_5-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="34;" authUrg="19;" id="2" total="34"/>
            <Severity authTot="61;" authUrg="31;" id="4" total="61"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/VSCodeIntegrate/clock.c" locStartln="5" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-30_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="d8521f9a-19da-3afe-9d3e-0f7afd58b695" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a026b6b1-74d6-3357-8215-270578694bc6" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="5" goals="1,"/>
    <StdViol msg="Variable 'buf' should be explicitly initialized" ln="15" locFile="/VSCodeIntegrate/clock.c" locStartln="15" sev="4" auth="syoung" locRef="1" rule="MISRACPP2023-11_6_1-a" lnHash="-2004706563" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-2004706563" unbViolId="5d9e4590-f93c-3958-b1c4-8ac5b0854dbd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16c01be2-6fb1-3cab-b114-e37983523054" locEndPos="10" locType="sr" urgent="true" hash="-249486341" locEndLn="15" goals="1,"/>
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type 'void *'" ln="16" locFile="/VSCodeIntegrate/clock.c" locStartln="16" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-8_2_6-a" lnHash="-1564703446" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-1564703446" unbViolId="d99800be-d7a3-33f8-a957-c7912a937f5b" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f9ea860-d347-333b-b922-524d7cc60ca7" locEndPos="28" locType="sr" urgent="true" hash="-249486341" locEndLn="16" goals="1,"/>
    <StdViol msg="The 'sprintf' library function should not be used" ln="19" locFile="/VSCodeIntegrate/clock.c" locStartln="19" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-30_0_1-b" lnHash="369521280" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="369521280" unbViolId="23082a9a-76a3-3508-be36-5f36754e39d3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cd46324-2974-305b-9e9e-8d715f1a84fa" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'sprintf' function" ln="19" locFile="/VSCodeIntegrate/clock.c" locStartln="19" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-7_11_2-a" lnHash="369521280" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="369521280" unbViolId="5996203d-cad1-323d-a9e5-c7dc906208d4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="632a750a-1b3f-3f30-98c9-40677b101623" locEndPos="13" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'print_string' function" ln="20" locFile="/VSCodeIntegrate/clock.c" locStartln="20" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-7_11_2-a" lnHash="-1350296736" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="-1350296736" unbViolId="111e56ae-2eef-3657-8b5d-e46c41f06040" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="062c5a46-8c75-3fe2-a802-099d3d77f38e" locEndPos="18" locType="sr" urgent="true" hash="-249486341" locEndLn="20" goals="1,"/>
    <StdViol msg="Parameter 'new_time' is not used" ln="27" locFile="/VSCodeIntegrate/clock.c" locStartln="27" sev="2" auth="syoung" locRef="1" rule="MISRACPP2023-0_2_2-a" lnHash="-1989025327" rule.header="Eliminate unused parameters" tool="c++test" lineHash="-1989025327" unbViolId="659fcf7d-30ba-3580-8bbf-4f1a9b24fb1e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a02ab883-47a1-3df5-a400-47ef494ca59b" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/VSCodeIntegrate/driver.c" locStartln="6" sev="2" auth="syoung" locRef="2" rule="MISRACPP2023-30_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="66091da9-d216-3013-9b38-9fbd0003edb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5a98161-8ab4-36f2-8b15-3d56e194f7e0" locEndPos="1" locType="sr" urgent="true" hash="65740504" locEndLn="6" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-6_9_2-a" lnHash="-1050535651" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1050535651" unbViolId="abb88f28-7211-3dab-8431-e9f380fa41ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f75184f-6b18-3e9d-bd73-7713e926932d" locEndPos="1" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1,"/>
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/VSCodeIntegrate/driver.c" locStartln="13" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-6_5_1-a" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="e8e237f2-793e-37fe-8c6b-e67358000818" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68cf551c-330b-3193-a45c-ff70abbca387" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1,"/>
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/VSCodeIntegrate/driver.c" locStartln="32" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-6_5_1-a" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="32986c5a-57f8-3ce9-befe-d73b3c801717" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="083e6990-595a-3fc6-8ed4-1ab6c870ba82" locEndPos="6" locType="sr" urgent="true" hash="65740504" locEndLn="32" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="35" locFile="/VSCodeIntegrate/driver.c" locStartln="35" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-6_9_2-a" lnHash="1236489322" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1236489322" unbViolId="d3fb7b31-bdc4-3317-a726-121053e6e4b2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22647349-5a5c-3262-b7a4-acaa6ede5134" locEndPos="9" locType="sr" urgent="true" hash="65740504" locEndLn="35" goals="1,"/>
    <StdViol msg="Variable 'res' should be explicitly initialized" ln="35" locFile="/VSCodeIntegrate/driver.c" locStartln="35" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-11_6_1-a" lnHash="1236489322" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1236489322" unbViolId="a137c03a-d6f2-31b4-bdcf-e732e6129414" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bf7df75-a60d-3362-af32-cd37b2f347a7" locEndPos="13" locType="sr" urgent="true" hash="65740504" locEndLn="35" goals="1,"/>
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/VSCodeIntegrate/driver.c" locStartln="35" sev="4" auth="syoung" locRef="2" rule="MISRACPP2023-10_0_1-a" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="aabbb32c-2cef-392d-989c-e16b1cb6309c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="412159c3-5263-3c86-9d56-7d9572f35d33" locEndPos="18" locType="sr" urgent="true" hash="65740504" locEndLn="35" goals="1,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/VSCodeIntegrate/timer.c" locStartln="6" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-30_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="9f766c93-0d4f-3678-9eed-c4855700ce79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="322d7034-2aed-3839-a0be-abe81225a4fa" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="17" locFile="/VSCodeIntegrate/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1227318948" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1227318948" unbViolId="549b62e9-9cd5-3980-a471-98316cd956e6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5fe0da0-c574-3d21-8a0b-c97f819fb705" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0,"/>
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/VSCodeIntegrate/timer.c" locStartln="17" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_5_1-a" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="65c3aced-1cc1-3c26-a4d8-5a1a3b155a08" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c126af6-13e9-39ce-8817-bc267904340d" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="18" locFile="/VSCodeIntegrate/timer.c" locStartln="18" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1846901926" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1846901926" unbViolId="6a317039-bc3b-333d-bcb6-56191d63bfa3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e71cf285-a4d3-3173-8d94-aac4674e6c98" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'memset' function" ln="22" locFile="/VSCodeIntegrate/timer.c" locStartln="22" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-a" lnHash="-1074791283" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="-1074791283" unbViolId="a6d637b3-a37f-3192-8d9a-72f3c7a5dbfb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="934b6dc8-449c-337b-968f-862d487c9474" locEndPos="12" locType="sr" hash="-275311578" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="28" locFile="/VSCodeIntegrate/timer.c" locStartln="28" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1679375043" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1679375043" unbViolId="07194da7-89c9-3440-8e97-a7698846b5f1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6829387f-fd2f-3928-b93f-4ee3793030b8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0,"/>
    <StdViol msg="Variable 'i' should be explicitly initialized" ln="28" locFile="/VSCodeIntegrate/timer.c" locStartln="28" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="1679375043" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1679375043" unbViolId="e21fdedf-35ee-3e38-a5ee-d19955771a9d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84bec11d-1422-3ce8-ae4b-85e59e209b2e" locEndPos="9" locType="sr" urgent="true" hash="-275311578" locEndLn="28" goals="1,"/>
    <StdViol msg="The 'for' init-statement should only declare and initialize a loop-counter of integer type" ln="30" locFile="/VSCodeIntegrate/timer.c" locStartln="30" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-9_5_1-a" lnHash="1743982722" rule.header="Legacy 'for' statements should be simple" tool="c++test" lineHash="1743982722" unbViolId="1b56c0ba-fc82-3751-97fe-4d0f80b77a5e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c174c4a3-1a53-3a71-aacc-05133da70eb0" locEndPos="5" locType="sr" urgent="true" hash="-275311578" locEndLn="30" goals="1,"/>
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/VSCodeIntegrate/timer.c" locStartln="38" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_5_1-a" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="ce4779d1-29b5-3491-b061-754c8b5ccb57" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06bc094d-95cd-3695-a3b3-023a601b8aa1" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="621530644" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="621530644" unbViolId="200c08e2-be00-34ac-b108-d68a7743bc07" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcd0f804-430d-3888-a45a-1b3f39055f4c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Variable 'start_h' should be explicitly initialized" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="621530644" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="621530644" unbViolId="5baedd07-df9d-31ad-b5c3-9f8288d143f8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058c9fd2-2d70-3adb-b1de-f86c4ae3c834" locEndPos="9" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1,"/>
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-0_2_1-a" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="d11c958b-a0e7-3404-ac8b-1c7e8e6f64b9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c09124dd-152e-3954-9e8c-8b3b8ec8b9da" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Variable 'start_m' should be explicitly initialized" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="621530644" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="621530644" unbViolId="362c22b7-ef64-3e8d-9506-3ddc1fdd67cc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43e29673-98e0-3fa7-959c-57e94ccc2b63" locEndPos="18" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1,"/>
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-10_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="9697e4a0-1e3e-3f48-9cea-f3641ca72703" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52759503-d93c-36d3-b695-9f176b6024f8" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-0_2_1-a" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="b54fc7b3-e0f5-3d3c-aaa7-b4e2efb7d4f0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be536e81-4f26-30df-a42a-a3914d21e5c0" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Variable 'end_h' should be explicitly initialized" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="621530644" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="621530644" unbViolId="2c964a27-c9bf-392f-8a88-39b33f3db173" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0734fe0b-1eed-3c27-a120-8bc9479b69af" locEndPos="27" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1,"/>
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-10_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="3dd3211b-bdb9-353e-9bee-f38c0b752c85" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bcf8576-44d3-30d4-8704-f4b577dd7626" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-0_2_1-a" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="86b286e0-9aa7-371c-8953-61209bcb0395" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44ce8ddf-8f4e-3b4a-b563-43700d05f9c6" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Variable 'end_m' should be explicitly initialized" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="621530644" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="621530644" unbViolId="e6e3126e-9fbb-3309-8cc5-c7dfe5dba27a" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8d30287-441d-34c6-b398-9b8930abd016" locEndPos="34" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1,"/>
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-10_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="4934598a-a0d3-3d52-b16d-b42690da8368" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62291535-adf3-3bd1-9da9-3e0ee0da5f61" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/VSCodeIntegrate/timer.c" locStartln="40" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-0_2_1-a" lnHash="621530644" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="621530644" unbViolId="6bac01a0-b0bf-3542-893b-1c923a6abbc8" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="310f2ce2-d2c8-3125-bb9d-df80ee1ef7ee" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0,"/>
    <StdViol msg="Variable 'the_record' should be explicitly initialized" ln="41" locFile="/VSCodeIntegrate/timer.c" locStartln="41" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="-456882160" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-456882160" unbViolId="9ff0254f-553f-30fe-b8c2-11ea48df9fca" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="565eb7a6-72c3-30a0-93cd-6acf7668434b" locEndPos="26" locType="sr" urgent="true" hash="-275311578" locEndLn="41" goals="1,"/>
    <StdViol msg="Variable 'timer' should be explicitly initialized" ln="42" locFile="/VSCodeIntegrate/timer.c" locStartln="42" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="1079331828" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1079331828" unbViolId="8765fa7b-4f82-32e1-8bcc-fdb346db9ec7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5cd71b4-e0e6-39e7-81c7-08b6cfb425fe" locEndPos="12" locType="sr" urgent="true" hash="-275311578" locEndLn="42" goals="1,"/>
    <StdViol msg="Variable 'tm_tmp' should be explicitly initialized" ln="43" locFile="/VSCodeIntegrate/timer.c" locStartln="43" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="1350390768" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1350390768" unbViolId="543c82f8-31fe-398a-9f6c-01c15be94829" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ac800d7-cca3-38b4-ad24-347ce71d9982" locEndPos="16" locType="sr" urgent="true" hash="-275311578" locEndLn="43" goals="1,"/>
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type 'void *'" ln="45" locFile="/VSCodeIntegrate/timer.c" locStartln="45" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-8_2_6-a" lnHash="1705568950" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="1705568950" unbViolId="f53fc571-be32-3ecf-8b8e-ab3d84899ba8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ce5efb-b38f-34aa-8087-634c8df6ba72" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not convert pointer to void type to an object with pointer type 'struct timer_record *'" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-8_2_6-a" lnHash="-527707354" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-527707354" unbViolId="011d0028-1bf2-3bcb-93b0-1efcfad17f09" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bb70f0e-9250-3617-805c-d3ca8054e6f5" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-21_6_2-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="7c220ef8-9353-311f-a1db-b286166411af" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b96cb80-fd75-38c5-984a-32f4cae63657" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0,"/>
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/VSCodeIntegrate/timer.c" locStartln="48" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-21_6_1-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="412256b0-672c-321b-a425-a8c0fe17cacb" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="734c3802-dac7-34a9-a8c1-6d49ae46b19b" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0,"/>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="49" rule="MISRACPP2023-4_1_3-c" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78414068" lang="cpp" violId="f2542c6f-fdb2-3433-966a-8bc0f2467330" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="088076b5-b127-3ad9-9560-d878cf4099e5" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="621530644" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/VSCodeIntegrate/timer.c" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40"/>
        <ElDesc lineHash="-456882160" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* the_record;" ElType="." rngLn="41"/>
        <ElDesc lineHash="1079331828" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/VSCodeIntegrate/timer.c" desc="time_t timer;" ElType="." rngLn="42"/>
        <ElDesc lineHash="1350390768" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct tm* tm_tmp;" ElType="." rngLn="43"/>
        <ElDesc lineHash="1705568950" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/VSCodeIntegrate/timer.c" desc="timer = time(NULL);" ElType="." rngLn="45"/>
        <ElDesc lineHash="-1526808077" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/VSCodeIntegrate/timer.c" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46"/>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: malloc(...)" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/VSCodeIntegrate/timer.c" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/VSCodeIntegrate/timer.c" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Do not assign a value of type 'int' to type 'unsigned int'" ln="69" locFile="/VSCodeIntegrate/timer.c" locStartln="69" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_0_6-a" lnHash="1021803899" rule.header="Assignment between numeric types shall be appropriate" tool="c++test" lineHash="1021803899" unbViolId="7acd0c39-248a-3ddc-84f9-a09586b95966" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c992ae-c6b5-3efd-89b7-3dbdd1c60e43" locEndPos="27" locType="sr" urgent="true" hash="-275311578" locEndLn="69" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="74" locFile="/VSCodeIntegrate/timer.c" locStartln="74" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="-231664969" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-231664969" unbViolId="df54333d-1f99-31c4-83b6-98a0a412e499" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bffba6c9-0174-33ca-b215-6ce486af9a69" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0,"/>
    <StdViol msg="Variable 'record' should be explicitly initialized" ln="76" locFile="/VSCodeIntegrate/timer.c" locStartln="76" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="-1646187554" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-1646187554" unbViolId="71cf9883-f4b2-3815-9bbb-8b863c6e40ed" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e1b9bd6-ccb4-37f3-b892-37d85a5a1f4d" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="108" locFile="/VSCodeIntegrate/timer.c" locStartln="108" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="997006354" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="997006354" unbViolId="eceefa7b-974b-38f0-a088-dd3845f237c0" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13e478f0-5c47-3cfc-bd1d-b03de122a52e" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="111" locFile="/VSCodeIntegrate/timer.c" locStartln="111" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1679375043" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1679375043" unbViolId="f652efd9-3dab-3906-b397-8f21ccb8979b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e452c02-343c-39af-b5cb-8f0f62e86e64" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0,"/>
    <StdViol msg="Variable 'i' should be explicitly initialized" ln="111" locFile="/VSCodeIntegrate/timer.c" locStartln="111" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="1679375043" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1679375043" unbViolId="3de6a68e-9f13-39c5-8e85-2bdcb3144407" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6180eb0-f689-3d0a-957d-5b1124cc532a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0,"/>
    <StdViol msg="The 'for' init-statement should only declare and initialize a loop-counter of integer type" ln="114" locFile="/VSCodeIntegrate/timer.c" locStartln="114" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-9_5_1-a" lnHash="-1694282400" rule.header="Legacy 'for' statements should be simple" tool="c++test" lineHash="-1694282400" unbViolId="087ab7cf-b429-3315-883d-5e134de461f3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b15b253-9d7b-33b3-b0ef-76510e9ad8d0" locEndPos="5" locType="sr" urgent="true" hash="-275311578" locEndLn="114" goals="1,"/>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="26" rule="MISRACPP2023-8_7_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="39db67ea-40fa-3f8e-9778-2ed590df6789" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="3a0be581-069b-3103-bc8f-c377507a7f08" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="-301312004" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/VSCodeIntegrate/timer.c" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" ln="28" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="28" srcRngEndLn="29" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="28"/>
        <ElDesc lineHash="1743982722" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/VSCodeIntegrate/timer.c" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" ln="110" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="110" srcRngEndLn="111" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110"/>
            <ElDesc lineHash="1679375043" ln="111" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="111" srcRngEndLn="112" srcRngFile="/VSCodeIntegrate/timer.c" desc="int i;" ElType="." rngLn="111"/>
            <ElDesc lineHash="-1694282400" ln="114" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="114" srcRngEndLn="115" srcRngFile="/VSCodeIntegrate/timer.c" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval"/>
                <Ann msg="Entering the loop" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" ln="116" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="116" srcRngEndLn="117" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/VSCodeIntegrate/timer.c" locStartln="123" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-21_6_2-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="2a6e636e-36c4-3ae9-9de2-bc5e0d6c4ffc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b1e20ef-5519-3f41-9765-471592d3b4b7" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0,"/>
    <StdViol msg="'free' function should not be used" ln="123" locFile="/VSCodeIntegrate/timer.c" locStartln="123" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-21_6_1-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="dfe90a75-e98e-3b91-a5ad-443f25aa5655" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b0fe955-c8b2-3360-8c5d-9d5bc920d865" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="126" locFile="/VSCodeIntegrate/timer.c" locStartln="126" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1296456001" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1296456001" unbViolId="66364ec3-d474-3401-9354-1ea139ad2d9b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b98588a-e610-3096-ada3-0485aaaca3ef" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0,"/>
    <StdViol msg="Variable 'start' should be explicitly initialized" ln="128" locFile="/VSCodeIntegrate/timer.c" locStartln="128" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="-1285013714" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-1285013714" unbViolId="af532de5-410c-3389-9127-8da3e4176074" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc643dd0-cf0b-3229-839c-d4c6d3213221" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0,"/>
    <StdViol msg="Variable 'end' should be explicitly initialized" ln="129" locFile="/VSCodeIntegrate/timer.c" locStartln="129" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="-1725726827" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-1725726827" unbViolId="0b307d12-4399-3526-a7b7-3fe3192875ee" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d758c268-f2e5-3cbc-9220-1806696d5479" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'strftime' function" ln="133" locFile="/VSCodeIntegrate/timer.c" locStartln="133" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-a" lnHash="-23883783" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="-23883783" unbViolId="a4dd16f7-2896-3db9-a232-b735e27ab95f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d35a4f02-ec8b-3e76-abe7-0008a1328120" locEndPos="14" locType="sr" hash="-275311578" locEndLn="133" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'strftime' function" ln="134" locFile="/VSCodeIntegrate/timer.c" locStartln="134" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-a" lnHash="-1644342585" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="-1644342585" unbViolId="39ec53cc-2975-31c3-8c1f-52e129525cb0" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7ef0289-fa2a-3eee-bb25-3702dd64eab0" locEndPos="14" locType="sr" hash="-275311578" locEndLn="134" goals="0,"/>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/VSCodeIntegrate/timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="syoung" FirstElSrcRngEndLn="127" rule="MISRACPP2023-0_0_2-a" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/VSCodeIntegrate/timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="f51e79bc-2a4e-362f-9a1b-7a2d9378f6b6" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="4" locRef="3" tool="c++test" lineHash="130267201" unbViolId="e2250178-10ef-396b-84bd-6f65c7cb6bcb" locType="sr" hash="-275311578" causeLocRef="3">
      <ElDescList>
        <ElDesc lineHash="1296456001" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/VSCodeIntegrate/timer.c" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/VSCodeIntegrate/timer.c" desc="char start[BUF_SIZE];" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1725726827" ln="129" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="129" srcRngEndLn="130" srcRngFile="/VSCodeIntegrate/timer.c" desc="char end[BUF_SIZE];" ElType="." rngLn="129"/>
        <ElDesc lineHash="-1356760849" ln="131" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="131" srcRngEndLn="132" srcRngFile="/VSCodeIntegrate/timer.c" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131"/>
        <ElDesc lineHash="-23883783" ln="133" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="133" srcRngEndLn="134" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133"/>
        <ElDesc lineHash="-1644342585" ln="134" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="134" srcRngEndLn="135" srcRngFile="/VSCodeIntegrate/timer.c" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134"/>
        <ElDesc lineHash="130267201" ln="136" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-275311578" srcRngStartln="136" srcRngEndLn="137" srcRngFile="/VSCodeIntegrate/timer.c" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'sprintf' library function should not be used" ln="137" locFile="/VSCodeIntegrate/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-30_0_1-b" lnHash="201551585" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="201551585" unbViolId="bc67f8b0-42ad-3d0d-b905-58d74e1a17e5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="befe1faa-882f-350a-ba40-f7fa8c754cab" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as a variadic argument to the 'sprintf' function" ln="137" locFile="/VSCodeIntegrate/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-b" lnHash="201551585" rule.header="An object of array type should not be passed as a variadic argument to a function" tool="c++test" lineHash="201551585" unbViolId="8b27e587-75c7-32f2-ad41-ed100450a2a7" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7ff121-cd47-3d9a-bba7-06a2c0b29263" locEndPos="49" locType="sr" hash="-275311578" locEndLn="137" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as a variadic argument to the 'sprintf' function" ln="137" locFile="/VSCodeIntegrate/timer.c" locStartln="137" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-b" lnHash="201551585" rule.header="An object of array type should not be passed as a variadic argument to a function" tool="c++test" lineHash="201551585" unbViolId="c85240cc-2a2d-39a3-a8d6-1d0a39a23532" locStartPos="55" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe6cb857-49c6-3650-a631-ebb701373aae" locEndPos="56" locType="sr" hash="-275311578" locEndLn="137" goals="0,"/>
    <StdViol msg="Variable 'buf' should be explicitly initialized" ln="144" locFile="/VSCodeIntegrate/timer.c" locStartln="144" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="-2004706563" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-2004706563" unbViolId="26e4e538-119a-3d91-a48e-c93a8a7f5d72" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d81670f3-75d9-36cc-8b2e-3fe8ac16034b" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="145" locFile="/VSCodeIntegrate/timer.c" locStartln="145" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-6_9_2-a" lnHash="1679375043" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1679375043" unbViolId="fb540e07-48a3-393e-a793-61006c6386f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dcdb8cc-37cc-35dd-9262-cc0dcd5ff4fa" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0,"/>
    <StdViol msg="Variable 'i' should be explicitly initialized" ln="145" locFile="/VSCodeIntegrate/timer.c" locStartln="145" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-11_6_1-a" lnHash="1679375043" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1679375043" unbViolId="9e54b288-13cb-3112-b05d-0a25fca296e7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058ff444-3117-3366-ada1-2f2c5fa14b68" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0,"/>
    <StdViol msg="The 'for' init-statement should only declare and initialize a loop-counter of integer type" ln="148" locFile="/VSCodeIntegrate/timer.c" locStartln="148" sev="4" auth="syoung" locRef="3" rule="MISRACPP2023-9_5_1-a" lnHash="1531685295" rule.header="Legacy 'for' statements should be simple" tool="c++test" lineHash="1531685295" unbViolId="d1c7927b-fb1a-3692-9b5a-6c2e2458b6aa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b826d34b-17b2-3fae-a469-3d2e738c1618" locEndPos="5" locType="sr" urgent="true" hash="-275311578" locEndLn="148" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'format_timer_record' function" ln="150" locFile="/VSCodeIntegrate/timer.c" locStartln="150" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-a" lnHash="-1846563555" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="-1846563555" unbViolId="c3c04840-4fc3-36af-9207-10e693d22868" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c00861aa-3481-3da6-87a6-bda9ed374fdf" locEndPos="32" locType="sr" hash="-275311578" locEndLn="150" goals="0,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'print_string' function" ln="151" locFile="/VSCodeIntegrate/timer.c" locStartln="151" sev="2" auth="syoung" locRef="3" rule="MISRACPP2023-7_11_2-a" lnHash="924656480" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="924656480" unbViolId="b2829c0b-22cd-3b69-a35a-12c87abf12c2" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdf0654b-fb70-38de-be7d-804f7fb183b4" locEndPos="22" locType="sr" hash="-275311578" locEndLn="151" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/VSCodeIntegrate/stdinout.c" locStartln="10" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-30_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="3664b1cb-fc74-35f3-b391-11d2eeeb6cc2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0588315d-aa87-36bd-bf4c-cc6acba8f74d" locEndPos="1" locType="sr" urgent="true" hash="844867668" locEndLn="10" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="16" locFile="/VSCodeIntegrate/stdinout.c" locStartln="16" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-6_9_2-a" lnHash="2073209951" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="2073209951" unbViolId="9b9b6605-97e0-32a7-a108-11842a287941" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cab8a34-cc24-36c1-843c-70c9dd6b9fb7" locEndPos="1" locType="sr" urgent="true" hash="844867668" locEndLn="16" goals="1,"/>
    <StdViol msg="Variable 'c' should be explicitly initialized" ln="18" locFile="/VSCodeIntegrate/stdinout.c" locStartln="18" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-11_6_1-a" lnHash="-695983806" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-695983806" unbViolId="ea91faf6-74e4-377a-b8b6-a98c1413c72a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed022ce3-5378-3be5-a130-3e8a857f4504" locEndPos="10" locType="sr" urgent="true" hash="844867668" locEndLn="18" goals="1,"/>
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/VSCodeIntegrate/stdinout.c" locStartln="18" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-0_2_1-a" lnHash="-695983806" rule.header="A project should not contain unused local variables" tool="c++test" lineHash="-695983806" unbViolId="113ac734-f524-366d-9ed5-9f706314e376" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfa5a22a-4c51-37e8-93f2-db652e380cc1" locEndPos="10" locType="sr" urgent="true" hash="844867668" locEndLn="18" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="19" locFile="/VSCodeIntegrate/stdinout.c" locStartln="19" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-6_9_2-a" lnHash="1679375043" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1679375043" unbViolId="8fb49213-822b-3d91-afe7-9699fc8be7d2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f35cca0-d2ad-3575-baf4-b40fb2072cda" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0,"/>
    <StdViol msg="Variable 'i' should be explicitly initialized" ln="19" locFile="/VSCodeIntegrate/stdinout.c" locStartln="19" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-11_6_1-a" lnHash="1679375043" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="1679375043" unbViolId="bab9804d-0c04-3114-96ae-ee461f791ee6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6506db8-a090-37dd-bbd8-fb742c4a612a" locEndPos="9" locType="sr" urgent="true" hash="844867668" locEndLn="19" goals="1,"/>
    <StdViol msg="Variable 'buf' should be explicitly initialized" ln="20" locFile="/VSCodeIntegrate/stdinout.c" locStartln="20" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-11_6_1-a" lnHash="-2004706563" rule.header="All non-class variables with automatic storage duration should be explicitly initialized" tool="c++test" lineHash="-2004706563" unbViolId="5d53a906-f8c1-3ea5-8b78-5f463fdbc393" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ef20e19-2f53-3c48-a26d-60cd35b474fd" locEndPos="10" locType="sr" urgent="true" hash="844867668" locEndLn="20" goals="1,"/>
    <StdViol msg="The 'isdigit' function should not be used" ln="28" locFile="/VSCodeIntegrate/stdinout.c" locStartln="28" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-24_5_1-a" lnHash="124835664" rule.header="The character handling functions from &lt;cctype> and &lt;cwctype> shall not be used" tool="c++test" lineHash="124835664" unbViolId="a56854be-5f5d-3369-83d5-b386d29c5280" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62b14111-8fcb-3b73-859d-4c3feda65c59" locEndPos="20" locType="sr" urgent="true" hash="844867668" locEndLn="28" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="35" locFile="/VSCodeIntegrate/stdinout.c" locStartln="35" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-6_9_2-a" lnHash="-1448247265" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1448247265" unbViolId="8c75a74e-a42f-3a57-a79a-d8785210b3fc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c85cb964-e528-39c9-bb1c-05097f3ab1cf" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0,"/>
    <StdViol msg="Do not declare the 'index' local variable with static storage duration" ln="35" locFile="/VSCodeIntegrate/stdinout.c" locStartln="35" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-6_7_1-a" lnHash="-1448247265" rule.header="Local variables shall not have static storage duration" tool="c++test" lineHash="-1448247265" unbViolId="1c9275c8-6e4f-3fbd-978b-f34cd93ebd40" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c4c9751-6cfd-32f6-99d3-fbf35893e1c9" locEndPos="16" locType="sr" urgent="true" hash="844867668" locEndLn="35" goals="1,"/>
    <StdViol msg="There shall be no conversion from type 'int' to type 'char'" ln="40" locFile="/VSCodeIntegrate/stdinout.c" locStartln="40" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-7_0_3-a" lnHash="-1384567970" rule.header="The numerical value of a character shall not be used" tool="c++test" lineHash="-1384567970" unbViolId="1dae29f4-22e6-36bc-aa56-77f462f0c0c7" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc943a86-d49d-39ee-aaba-9d9e7653493b" locEndPos="14" locType="sr" urgent="true" hash="844867668" locEndLn="40" goals="1,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="46" locFile="/VSCodeIntegrate/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-21_2_1-a" lnHash="1849933771" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="1849933771" unbViolId="2ce63ad6-c4a6-365b-a1f6-876fdf728d7a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee01068d-de80-3651-8563-cb0faecd0db5" locEndPos="13" locType="sr" urgent="true" hash="844867668" locEndLn="46" goals="1,"/>
    <StdViol msg="Do not pass an object of array type as an argument to the 'atoi' function" ln="46" locFile="/VSCodeIntegrate/stdinout.c" locStartln="46" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-7_11_2-a" lnHash="1849933771" rule.header="An object of array type should not decay to a pointer when it is passed as a function argument" tool="c++test" lineHash="1849933771" unbViolId="408726d9-b11a-3e41-89c6-6c5de155a1c6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6a442b3-cd8d-364c-9930-951aa79f086e" locEndPos="18" locType="sr" urgent="true" hash="844867668" locEndLn="46" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="52" locFile="/VSCodeIntegrate/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-6_9_2-a" lnHash="-1042560936" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1042560936" unbViolId="c5d46ac4-8656-3c5b-89fe-13806aa1f2f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe504794-2b91-3d35-be73-713bb9ed06a0" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0,"/>
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/VSCodeIntegrate/stdinout.c" locStartln="52" sev="4" auth="syoung" locRef="4" rule="MISRACPP2023-10_1_1-a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="0064fba6-e7f3-3511-ab33-e827e04726af" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f1571f4-b014-3cdc-899c-7fcac2c3c4d9" locEndPos="24" locType="sr" urgent="true" hash="844867668" locEndLn="52" goals="1,"/>
    <StdViol msg="The 'printf' library function should not be used" ln="54" locFile="/VSCodeIntegrate/stdinout.c" locStartln="54" sev="2" auth="syoung" locRef="4" rule="MISRACPP2023-30_0_1-b" lnHash="-206127679" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-206127679" unbViolId="06f5e6ef-8ca2-3717-95e0-d3b2cf621a35" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98d8c8c5-23b8-379f-be98-9e15a223bbe1" locEndPos="13" locType="sr" urgent="true" hash="844867668" locEndLn="54" goals="1,"/>
    <StdViol msg="Do not use characters other than uppercase letters, numbers, and underscores in a macro name: _consts_h_" ln="3" locFile="/VSCodeIntegrate/consts.h" locStartln="3" sev="2" auth="syoung" locRef="5" rule="MISRACPP2023-5_10_1-f" lnHash="-2108418455" rule.header="A macro identifier should have an appropriate form" tool="c++test" lineHash="-2108418455" unbViolId="b3cbaf44-11f0-33c2-ab76-5729d89ffe8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0506fea6-1574-3697-a502-dd4128c8c548" locEndPos="1" locType="sr" urgent="true" hash="1651539479" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use characters other than uppercase letters, numbers, and underscores in a macro name: _input_h_" ln="3" locFile="/VSCodeIntegrate/inout.h" locStartln="3" sev="2" auth="syoung" locRef="6" rule="MISRACPP2023-5_10_1-f" lnHash="554854633" rule.header="A macro identifier should have an appropriate form" tool="c++test" lineHash="554854633" unbViolId="a3178377-cd11-37dc-b623-85d7369ba50e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f333c013-cb3b-3f4a-9ca4-dcd23aed9d03" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="6" locFile="/VSCodeIntegrate/inout.h" locStartln="6" sev="4" auth="syoung" locRef="6" rule="MISRACPP2023-6_9_2-a" lnHash="-155000900" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-155000900" unbViolId="b30f4e5b-7a28-3521-acfa-5b4fb35c7430" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ab86d4a-fe6a-3fe2-808e-d6e0d01016c6" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="6" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="9" locFile="/VSCodeIntegrate/inout.h" locStartln="9" sev="4" auth="syoung" locRef="6" rule="MISRACPP2023-6_9_2-a" lnHash="-1729353454" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1729353454" unbViolId="3dca90db-7738-32b0-8c82-a67e1213c55c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2251723-5658-36d0-9848-693bb804d9fd" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="9" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="12" locFile="/VSCodeIntegrate/inout.h" locStartln="12" sev="4" auth="syoung" locRef="6" rule="MISRACPP2023-6_9_2-a" lnHash="-1128300596" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1128300596" unbViolId="483694cf-5065-3865-bb28-1c5040adad51" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4eaaa5e-a9b0-3430-be1c-f0b909f8bbc1" locEndPos="1" locType="sr" urgent="true" hash="-311681184" locEndLn="12" goals="1,"/>
    <StdViol msg="Do not use characters other than uppercase letters, numbers, and underscores in a macro name: _clock_h_" ln="3" locFile="/VSCodeIntegrate/clock.h" locStartln="3" sev="2" auth="syoung" locRef="7" rule="MISRACPP2023-5_10_1-f" lnHash="1162366501" rule.header="A macro identifier should have an appropriate form" tool="c++test" lineHash="1162366501" unbViolId="d6c33484-cd36-347a-8bcc-41edcdd88a62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f42209f9-bd46-37ee-942e-8d5aadc26085" locEndPos="1" locType="sr" urgent="true" hash="-1204881763" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use characters other than uppercase letters, numbers, and underscores in a macro name: _timer_h_" ln="3" locFile="/VSCodeIntegrate/timer.h" locStartln="3" sev="2" auth="syoung" locRef="8" rule="MISRACPP2023-5_10_1-f" lnHash="-1992342642" rule.header="A macro identifier should have an appropriate form" tool="c++test" lineHash="-1992342642" unbViolId="ea16c466-cf08-33e9-8d1b-d4fdbba9cda4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712b17e8-1c9e-3c8d-b38a-22fb962408cc" locEndPos="1" locType="sr" urgent="true" hash="-311568100" locEndLn="3" goals="1,"/>
    <StdViol msg="Do not use the 'unsigned' standard integer type" ln="13" locFile="/VSCodeIntegrate/timer.h" locStartln="13" sev="4" auth="syoung" locRef="8" rule="MISRACPP2023-6_9_2-a" lnHash="-391931805" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-391931805" unbViolId="1533d722-afe6-3da5-8918-5394ce07c854" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f5973b7-44c2-3d0f-88b9-c1dda21acfc1" locEndPos="5" locType="sr" urgent="true" hash="-311568100" locEndLn="13" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="21" locFile="/VSCodeIntegrate/timer.h" locStartln="21" sev="4" auth="syoung" locRef="8" rule="MISRACPP2023-6_9_2-a" lnHash="1408320612" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1408320612" unbViolId="bff1fb0f-c111-3270-9fa6-f489564d73d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da5d7c23-59b6-3eca-b358-399425eb738a" locEndPos="1" locType="sr" urgent="true" hash="-311568100" locEndLn="21" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="27" locFile="/VSCodeIntegrate/timer.h" locStartln="27" sev="4" auth="syoung" locRef="8" rule="MISRACPP2023-6_9_2-a" lnHash="1493922828" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1493922828" unbViolId="80f87fd8-f082-3b74-9c58-c1e34347c755" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c95e0890-4a81-38b0-a1e0-1c8d6ae19fa7" locEndPos="26" locType="sr" urgent="true" hash="-311568100" locEndLn="27" goals="1,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="30" locFile="/VSCodeIntegrate/timer.h" locStartln="30" sev="4" auth="syoung" locRef="8" rule="MISRACPP2023-6_9_2-a" lnHash="-70128892" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-70128892" unbViolId="b3414268-8840-39be-b7a8-8c3324af12c6" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c219f71f-0b6b-3603-b58e-2f3e9bd12a44" locEndPos="26" locType="sr" urgent="true" hash="-311568100" locEndLn="30" goals="1,"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="95">
            <Project id="VSCodeIntegrate" name="VSCodeIntegrate" supp="0" total="95">
               <Res loc="/VSCodeIntegrate/clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="7"/>
               <Res loc="/VSCodeIntegrate/driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="7"/>
               <Res loc="/VSCodeIntegrate/timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="54"/>
               <Res loc="/VSCodeIntegrate/stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="16"/>
               <Res loc="/VSCodeIntegrate/consts.h" locRef="5" locType="sr" name="consts.h" supp="0" total="1"/>
               <Res loc="/VSCodeIntegrate/inout.h" locRef="6" locType="sr" name="inout.h" supp="0" total="4"/>
               <Res loc="/VSCodeIntegrate/clock.h" locRef="7" locType="sr" name="clock.h" supp="0" total="1"/>
               <Res loc="/VSCodeIntegrate/timer.h" locRef="8" locType="sr" name="timer.h" supp="0" total="5"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>